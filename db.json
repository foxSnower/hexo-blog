{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/images/header.png","path":"images/header.png","modified":1,"renderable":0},{"_id":"source/images/header.jpg","path":"images/header.jpg","modified":1,"renderable":0},{"_id":"source/images/logo.png","path":"images/logo.png","modified":1,"renderable":0},{"_id":"source/images/logo.psd","path":"images/logo.psd","modified":1,"renderable":0},{"_id":"source/images/logo2.png","path":"images/logo2.png","modified":1,"renderable":0},{"_id":"source/images/logo3.png","path":"images/logo3.png","modified":1,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":0},{"_id":"source/images/css-background-setting/2.png","path":"images/css-background-setting/2.png","modified":1,"renderable":0},{"_id":"source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":0},{"_id":"source/images/css-background-setting/1.png","path":"images/css-background-setting/1.png","modified":1,"renderable":0},{"_id":"source/images/webpack/picture1.png","path":"images/webpack/picture1.png","modified":1,"renderable":0},{"_id":"source/images/webpack/picture2.png","path":"images/webpack/picture2.png","modified":1,"renderable":0},{"_id":"source/images/webpack/picture4.png","path":"images/webpack/picture4.png","modified":1,"renderable":0},{"_id":"source/images/webpack/picture3.png","path":"images/webpack/picture3.png","modified":1,"renderable":0},{"_id":"source/images/webpack/picture5.png","path":"images/webpack/picture5.png","modified":1,"renderable":0},{"_id":"source/images/webpack/picture7.png","path":"images/webpack/picture7.png","modified":1,"renderable":0},{"_id":"source/images/webpack/picture6.png","path":"images/webpack/picture6.png","modified":1,"renderable":0},{"_id":"source/images/webpack/picture9.png","path":"images/webpack/picture9.png","modified":1,"renderable":0},{"_id":"source/images/mouse-images/1.jpg","path":"images/mouse-images/1.jpg","modified":1,"renderable":0},{"_id":"source/images/mouse-images/3.jpg","path":"images/mouse-images/3.jpg","modified":1,"renderable":0},{"_id":"source/images/mouse-images/5.jpg","path":"images/mouse-images/5.jpg","modified":1,"renderable":0},{"_id":"source/images/mouse-images/4.jpg","path":"images/mouse-images/4.jpg","modified":1,"renderable":0},{"_id":"source/images/mouse-images/6.jpg","path":"images/mouse-images/6.jpg","modified":1,"renderable":0},{"_id":"source/images/mouse-images/8.jpg","path":"images/mouse-images/8.jpg","modified":1,"renderable":0},{"_id":"source/images/mouse-images/7.jpg","path":"images/mouse-images/7.jpg","modified":1,"renderable":0},{"_id":"source/images/css-background-setting/3.png","path":"images/css-background-setting/3.png","modified":1,"renderable":0},{"_id":"source/images/mouse-images/2.jpg","path":"images/mouse-images/2.jpg","modified":1,"renderable":0},{"_id":"themes/coney/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/coney/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/coney/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/coney/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/coney/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/coney/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/coney/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/coney/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/coney/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/coney/source/img/coney.png","path":"img/coney.png","modified":1,"renderable":1},{"_id":"themes/coney/source/img/dots-2x.png","path":"img/dots-2x.png","modified":1,"renderable":1},{"_id":"themes/coney/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"themes/coney/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/coney/source/img/zhifu.jpg","path":"img/zhifu.jpg","modified":1,"renderable":1},{"_id":"themes/coney/source/img/weixin.jpg","path":"img/weixin.jpg","modified":1,"renderable":1},{"_id":"themes/coney/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/coney/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":1,"renderable":1},{"_id":"themes/coney/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":1,"renderable":1},{"_id":"themes/coney/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/coney/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/coney/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/coney/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1},{"_id":"themes/coney/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"source/images/webpack/picture8.png","path":"images/webpack/picture8.png","modified":1,"renderable":0},{"_id":"source/images/mouse-images/9.jpg","path":"images/mouse-images/9.jpg","modified":1,"renderable":0},{"_id":"themes/coney/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":1,"renderable":1},{"_id":"themes/coney/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/coney/source/js/jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":1,"renderable":1},{"_id":"themes/coney/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/coney/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/coney/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/coney/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/coney/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/coney/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/coney/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/miss-feeling/5.gif","path":"images/miss-feeling/5.gif","modified":1,"renderable":0},{"_id":"source/images/miss-feeling/9.gif","path":"images/miss-feeling/9.gif","modified":1,"renderable":0},{"_id":"source/images/cat-images/yj.jpg","path":"images/cat-images/yj.jpg","modified":1,"renderable":0},{"_id":"source/images/cat-images/pp.jpg","path":"images/cat-images/pp.jpg","modified":1,"renderable":0},{"_id":"source/images/miss-feeling/1.gif","path":"images/miss-feeling/1.gif","modified":1,"renderable":0},{"_id":"source/images/miss-feeling/3.gif","path":"images/miss-feeling/3.gif","modified":1,"renderable":0},{"_id":"source/images/miss-feeling/8.gif","path":"images/miss-feeling/8.gif","modified":1,"renderable":0},{"_id":"source/images/cat-images/hs1.jpg","path":"images/cat-images/hs1.jpg","modified":1,"renderable":0},{"_id":"source/images/cat-images/hs2.jpg","path":"images/cat-images/hs2.jpg","modified":1,"renderable":0},{"_id":"source/images/cat-images/yj2.jpg","path":"images/cat-images/yj2.jpg","modified":1,"renderable":0},{"_id":"source/images/miss-feeling/4.gif","path":"images/miss-feeling/4.gif","modified":1,"renderable":0},{"_id":"source/images/cat-images/hd.jpg","path":"images/cat-images/hd.jpg","modified":1,"renderable":0},{"_id":"source/images/miss-feeling/6.gif","path":"images/miss-feeling/6.gif","modified":1,"renderable":0},{"_id":"source/images/miss-feeling/7.gif","path":"images/miss-feeling/7.gif","modified":1,"renderable":0},{"_id":"source/images/miss-feeling/2.gif","path":"images/miss-feeling/2.gif","modified":1,"renderable":0}],"Cache":[{"_id":"source/favicon.ico","hash":"1026d88ff21adda0b387907d93c43f0f8e54482b","modified":1471919435682},{"_id":"themes/coney/.gitignore","hash":"af078ef5b0258e778d9929940cf10f54216bc959","modified":1420876474000},{"_id":"themes/coney/LICENSE","hash":"a12a2dc681f818facc310fa916aa5fd17c781aa6","modified":1420876474000},{"_id":"themes/coney/README.md","hash":"34d4db9e0bb3846ff3db6183a687e6999e57a5b6","modified":1420876474000},{"_id":"themes/coney/_config.yml","hash":"5e4da9cd9045526979c3e9079adf7510b5b02194","modified":1484645581601},{"_id":"themes/coney/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1420876474000},{"_id":"source/_posts/CSS常用背景图片定位方法.md","hash":"4fc5016eb420b9c4e19e9d753daf835a6def4b5f","modified":1484532877598},{"_id":"source/_posts/JS 控制CSS样式表的语法对照.md","hash":"a124e9783cb7537da088594c5dffc84bc90d8c2a","modified":1473408988989},{"_id":"source/_posts/Markdown 语法简略说明 (简体中文版).md","hash":"7d5342d9464740f5b8248c2237baf28157a71c92","modified":1484617419915},{"_id":"source/_posts/React Native组件的生命周期.md","hash":"88b94cc713a7e79ee3ab84210865eb22a60e6d97","modified":1476178593694},{"_id":"source/_posts/hexo-运行方法.md","hash":"6a2fb10af316bcf4bd09afbac4e334e8fc4817e0","modified":1484103184012},{"_id":"source/_posts/css绘图，实现一些特殊形状.md","hash":"cdc427d274468c66c98a1953edd9e1a0714dde85","modified":1473403092399},{"_id":"source/_posts/js获取日期：前天、昨天、今天、明天、后天.md","hash":"b7382bd24eeffcc6b6064af8d6cbb88569f816a0","modified":1473409686419},{"_id":"source/_posts/sublime Text 3常用插件安装大法.md","hash":"c747911eedad7f04269b50353d28606907d98cb0","modified":1484537507804},{"_id":"source/_posts/webpack 入门教程.md","hash":"e67b34712e8700698768d3ef825433b5d1b3cf96","modified":1476778028303},{"_id":"source/_posts/在Sublime Text创建一个JavaScript控制台.md","hash":"df91b33742167f9fd475f8a47885df3524b8c2d2","modified":1484560247195},{"_id":"source/_posts/地图定位到当前城市.md","hash":"8670c68fdf2b6b8136ec623089ee570c23b872d2","modified":1484564177112},{"_id":"source/_posts/就喜欢你看不惯我又干不掉我的样子.md","hash":"51f70cd3db6db645b55075f9fb01c8e805dcd7ac","modified":1473402830282},{"_id":"source/_posts/想买一件东西又觉得太贵的时候.md","hash":"a3cfeea090bcab8c460815560b621f4a489c8f77","modified":1473402896225},{"_id":"source/_posts/有一种错觉叫我能做到.md","hash":"055f3825bf7edbdb30f51cb4de673287a03d2555","modified":1474334268293},{"_id":"source/_posts/用一个二维码做下载地址，自动区分是 ios 还是 android.md","hash":"68bd1f708bec6f3c9efc24090e9d48a9de57cc1a","modified":1481006866107},{"_id":"source/_posts/自适应网页设计的核心.md","hash":"d4da5be35cf2e0a6f0af89e0f208258feca664d5","modified":1474533682298},{"_id":"source/images/header.png","hash":"b5afb8238aaa6babe14c2bd0e940f95000d23190","modified":1472806635045},{"_id":"source/images/header.jpg","hash":"73ddf0be7dd9bf277525655efa7b0e0b4c25bcd8","modified":1473649190357},{"_id":"source/images/logo.png","hash":"b7c77943d6cd8ce00e0bb893413a2ac2007fa61a","modified":1472806635232},{"_id":"source/images/logo.psd","hash":"3b95ae5e8914af72154ece31d2a2401453decff3","modified":1472806635310},{"_id":"source/images/logo2.png","hash":"8cb99b2b28095d6fefd2d70f9b203da89894cd7b","modified":1472806635326},{"_id":"source/images/logo3.png","hash":"69e0e681fd38460184ecb5f26c387fff0445fbf6","modified":1472806634936},{"_id":"source/personinfo/index.md","hash":"0d615a52306a7dedf44d5163098eba6a9577cb43","modified":1484636043365},{"_id":"source/tags/index.md","hash":"9ce4149ce4b03dd672bba481e2d83013b51bc725","modified":1484559199628},{"_id":"themes/coney/languages/.DS_Store","hash":"13a3bf1f48b7eaf52347a9433a18e8c4b3942431","modified":1420876474000},{"_id":"themes/coney/languages/default.yml","hash":"7e9594aa9551cd4841905b4b4d4fcabc2b40e447","modified":1420876474000},{"_id":"themes/coney/languages/zh-CN.yml","hash":"5999f2a463e3b597fdb7190f7092283e4f1918fe","modified":1420876474000},{"_id":"themes/coney/layout/.DS_Store","hash":"f5679b6629693dd3b9cca35deeee1fcc9929b308","modified":1420876474000},{"_id":"themes/coney/languages/zh-TW.yml","hash":"48b652fa2eb73f9f7cd512472d0cb20057152aea","modified":1420876474000},{"_id":"themes/coney/layout/archive.ejs","hash":"b4fd8369c1480e4ad283be5947648630e8e7cc01","modified":1420876474000},{"_id":"themes/coney/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1420876474000},{"_id":"themes/coney/layout/index.ejs","hash":"cbca1720a7e4c94233e17b45f0b46ab4fac5b765","modified":1420876474000},{"_id":"themes/coney/layout/layout.ejs","hash":"8370535f4410499e3038c3592a9151f9b845ba80","modified":1420876474000},{"_id":"themes/coney/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1420876474000},{"_id":"themes/coney/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1420876474000},{"_id":"themes/coney/scripts/.DS_Store","hash":"11ea48c534d93cc5118e6ac1417d14ce466143a7","modified":1420876474000},{"_id":"themes/coney/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1420876474000},{"_id":"themes/coney/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1420876474000},{"_id":"themes/coney/source/.DS_Store","hash":"bc21e53e8f435db9214460cd25b33add589d0fd4","modified":1420876474000},{"_id":"source/images/avatar.png","hash":"2d139540b06dd4db3a63e77708b69b64ae625594","modified":1472806635154},{"_id":"source/images/css-background-setting/2.png","hash":"e6150fc3f9070ad0e25a1164c7220144146775f9","modified":1484184241653},{"_id":"source/images/loading.gif","hash":"dbbb625cab09b2338228b80766189928cbd1a176","modified":1460625590678},{"_id":"source/images/css-background-setting/1.png","hash":"95403e7826ad8e7b3402685ec2d9633bef097b4f","modified":1484183684556},{"_id":"source/images/webpack/picture1.png","hash":"1a99ad1da64288255cc8e24896f3942098cd7e45","modified":1480921473613},{"_id":"source/images/webpack/picture2.png","hash":"37fc48ca3e1209d20448caf104ad73eb0caf4528","modified":1480921484909},{"_id":"source/images/webpack/picture4.png","hash":"2ad687dd4f3c1462bc629563fa1f3efb47448680","modified":1476686118133},{"_id":"source/images/webpack/picture3.png","hash":"ebfde0bd5269d9ae0b7805250f2a6cd557d7649d","modified":1480921495410},{"_id":"source/images/webpack/picture5.png","hash":"ba301dbefb3ba447c37add7e4e924ed9a30253d4","modified":1476686229389},{"_id":"source/images/webpack/picture7.png","hash":"e19549b7dd9c0daffb71528530a62a103b98a34b","modified":1476688961993},{"_id":"source/images/webpack/picture6.png","hash":"7f117f9ce65e8cfb100d0c4f12ec6897c9fc7e67","modified":1476687630728},{"_id":"source/images/webpack/picture9.png","hash":"426c3660c8a7b71bd4adc2fdba4eae52fe2b0a13","modified":1476690946040},{"_id":"source/images/mouse-images/1.jpg","hash":"95867f125de58b51f202d3f4759505761ca5b085","modified":1473315990748},{"_id":"source/images/mouse-images/3.jpg","hash":"6b58e491695e005727c2e18e509d3a2b64f8ac48","modified":1473316012925},{"_id":"source/images/mouse-images/5.jpg","hash":"5e5fb7956f93283790da6bacf3e479a1d918fdf1","modified":1473316040348},{"_id":"source/images/mouse-images/4.jpg","hash":"b2d12302673c96c26caceb7c83813730ff735770","modified":1473316030319},{"_id":"source/images/mouse-images/6.jpg","hash":"fbec4fe6cafe09758c3713925a7ea30b48f3d1bc","modified":1473316050473},{"_id":"source/images/mouse-images/8.jpg","hash":"3ffa7ae2d2a6bcc8b687f51e3658a761c801eac3","modified":1473316069841},{"_id":"source/images/mouse-images/7.jpg","hash":"8a6fe5d92097b0eb15f6ca67236211154636b0f3","modified":1473316060223},{"_id":"themes/coney/layout/_partial/.DS_Store","hash":"24fa5e798d66d0b52ef39a3c6c4642f4587b8401","modified":1420876474000},{"_id":"themes/coney/layout/_partial/after_footer.ejs","hash":"ef4fa27cac7626b7e8052e737af31cb7d0e1cd16","modified":1420876474000},{"_id":"themes/coney/layout/_partial/archive.ejs","hash":"aa3e66bb3b0249460ecc96ca9787c7e2f8e736b5","modified":1420876474000},{"_id":"source/images/css-background-setting/3.png","hash":"8582755318126996b8fee433531af4daca62b07e","modified":1484184255176},{"_id":"themes/coney/layout/_partial/baidu_analytics.ejs","hash":"752a2966eed9effd5bb495cc19a90f0a751a6bff","modified":1420876474000},{"_id":"themes/coney/layout/_partial/article.ejs","hash":"64fb413b46ed1d4823e0a0fb6e719e358950fc14","modified":1420876474000},{"_id":"themes/coney/layout/_partial/categories.ejs","hash":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1420876474000},{"_id":"themes/coney/layout/_partial/google_analytics.ejs","hash":"b6871f67c87c87acb5295ce4fb673b16a7296a01","modified":1420876474000},{"_id":"themes/coney/layout/_partial/footer.ejs","hash":"e65cfcb8241d740b485ae6e399e98111d475ff99","modified":1484637949324},{"_id":"themes/coney/layout/_partial/head.ejs","hash":"8dbc801a32a66da224e75ea97ce2baa1791ab306","modified":1420876474000},{"_id":"themes/coney/layout/_partial/pagination.ejs","hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1420876474000},{"_id":"themes/coney/layout/_partial/header.ejs","hash":"cf03bc496ec3e55ba11b47958b0c0b69ed72eecf","modified":1484566892032},{"_id":"themes/coney/layout/_partial/sidebar.ejs","hash":"3298799a7c787164f4efadeed24f33d92cbcc9da","modified":1484624661918},{"_id":"themes/coney/layout/_partial/tags.ejs","hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1420876474000},{"_id":"themes/coney/layout/_partial/search.ejs","hash":"aed90406246cc43f60dda8cd6558e9eccee342a4","modified":1420876474000},{"_id":"themes/coney/layout/_widget/category.ejs","hash":"9b4cc6be18aa6c5da4cf45913d5be83fc33081db","modified":1420876474000},{"_id":"themes/coney/layout/_widget/.DS_Store","hash":"03984e0335cbca971b47941aaea7886a9414f725","modified":1420876474000},{"_id":"themes/coney/layout/_widget/links.ejs","hash":"bc09e81b36739e960038fbe9735b9d9423b29f36","modified":1484548738674},{"_id":"themes/coney/layout/_widget/tag.ejs","hash":"cc97db230f727c27519298166ad904358811fb53","modified":1420876474000},{"_id":"themes/coney/layout/_widget/rss.ejs","hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1420876474000},{"_id":"themes/coney/layout/_widget/archive.ejs","hash":"07443d9617611d51caba34d3b536ff34c4ecde5e","modified":1420876474000},{"_id":"themes/coney/layout/_widget/tagcloud.ejs","hash":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1420876474000},{"_id":"source/images/mouse-images/2.jpg","hash":"83623c5a6da1277bce510cd8698cd326e0c681c9","modified":1473316001373},{"_id":"themes/coney/layout/_widget/recent_comments.ejs","hash":"3a475f29c4fa7dcb1bea0c0b8aa645fad2db168f","modified":1420876474000},{"_id":"themes/coney/layout/_widget/recent_posts.ejs","hash":"95085ee0c58a9d9ee1c1465681211763225aa4e9","modified":1420876474000},{"_id":"themes/coney/source/css/.DS_Store","hash":"287f1e48cc0c189ba0aac637cc5c911e27f8bccf","modified":1420876474000},{"_id":"themes/coney/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1420876474000},{"_id":"themes/coney/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1420876474000},{"_id":"themes/coney/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1420876474000},{"_id":"themes/coney/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1420876474000},{"_id":"themes/coney/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1420876474000},{"_id":"themes/coney/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1420876474000},{"_id":"themes/coney/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1420876474000},{"_id":"themes/coney/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1420876474000},{"_id":"themes/coney/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1420876474000},{"_id":"themes/coney/source/img/.DS_Store","hash":"a84162a680592d2a3109e9018cd9b6db326cf313","modified":1420876474000},{"_id":"themes/coney/source/img/coney.png","hash":"ec55414806c53a40e93fef0b2ce562e02e70398c","modified":1484550172518},{"_id":"themes/coney/source/img/dots-2x.png","hash":"2d900f9f8a0b53067401138d8cb411c83e747e8e","modified":1420876474000},{"_id":"themes/coney/source/img/logo.svg","hash":"0eb0ae32d95c6f0b14adb9ab491775dcd1da3af3","modified":1420876474000},{"_id":"themes/coney/source/img/favicon.ico","hash":"b5afb8238aaa6babe14c2bd0e940f95000d23190","modified":1471914794155},{"_id":"themes/coney/source/img/zhifu.jpg","hash":"8eec11e85cb420bc2060dd70ca973793427caac4","modified":1484640512862},{"_id":"themes/coney/source/img/weixin.jpg","hash":"d1db06e73a53930e6477e4bebf3680879ae368c6","modified":1484640553336},{"_id":"themes/coney/source/js/.DS_Store","hash":"ea2dde32b0a4eb734f06dd101c5dde884fdec06d","modified":1420876474000},{"_id":"themes/coney/source/font/.DS_Store","hash":"9d4a2fb93c9eb0d42da04530bc2a15a31764e5c1","modified":1420876474000},{"_id":"themes/coney/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1420876474000},{"_id":"themes/coney/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1420876474000},{"_id":"themes/coney/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1420876474000},{"_id":"themes/coney/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1420876474000},{"_id":"themes/coney/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1420876474000},{"_id":"themes/coney/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1420876474000},{"_id":"themes/coney/source/img/bg.jpg","hash":"1ac63554a2f3256b4a0b00adf70f4cbf9b8fe213","modified":1484555944385},{"_id":"themes/coney/source/css/style.styl","hash":"c9677bc3c9544a46b7f782b4191e4f54d8ead1a3","modified":1420876474000},{"_id":"source/images/webpack/picture8.png","hash":"106ee8b0643d9cefc45728dee51a9379b71b334c","modified":1476689122298},{"_id":"source/images/mouse-images/9.jpg","hash":"2d3b53b409470789b420060be5eaa8bd43027eaf","modified":1473316078991},{"_id":"themes/coney/source/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1420876474000},{"_id":"themes/coney/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1420876474000},{"_id":"themes/coney/source/js/jquery-2.1.0.min.js","hash":"98884258cbdb0d939fa2c5e74fc7ac9e56d8170f","modified":1420876474000},{"_id":"themes/coney/layout/_partial/post/article.ejs","hash":"37c7070fd9d7a1c49c4efef643edfd750070d867","modified":1484617489730},{"_id":"themes/coney/layout/_partial/post/.DS_Store","hash":"56f09853272fcd5c5da22c1e58aefec40077564d","modified":1420876474000},{"_id":"themes/coney/layout/_partial/post/catetags.ejs","hash":"f6b107078094333b6567d4a97700f559159675e1","modified":1420876474000},{"_id":"themes/coney/layout/_partial/post/comment.ejs","hash":"13d8720b311ddee20c4d29154cd8a460125e7a6c","modified":1484644322175},{"_id":"themes/coney/layout/_partial/post/gallery.ejs","hash":"7ca5b1db9439be61a8b77f6f7d857b56fdf1517f","modified":1420876474000},{"_id":"themes/coney/layout/_partial/post/header.ejs","hash":"49ed038ec936131e7f933846868c40ed6d1ff3a1","modified":1484637213304},{"_id":"themes/coney/layout/_partial/post/jiathis.ejs","hash":"adc047d2bbd031092df86f3be2866ea9c3b5f3c9","modified":1420876474000},{"_id":"themes/coney/layout/_partial/post/footer.ejs","hash":"1350a19770b8113af2d461ccffabdb94ebfb711d","modified":1484642962176},{"_id":"themes/coney/layout/_partial/post/pagination.ejs","hash":"dd9563aaa7094c7082a16e6c9cbc24b33aaef87c","modified":1420876474000},{"_id":"themes/coney/source/css/_base/.DS_Store","hash":"23f588c1b63ad06f4c9e9a10c310fe617c7164b4","modified":1420876474000},{"_id":"themes/coney/source/css/_base/code.styl","hash":"330209ebaebe69308e131fada85b9b619c85fbd9","modified":1420876474000},{"_id":"themes/coney/source/css/_base/font.styl","hash":"75f264bc742888dbe192e8d19eda70705d13c709","modified":1420876474000},{"_id":"themes/coney/source/css/_base/variable.styl","hash":"52e3c5c7a127b35d1e2d7a381106fe87830cca70","modified":1484641002972},{"_id":"themes/coney/source/css/_base/public.styl","hash":"78f573deaad22710c14235f5472e7fb8dce3bb98","modified":1484620204604},{"_id":"themes/coney/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1420876474000},{"_id":"themes/coney/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1420876474000},{"_id":"themes/coney/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1420876474000},{"_id":"themes/coney/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1420876474000},{"_id":"themes/coney/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1420876474000},{"_id":"themes/coney/source/css/_partial/article.styl","hash":"54528f14237c181b133069d91c694e741c010a1d","modified":1484631127047},{"_id":"themes/coney/source/css/_partial/aside.styl","hash":"914f9fdc420f22fc1e9b8e752b6cc99d3d491d72","modified":1484614980280},{"_id":"themes/coney/source/css/_partial/body","hash":"fa69096f3705f05690a694c697bd61a457849e42","modified":1484567922811},{"_id":"themes/coney/source/css/_partial/duoshuo.styl","hash":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1420876474000},{"_id":"themes/coney/source/css/_partial/footer.styl","hash":"38ae3f8d33352e6c884ed19cbfa9814863c94145","modified":1484643210364},{"_id":"themes/coney/source/css/_partial/gallery.styl","hash":"a544a58fdb4c8dd8274159323abd1e38cb03215e","modified":1420876474000},{"_id":"themes/coney/source/css/_partial/header.styl","hash":"f2d6d34551acfb1e4b5d488fa59a440aded2d4ca","modified":1484615257725},{"_id":"themes/coney/source/css/_partial/helper.styl","hash":"52d4ee51b7087c2c2a7e7ded6f63270165d9de89","modified":1420876474000},{"_id":"themes/coney/source/css/_partial/index.styl","hash":"eb8f6f99120ed6863e0178212db0c67c6f8400fd","modified":1484614824934},{"_id":"themes/coney/source/css/_partial/.DS_Store","hash":"41b60a2fb30124862cf14d59b535a4e5951529bf","modified":1420876474000},{"_id":"themes/coney/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1420876474000},{"_id":"themes/coney/source/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1420876474000},{"_id":"source/images/miss-feeling/5.gif","hash":"d75f2aa5ada221c6881941b915fe8bb1440000b8","modified":1474333338707},{"_id":"source/images/miss-feeling/9.gif","hash":"c383f0b562b77c21a6f05b424ed37abf74793a52","modified":1474333384854},{"_id":"source/images/cat-images/yj.jpg","hash":"178aa34089e757c7fbe0fa92f9885be7684a9412","modified":1472806635201},{"_id":"source/images/cat-images/pp.jpg","hash":"eb2022c772e4915f0386c8d1baadcf29953be654","modified":1472806635123},{"_id":"source/images/miss-feeling/1.gif","hash":"70475b19c0a904f00515b006e33b12b3699e83e7","modified":1474333289065},{"_id":"source/images/miss-feeling/3.gif","hash":"66312b6c66dd0855c1f0024cb53c5829ad8e3fab","modified":1474333315719},{"_id":"source/images/miss-feeling/8.gif","hash":"31ed988e77e388a6253e5c2abeed9ed03e227960","modified":1474333373179},{"_id":"source/images/cat-images/hs1.jpg","hash":"09a22cb5513704e90ee70d478b28542b2e741b09","modified":1472806635030},{"_id":"source/images/cat-images/hs2.jpg","hash":"3653ef22cf51fd5e56d201340448e7103b982162","modified":1472806635092},{"_id":"source/images/cat-images/yj2.jpg","hash":"4c6ee092341158d6f3262411d266a03252435336","modified":1472806635264},{"_id":"source/images/miss-feeling/4.gif","hash":"3908c537dfc0aec956b75378a8c7a762733b8b74","modified":1474333327709},{"_id":"source/images/cat-images/hd.jpg","hash":"f0b17abe43e44fbd242c72f969de4651db71339d","modified":1472806634983},{"_id":"source/images/miss-feeling/6.gif","hash":"7788ffc2913f6223aa8cc4551a3a08f32d351c8c","modified":1474333352422},{"_id":"source/images/miss-feeling/7.gif","hash":"9a0df61fe4d191669397be7829055e53ffce55c2","modified":1474333362224},{"_id":"source/images/miss-feeling/2.gif","hash":"5b32ae0e4286553641a0e663ecac60b4d9f4eab8","modified":1474333304018}],"Category":[],"Data":[],"Page":[{"layout":"tags","title":"tags","_content":"","source":"tags/index.md","raw":"layout: tags\ntitle: tags \n---","date":"2017-01-16T09:33:19.628Z","updated":"2017-01-16T09:33:19.628Z","path":"tags/index.html","comments":1,"_id":"ciy1bp1fo0001i0be5lozzc6e","content":"","excerpt":"","more":""},{"layout":"post","title":"简历","_content":"\n# 个人简历\n积极向上，天道酬勤，我只想励志做一个不装逼的前端大神\n\n### 基础资料\n|| | | |\n|  :-:  |:-:|:-:|:-:|\n|  姓名  | 年龄 | 性别 |  籍贯   |\n|  何雪梅  |   27   |女 | 广西 |\n|毕业学校|联系电话|专业|邮箱|\n|桂林电子科技大学|15677452642|统计学|236096957@qq.com|\n|求职意向|求职状态|工作经验|待遇|\n|Web前端开发工程师|在职-考虑机会|3年|面议|\n\n### 工作经验\n\n* 2015.11--至今 深圳联友科技有限公司\n\n|职业| 参与项目名称  | 项目详情 | \n|:-:|:-:|:-:|\n|Web前端开发工程师|1.事件申报</br>2.雷诺微信</br>3.易&nbsp;&nbsp;租&nbsp;&nbsp;车</br>4.风神物流| 负责微信公众号的前端页面设计及开发、JS、CSS代码优化压缩,H5、CSS3动画效果实现,用户体验优化，用到的框架有WeUI|\n||5.雷诺微信|雷诺微信后台管理系统，利用前端热门框架Bootstrap开发前端页面，用户体验优化|\n||6.车主APP|原用Framework7前端UI框架开发前端页面，生成混合APP，后改用React-Native开发，生成原生APP|\n\n</br>\n\n* 2014.4--2015.11 鹏博医疗集团有限公司\n\n|职业| 职责 | 职责详情|\n|:-:|:-:|:-:|:-:|\n|网页设计员|官网设计及制作|网页制作或相关网络广告设计；熟练运用DIV+CSS进行网页布局，Jquery，Js等前端开发技术制作网页特效；熟悉Photoshop，Dreamweaver，Fireworks等设计软件|\n\n</br>\n\n* 2013.4--2014.3 深圳百丽有限公司\n\n|职业| 职责 | \n|:-:|:-:|\n|数据分析员|资讯部物流信息组的数据分析，通过在分销系统上取数，整理数据，作出报表，以及进行简单的数据分析|\n\n### 个人优势\n\n#### 个人工作技能展示\n\n*   1.掌握HTML+CSS+Js等基本语言\n*   2.熟悉React.js，Vue.js等主流的前端框架\n*   3.了解ES6，Node.js，Webpack前端模块构建工具等\n*   4.熟悉HTML5+CSS3+实现语义化布局，CSS模块化\n*   5.熟悉响应式布局与自适应布局，了解less&scss，了解CSS3动画\n*   6.掌握主流的前端框架、性能优化技术，熟悉前端工程化\n*   7.掌握各式各样的开发工具，包括webstorm、sublime Text3、atom、Dreamweaver、Photoshop、Fireworks、Axure RP等\n*   8.拥有自己的[github](https://github.com/foxSnower)、[个人博客](https://foxsnower.github.io/)以及[淘宝店铺](https://shop114109558.taobao.com/)(欢迎点击阅览)\n\n#### 个人业余技能展示\n\n*   拥有乒乓球技术技能，在校时是院队的女子乒乓球球队队长，曾分别获得女子乒乓球团体第四、第二及第一；在联友担任乒协宣传委员兼会员教练，曾获得东风南方女子乒乓球赛冠军、东风日产团体赛冠军及2016年度优秀教练员称号，么么哒(づ￣ 3￣)づ\n\n","source":"personinfo/index.md","raw":"---\nlayout: post\ntitle: 简历 \n---\n\n# 个人简历\n积极向上，天道酬勤，我只想励志做一个不装逼的前端大神\n\n### 基础资料\n|| | | |\n|  :-:  |:-:|:-:|:-:|\n|  姓名  | 年龄 | 性别 |  籍贯   |\n|  何雪梅  |   27   |女 | 广西 |\n|毕业学校|联系电话|专业|邮箱|\n|桂林电子科技大学|15677452642|统计学|236096957@qq.com|\n|求职意向|求职状态|工作经验|待遇|\n|Web前端开发工程师|在职-考虑机会|3年|面议|\n\n### 工作经验\n\n* 2015.11--至今 深圳联友科技有限公司\n\n|职业| 参与项目名称  | 项目详情 | \n|:-:|:-:|:-:|\n|Web前端开发工程师|1.事件申报</br>2.雷诺微信</br>3.易&nbsp;&nbsp;租&nbsp;&nbsp;车</br>4.风神物流| 负责微信公众号的前端页面设计及开发、JS、CSS代码优化压缩,H5、CSS3动画效果实现,用户体验优化，用到的框架有WeUI|\n||5.雷诺微信|雷诺微信后台管理系统，利用前端热门框架Bootstrap开发前端页面，用户体验优化|\n||6.车主APP|原用Framework7前端UI框架开发前端页面，生成混合APP，后改用React-Native开发，生成原生APP|\n\n</br>\n\n* 2014.4--2015.11 鹏博医疗集团有限公司\n\n|职业| 职责 | 职责详情|\n|:-:|:-:|:-:|:-:|\n|网页设计员|官网设计及制作|网页制作或相关网络广告设计；熟练运用DIV+CSS进行网页布局，Jquery，Js等前端开发技术制作网页特效；熟悉Photoshop，Dreamweaver，Fireworks等设计软件|\n\n</br>\n\n* 2013.4--2014.3 深圳百丽有限公司\n\n|职业| 职责 | \n|:-:|:-:|\n|数据分析员|资讯部物流信息组的数据分析，通过在分销系统上取数，整理数据，作出报表，以及进行简单的数据分析|\n\n### 个人优势\n\n#### 个人工作技能展示\n\n*   1.掌握HTML+CSS+Js等基本语言\n*   2.熟悉React.js，Vue.js等主流的前端框架\n*   3.了解ES6，Node.js，Webpack前端模块构建工具等\n*   4.熟悉HTML5+CSS3+实现语义化布局，CSS模块化\n*   5.熟悉响应式布局与自适应布局，了解less&scss，了解CSS3动画\n*   6.掌握主流的前端框架、性能优化技术，熟悉前端工程化\n*   7.掌握各式各样的开发工具，包括webstorm、sublime Text3、atom、Dreamweaver、Photoshop、Fireworks、Axure RP等\n*   8.拥有自己的[github](https://github.com/foxSnower)、[个人博客](https://foxsnower.github.io/)以及[淘宝店铺](https://shop114109558.taobao.com/)(欢迎点击阅览)\n\n#### 个人业余技能展示\n\n*   拥有乒乓球技术技能，在校时是院队的女子乒乓球球队队长，曾分别获得女子乒乓球团体第四、第二及第一；在联友担任乒协宣传委员兼会员教练，曾获得东风南方女子乒乓球赛冠军、东风日产团体赛冠军及2016年度优秀教练员称号，么么哒(づ￣ 3￣)づ\n\n","date":"2017-01-17T06:54:03.365Z","updated":"2017-01-17T06:54:03.365Z","path":"personinfo/index.html","comments":1,"_id":"ciy1bp1fo0003i0beqeu3t0pt","content":"<h1 id=\"个人简历\"><a href=\"#个人简历\" class=\"headerlink\" title=\"个人简历\"></a>个人简历</h1><p>积极向上，天道酬勤，我只想励志做一个不装逼的前端大神</p>\n<h3 id=\"基础资料\"><a href=\"#基础资料\" class=\"headerlink\" title=\"基础资料\"></a>基础资料</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">姓名</td>\n<td style=\"text-align:center\">年龄</td>\n<td style=\"text-align:center\">性别</td>\n<td style=\"text-align:center\">籍贯</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">何雪梅</td>\n<td style=\"text-align:center\">27</td>\n<td style=\"text-align:center\">女</td>\n<td style=\"text-align:center\">广西</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">毕业学校</td>\n<td style=\"text-align:center\">联系电话</td>\n<td style=\"text-align:center\">专业</td>\n<td style=\"text-align:center\">邮箱</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">桂林电子科技大学</td>\n<td style=\"text-align:center\">15677452642</td>\n<td style=\"text-align:center\">统计学</td>\n<td style=\"text-align:center\">236096957@qq.com</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">求职意向</td>\n<td style=\"text-align:center\">求职状态</td>\n<td style=\"text-align:center\">工作经验</td>\n<td style=\"text-align:center\">待遇</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Web前端开发工程师</td>\n<td style=\"text-align:center\">在职-考虑机会</td>\n<td style=\"text-align:center\">3年</td>\n<td style=\"text-align:center\">面议</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"工作经验\"><a href=\"#工作经验\" class=\"headerlink\" title=\"工作经验\"></a>工作经验</h3><ul>\n<li>2015.11–至今 深圳联友科技有限公司</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">职业</th>\n<th style=\"text-align:center\">参与项目名称</th>\n<th style=\"text-align:center\">项目详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Web前端开发工程师</td>\n<td style=\"text-align:center\">1.事件申报<br>2.雷诺微信<br>3.易&nbsp;&nbsp;租&nbsp;&nbsp;车<br>4.风神物流</td>\n<td style=\"text-align:center\">负责微信公众号的前端页面设计及开发、JS、CSS代码优化压缩,H5、CSS3动画效果实现,用户体验优化，用到的框架有WeUI</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">5.雷诺微信</td>\n<td style=\"text-align:center\">雷诺微信后台管理系统，利用前端热门框架Bootstrap开发前端页面，用户体验优化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">6.车主APP</td>\n<td style=\"text-align:center\">原用Framework7前端UI框架开发前端页面，生成混合APP，后改用React-Native开发，生成原生APP</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<ul>\n<li>2014.4–2015.11 鹏博医疗集团有限公司</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">职业</th>\n<th style=\"text-align:center\">职责</th>\n<th style=\"text-align:center\">职责详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">网页设计员</td>\n<td style=\"text-align:center\">官网设计及制作</td>\n<td style=\"text-align:center\">网页制作或相关网络广告设计；熟练运用DIV+CSS进行网页布局，Jquery，Js等前端开发技术制作网页特效；熟悉Photoshop，Dreamweaver，Fireworks等设计软件</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<ul>\n<li>2013.4–2014.3 深圳百丽有限公司</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">职业</th>\n<th style=\"text-align:center\">职责</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">数据分析员</td>\n<td style=\"text-align:center\">资讯部物流信息组的数据分析，通过在分销系统上取数，整理数据，作出报表，以及进行简单的数据分析</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"个人优势\"><a href=\"#个人优势\" class=\"headerlink\" title=\"个人优势\"></a>个人优势</h3><h4 id=\"个人工作技能展示\"><a href=\"#个人工作技能展示\" class=\"headerlink\" title=\"个人工作技能展示\"></a>个人工作技能展示</h4><ul>\n<li>1.掌握HTML+CSS+Js等基本语言</li>\n<li>2.熟悉React.js，Vue.js等主流的前端框架</li>\n<li>3.了解ES6，Node.js，Webpack前端模块构建工具等</li>\n<li>4.熟悉HTML5+CSS3+实现语义化布局，CSS模块化</li>\n<li>5.熟悉响应式布局与自适应布局，了解less&amp;scss，了解CSS3动画</li>\n<li>6.掌握主流的前端框架、性能优化技术，熟悉前端工程化</li>\n<li>7.掌握各式各样的开发工具，包括webstorm、sublime Text3、atom、Dreamweaver、Photoshop、Fireworks、Axure RP等</li>\n<li>8.拥有自己的<a href=\"https://github.com/foxSnower\" target=\"_blank\" rel=\"external\">github</a>、<a href=\"https://foxsnower.github.io/\" target=\"_blank\" rel=\"external\">个人博客</a>以及<a href=\"https://shop114109558.taobao.com/\" target=\"_blank\" rel=\"external\">淘宝店铺</a>(欢迎点击阅览)</li>\n</ul>\n<h4 id=\"个人业余技能展示\"><a href=\"#个人业余技能展示\" class=\"headerlink\" title=\"个人业余技能展示\"></a>个人业余技能展示</h4><ul>\n<li>拥有乒乓球技术技能，在校时是院队的女子乒乓球球队队长，曾分别获得女子乒乓球团体第四、第二及第一；在联友担任乒协宣传委员兼会员教练，曾获得东风南方女子乒乓球赛冠军、东风日产团体赛冠军及2016年度优秀教练员称号，么么哒(づ￣ 3￣)づ</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"个人简历\"><a href=\"#个人简历\" class=\"headerlink\" title=\"个人简历\"></a>个人简历</h1><p>积极向上，天道酬勤，我只想励志做一个不装逼的前端大神</p>\n<h3 id=\"基础资料\"><a href=\"#基础资料\" class=\"headerlink\" title=\"基础资料\"></a>基础资料</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">姓名</td>\n<td style=\"text-align:center\">年龄</td>\n<td style=\"text-align:center\">性别</td>\n<td style=\"text-align:center\">籍贯</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">何雪梅</td>\n<td style=\"text-align:center\">27</td>\n<td style=\"text-align:center\">女</td>\n<td style=\"text-align:center\">广西</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">毕业学校</td>\n<td style=\"text-align:center\">联系电话</td>\n<td style=\"text-align:center\">专业</td>\n<td style=\"text-align:center\">邮箱</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">桂林电子科技大学</td>\n<td style=\"text-align:center\">15677452642</td>\n<td style=\"text-align:center\">统计学</td>\n<td style=\"text-align:center\">236096957@qq.com</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">求职意向</td>\n<td style=\"text-align:center\">求职状态</td>\n<td style=\"text-align:center\">工作经验</td>\n<td style=\"text-align:center\">待遇</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Web前端开发工程师</td>\n<td style=\"text-align:center\">在职-考虑机会</td>\n<td style=\"text-align:center\">3年</td>\n<td style=\"text-align:center\">面议</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"工作经验\"><a href=\"#工作经验\" class=\"headerlink\" title=\"工作经验\"></a>工作经验</h3><ul>\n<li>2015.11–至今 深圳联友科技有限公司</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">职业</th>\n<th style=\"text-align:center\">参与项目名称</th>\n<th style=\"text-align:center\">项目详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Web前端开发工程师</td>\n<td style=\"text-align:center\">1.事件申报</br>2.雷诺微信</br>3.易&nbsp;&nbsp;租&nbsp;&nbsp;车</br>4.风神物流</td>\n<td style=\"text-align:center\">负责微信公众号的前端页面设计及开发、JS、CSS代码优化压缩,H5、CSS3动画效果实现,用户体验优化，用到的框架有WeUI</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">5.雷诺微信</td>\n<td style=\"text-align:center\">雷诺微信后台管理系统，利用前端热门框架Bootstrap开发前端页面，用户体验优化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">6.车主APP</td>\n<td style=\"text-align:center\">原用Framework7前端UI框架开发前端页面，生成混合APP，后改用React-Native开发，生成原生APP</td>\n</tr>\n</tbody>\n</table>\n<p></br></p>\n<ul>\n<li>2014.4–2015.11 鹏博医疗集团有限公司</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">职业</th>\n<th style=\"text-align:center\">职责</th>\n<th style=\"text-align:center\">职责详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">网页设计员</td>\n<td style=\"text-align:center\">官网设计及制作</td>\n<td style=\"text-align:center\">网页制作或相关网络广告设计；熟练运用DIV+CSS进行网页布局，Jquery，Js等前端开发技术制作网页特效；熟悉Photoshop，Dreamweaver，Fireworks等设计软件</td>\n</tr>\n</tbody>\n</table>\n<p></br></p>\n<ul>\n<li>2013.4–2014.3 深圳百丽有限公司</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">职业</th>\n<th style=\"text-align:center\">职责</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">数据分析员</td>\n<td style=\"text-align:center\">资讯部物流信息组的数据分析，通过在分销系统上取数，整理数据，作出报表，以及进行简单的数据分析</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"个人优势\"><a href=\"#个人优势\" class=\"headerlink\" title=\"个人优势\"></a>个人优势</h3><h4 id=\"个人工作技能展示\"><a href=\"#个人工作技能展示\" class=\"headerlink\" title=\"个人工作技能展示\"></a>个人工作技能展示</h4><ul>\n<li>1.掌握HTML+CSS+Js等基本语言</li>\n<li>2.熟悉React.js，Vue.js等主流的前端框架</li>\n<li>3.了解ES6，Node.js，Webpack前端模块构建工具等</li>\n<li>4.熟悉HTML5+CSS3+实现语义化布局，CSS模块化</li>\n<li>5.熟悉响应式布局与自适应布局，了解less&amp;scss，了解CSS3动画</li>\n<li>6.掌握主流的前端框架、性能优化技术，熟悉前端工程化</li>\n<li>7.掌握各式各样的开发工具，包括webstorm、sublime Text3、atom、Dreamweaver、Photoshop、Fireworks、Axure RP等</li>\n<li>8.拥有自己的<a href=\"https://github.com/foxSnower\">github</a>、<a href=\"https://foxsnower.github.io/\">个人博客</a>以及<a href=\"https://shop114109558.taobao.com/\">淘宝店铺</a>(欢迎点击阅览)</li>\n</ul>\n<h4 id=\"个人业余技能展示\"><a href=\"#个人业余技能展示\" class=\"headerlink\" title=\"个人业余技能展示\"></a>个人业余技能展示</h4><ul>\n<li>拥有乒乓球技术技能，在校时是院队的女子乒乓球球队队长，曾分别获得女子乒乓球团体第四、第二及第一；在联友担任乒协宣传委员兼会员教练，曾获得东风南方女子乒乓球赛冠军、东风日产团体赛冠军及2016年度优秀教练员称号，么么哒(づ￣ 3￣)づ</li>\n</ul>\n"}],"Post":[{"title":"CSS常用背景图片定位方法","_content":"\nCSS背景图片定位其实对于每一位学习前端的同学来说，都已经非常熟悉了。网上铺天盖地的最常见的一种方案就是在父元素中relative，然后子元素absolute。这种方案当然好，不过带来的一个缺点就是会改变元素的层级关系，如果在多个地方使用，这样的层叠嵌套的关系会十分混乱。\n\n先暂时抛弃那种方案，给大家分享几种CSS背景图片定位的方案。\n\n整篇文章会按照如下思路：\n * 1.无依赖的absolute定位\n * 2.background-position扩展语法\n * 3.background-origin定位\n * 4.calc()定位\n<!--more-->\n## 无依赖的absolute定位\n\n在网络上，对absolute存在这样一个误解，认为绝对定位absolute的使用必须要设置父元素相对定位relative。这样的理解不能认为是错的，只能说对定义没有完全认识。在W3C文档中是这样定义absolute的：\n　　生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位。元素的位置通过'left' , 'right' , 'bottom' , 'top' 属性进行规定。\n　　对这句话的理解应该如下(L : left，R：right，B：bottom，T：top)\n\n * a：当给一个元素设置position:absolute之后，如果父元素没有设置position:relative，则该元素是通过LRBT依据可视窗口区域的左上角进行定位;如果父元素设置了position:relative，则该元素是通过LRBT依据父元素容器的左上角进行定位。\n * b：在生成绝对定位的元素时，不管父元素是否设置了position:relative，使用margin-top , margin-left , margin-right , margin-bottom其中的两个非相反方向进行定位，其效果会像相对定位relative一样，根据自身位置进行定位。但是使用margin定位与relative唯一的区别就是，absolute脱离文档流，原来的物理空间已经消失，而relative没有脱离文档流，原来的物理空间依然占据。\n　　所以，可以使用无依赖relative的absolute进行定位，定位方法是使用margin，而不能使用LRBT。\n　　代码如下：\n        .keith {\n          margin: 2em;\n          width: 5em;\n          height: 5em;\n          background: lightgreen;\n        }\n\n        .keith .main {\n          position: absolute;\n          background: url(\"../images/my-icons/Loginicon.png\") scroll no-repeat 0 0;\n          width: 21px;\n          height: 21px;\n          margin-left: calc(5em - 25px);\n          margin-top: calc(5em - 25px);\n        }\n\n\n上面代码中，使用margin-left , margin-top 与 position:absolute来对图片进行定位。使用了CSS3中的calc()来计算需要定位的值。\n\n示例图片如下：\n\n ![无依赖的absolute定位](../../../../images/css-background-setting/1.png)\n\n## background-position扩展语法\n\n在CSS3背景与边框中，background-position属性已经得到扩展，它允许我们指定背景图片距离任意角的偏移量，只要我们在偏移量前面指定关键字即可。\n代码如下：\n\n        .keith{\n            margin:2em;\n            width:5em;\n            height:5em;\n            background:lightgreen url('../images/my-icons/Loginicon.png') scroll no-repeat ;\n            background-position:right 5px bottom 5px;\n        };\n上面代码中，使用background-position扩展语法即可实现距离右下角5px距离的定位。\n\n## background-origin定位\n\nbackground-origin是CSS3中新增的属性，主要用来决定background-position属性的参考原点，即决定背景图片定位的起点。在默认情况下，背景图片的background-position属性总是以元素左上角为坐标原定对背景图片进行背景定位。\n　　background-origin有三个属性值content-box , padding-box(默认值) , border-box 。\n　　看看如何使用这个属性来对背景图片进行右下角5px的定位，代码如下。\n\n        .keith {\n          margin: 2em;\n          width: 5em;\n          height: 5em;\n          padding: .5em;\n          background: lightgreen url(\"../images/my-icons/Loginicon.png\") scroll no-repeat;\n          background-position: right bottom;\n          -moz-background-origin: content;\n          -o-background-origin: content-box;\n          -webkit-background-origin: content;\n          background-origin: content-box;\n          -moz-box-sizing: border-box;\n          -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n        }\n\n上面代码中，给盒子设置了padding值。使用box-sizing属性来调整div在浏览器下的盒模型为IE盒模型，border-box的意思是总宽度=content area + padding + border 。这里给background-origin属性设置了content-box，可能大家会不太理解，为什么不是padding-box。看一个。\n\n![火狐下的截图](../../../../images/css-background-setting/2.png)\n\n上面图片中，黄色区域的是margin，紫色区域的是padding，浅蓝色区域的是content-area。如果给元素设置了padding-box，那么此时图片会定位在右下角，与右下角没有任何空间。所以此时要使用content-box进行定位。最终的效果如下。\n\n![background-origin定位](../../../../images/css-background-setting/1.png)\n\n## calc()定位\n\n如果我们希望通过内容来撑开容器的宽度和高度时，而不去固定高度和宽度时，这时需要使用calc属性+background-position属性结合使用，来对图片进行定位。因为这时候并不知道容器的高度和宽度，只能有100%来进行计算。\n　　\n这是一段文字，用于撑开容器。\n\n        <div class=\"keith\">\n                这是一段文字，用于撑开容器。<br>\n        </div>\n\n        .keith{\n            margin:2em;\n            padding:2em;\n            display:inline-block;\n            background:lightgreen url('../images/my-icons/Loginicon.png') scroll no-repeat;\n            background-position:calc(100% - 5px) calc(100% - 5px);\n        }\n\n示例图片如下：\n\n![calc()定位](../../../../images/css-background-setting/3.png)\n\n完。感谢大家的阅读。\n\n原文链接：[http://www.cnblogs.com/Uncle-Keith/p/5937180.html?utm_source=tuicool&utm_medium=referral](http://www.cnblogs.com/Uncle-Keith/p/5937180.html?utm_source=tuicool&utm_medium=referral)\n","source":"_posts/CSS常用背景图片定位方法.md","raw":"\n---\ntitle: CSS常用背景图片定位方法\n---\n\nCSS背景图片定位其实对于每一位学习前端的同学来说，都已经非常熟悉了。网上铺天盖地的最常见的一种方案就是在父元素中relative，然后子元素absolute。这种方案当然好，不过带来的一个缺点就是会改变元素的层级关系，如果在多个地方使用，这样的层叠嵌套的关系会十分混乱。\n\n先暂时抛弃那种方案，给大家分享几种CSS背景图片定位的方案。\n\n整篇文章会按照如下思路：\n * 1.无依赖的absolute定位\n * 2.background-position扩展语法\n * 3.background-origin定位\n * 4.calc()定位\n<!--more-->\n## 无依赖的absolute定位\n\n在网络上，对absolute存在这样一个误解，认为绝对定位absolute的使用必须要设置父元素相对定位relative。这样的理解不能认为是错的，只能说对定义没有完全认识。在W3C文档中是这样定义absolute的：\n　　生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位。元素的位置通过'left' , 'right' , 'bottom' , 'top' 属性进行规定。\n　　对这句话的理解应该如下(L : left，R：right，B：bottom，T：top)\n\n * a：当给一个元素设置position:absolute之后，如果父元素没有设置position:relative，则该元素是通过LRBT依据可视窗口区域的左上角进行定位;如果父元素设置了position:relative，则该元素是通过LRBT依据父元素容器的左上角进行定位。\n * b：在生成绝对定位的元素时，不管父元素是否设置了position:relative，使用margin-top , margin-left , margin-right , margin-bottom其中的两个非相反方向进行定位，其效果会像相对定位relative一样，根据自身位置进行定位。但是使用margin定位与relative唯一的区别就是，absolute脱离文档流，原来的物理空间已经消失，而relative没有脱离文档流，原来的物理空间依然占据。\n　　所以，可以使用无依赖relative的absolute进行定位，定位方法是使用margin，而不能使用LRBT。\n　　代码如下：\n        .keith {\n          margin: 2em;\n          width: 5em;\n          height: 5em;\n          background: lightgreen;\n        }\n\n        .keith .main {\n          position: absolute;\n          background: url(\"../images/my-icons/Loginicon.png\") scroll no-repeat 0 0;\n          width: 21px;\n          height: 21px;\n          margin-left: calc(5em - 25px);\n          margin-top: calc(5em - 25px);\n        }\n\n\n上面代码中，使用margin-left , margin-top 与 position:absolute来对图片进行定位。使用了CSS3中的calc()来计算需要定位的值。\n\n示例图片如下：\n\n ![无依赖的absolute定位](../../../../images/css-background-setting/1.png)\n\n## background-position扩展语法\n\n在CSS3背景与边框中，background-position属性已经得到扩展，它允许我们指定背景图片距离任意角的偏移量，只要我们在偏移量前面指定关键字即可。\n代码如下：\n\n        .keith{\n            margin:2em;\n            width:5em;\n            height:5em;\n            background:lightgreen url('../images/my-icons/Loginicon.png') scroll no-repeat ;\n            background-position:right 5px bottom 5px;\n        };\n上面代码中，使用background-position扩展语法即可实现距离右下角5px距离的定位。\n\n## background-origin定位\n\nbackground-origin是CSS3中新增的属性，主要用来决定background-position属性的参考原点，即决定背景图片定位的起点。在默认情况下，背景图片的background-position属性总是以元素左上角为坐标原定对背景图片进行背景定位。\n　　background-origin有三个属性值content-box , padding-box(默认值) , border-box 。\n　　看看如何使用这个属性来对背景图片进行右下角5px的定位，代码如下。\n\n        .keith {\n          margin: 2em;\n          width: 5em;\n          height: 5em;\n          padding: .5em;\n          background: lightgreen url(\"../images/my-icons/Loginicon.png\") scroll no-repeat;\n          background-position: right bottom;\n          -moz-background-origin: content;\n          -o-background-origin: content-box;\n          -webkit-background-origin: content;\n          background-origin: content-box;\n          -moz-box-sizing: border-box;\n          -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n        }\n\n上面代码中，给盒子设置了padding值。使用box-sizing属性来调整div在浏览器下的盒模型为IE盒模型，border-box的意思是总宽度=content area + padding + border 。这里给background-origin属性设置了content-box，可能大家会不太理解，为什么不是padding-box。看一个。\n\n![火狐下的截图](../../../../images/css-background-setting/2.png)\n\n上面图片中，黄色区域的是margin，紫色区域的是padding，浅蓝色区域的是content-area。如果给元素设置了padding-box，那么此时图片会定位在右下角，与右下角没有任何空间。所以此时要使用content-box进行定位。最终的效果如下。\n\n![background-origin定位](../../../../images/css-background-setting/1.png)\n\n## calc()定位\n\n如果我们希望通过内容来撑开容器的宽度和高度时，而不去固定高度和宽度时，这时需要使用calc属性+background-position属性结合使用，来对图片进行定位。因为这时候并不知道容器的高度和宽度，只能有100%来进行计算。\n　　\n这是一段文字，用于撑开容器。\n\n        <div class=\"keith\">\n                这是一段文字，用于撑开容器。<br>\n        </div>\n\n        .keith{\n            margin:2em;\n            padding:2em;\n            display:inline-block;\n            background:lightgreen url('../images/my-icons/Loginicon.png') scroll no-repeat;\n            background-position:calc(100% - 5px) calc(100% - 5px);\n        }\n\n示例图片如下：\n\n![calc()定位](../../../../images/css-background-setting/3.png)\n\n完。感谢大家的阅读。\n\n原文链接：[http://www.cnblogs.com/Uncle-Keith/p/5937180.html?utm_source=tuicool&utm_medium=referral](http://www.cnblogs.com/Uncle-Keith/p/5937180.html?utm_source=tuicool&utm_medium=referral)\n","slug":"CSS常用背景图片定位方法","published":1,"date":"2017-01-12T01:09:01.375Z","updated":"2017-01-16T02:14:37.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bp1fo0000i0begcwul6zu","content":"<p>CSS背景图片定位其实对于每一位学习前端的同学来说，都已经非常熟悉了。网上铺天盖地的最常见的一种方案就是在父元素中relative，然后子元素absolute。这种方案当然好，不过带来的一个缺点就是会改变元素的层级关系，如果在多个地方使用，这样的层叠嵌套的关系会十分混乱。</p>\n<p>先暂时抛弃那种方案，给大家分享几种CSS背景图片定位的方案。</p>\n<p>整篇文章会按照如下思路：</p>\n<ul>\n<li>1.无依赖的absolute定位</li>\n<li>2.background-position扩展语法</li>\n<li>3.background-origin定位</li>\n<li>4.calc()定位<a id=\"more\"></a>\n<h2 id=\"无依赖的absolute定位\"><a href=\"#无依赖的absolute定位\" class=\"headerlink\" title=\"无依赖的absolute定位\"></a>无依赖的absolute定位</h2></li>\n</ul>\n<p>在网络上，对absolute存在这样一个误解，认为绝对定位absolute的使用必须要设置父元素相对定位relative。这样的理解不能认为是错的，只能说对定义没有完全认识。在W3C文档中是这样定义absolute的：<br>　　生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位。元素的位置通过’left’ , ‘right’ , ‘bottom’ , ‘top’ 属性进行规定。<br>　　对这句话的理解应该如下(L : left，R：right，B：bottom，T：top)</p>\n<ul>\n<li>a：当给一个元素设置position:absolute之后，如果父元素没有设置position:relative，则该元素是通过LRBT依据可视窗口区域的左上角进行定位;如果父元素设置了position:relative，则该元素是通过LRBT依据父元素容器的左上角进行定位。</li>\n<li><p>b：在生成绝对定位的元素时，不管父元素是否设置了position:relative，使用margin-top , margin-left , margin-right , margin-bottom其中的两个非相反方向进行定位，其效果会像相对定位relative一样，根据自身位置进行定位。但是使用margin定位与relative唯一的区别就是，absolute脱离文档流，原来的物理空间已经消失，而relative没有脱离文档流，原来的物理空间依然占据。<br>　　所以，可以使用无依赖relative的absolute进行定位，定位方法是使用margin，而不能使用LRBT。<br>　　代码如下：</p>\n<pre><code>.keith {\n  margin: 2em;\n  width: 5em;\n  height: 5em;\n  background: lightgreen;\n}\n\n.keith .main {\n  position: absolute;\n  background: url(&quot;../images/my-icons/Loginicon.png&quot;) scroll no-repeat 0 0;\n  width: 21px;\n  height: 21px;\n  margin-left: calc(5em - 25px);\n  margin-top: calc(5em - 25px);\n}\n</code></pre></li>\n</ul>\n<p>上面代码中，使用margin-left , margin-top 与 position:absolute来对图片进行定位。使用了CSS3中的calc()来计算需要定位的值。</p>\n<p>示例图片如下：</p>\n<p> <img src=\"../../../../images/css-background-setting/1.png\" alt=\"无依赖的absolute定位\"></p>\n<h2 id=\"background-position扩展语法\"><a href=\"#background-position扩展语法\" class=\"headerlink\" title=\"background-position扩展语法\"></a>background-position扩展语法</h2><p>在CSS3背景与边框中，background-position属性已经得到扩展，它允许我们指定背景图片距离任意角的偏移量，只要我们在偏移量前面指定关键字即可。<br>代码如下：</p>\n<pre><code>.keith{\n    margin:2em;\n    width:5em;\n    height:5em;\n    background:lightgreen url(&apos;../images/my-icons/Loginicon.png&apos;) scroll no-repeat ;\n    background-position:right 5px bottom 5px;\n};\n</code></pre><p>上面代码中，使用background-position扩展语法即可实现距离右下角5px距离的定位。</p>\n<h2 id=\"background-origin定位\"><a href=\"#background-origin定位\" class=\"headerlink\" title=\"background-origin定位\"></a>background-origin定位</h2><p>background-origin是CSS3中新增的属性，主要用来决定background-position属性的参考原点，即决定背景图片定位的起点。在默认情况下，背景图片的background-position属性总是以元素左上角为坐标原定对背景图片进行背景定位。<br>　　background-origin有三个属性值content-box , padding-box(默认值) , border-box 。<br>　　看看如何使用这个属性来对背景图片进行右下角5px的定位，代码如下。</p>\n<pre><code>.keith {\n  margin: 2em;\n  width: 5em;\n  height: 5em;\n  padding: .5em;\n  background: lightgreen url(&quot;../images/my-icons/Loginicon.png&quot;) scroll no-repeat;\n  background-position: right bottom;\n  -moz-background-origin: content;\n  -o-background-origin: content-box;\n  -webkit-background-origin: content;\n  background-origin: content-box;\n  -moz-box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n}\n</code></pre><p>上面代码中，给盒子设置了padding值。使用box-sizing属性来调整div在浏览器下的盒模型为IE盒模型，border-box的意思是总宽度=content area + padding + border 。这里给background-origin属性设置了content-box，可能大家会不太理解，为什么不是padding-box。看一个。</p>\n<p><img src=\"../../../../images/css-background-setting/2.png\" alt=\"火狐下的截图\"></p>\n<p>上面图片中，黄色区域的是margin，紫色区域的是padding，浅蓝色区域的是content-area。如果给元素设置了padding-box，那么此时图片会定位在右下角，与右下角没有任何空间。所以此时要使用content-box进行定位。最终的效果如下。</p>\n<p><img src=\"../../../../images/css-background-setting/1.png\" alt=\"background-origin定位\"></p>\n<h2 id=\"calc-定位\"><a href=\"#calc-定位\" class=\"headerlink\" title=\"calc()定位\"></a>calc()定位</h2><p>如果我们希望通过内容来撑开容器的宽度和高度时，而不去固定高度和宽度时，这时需要使用calc属性+background-position属性结合使用，来对图片进行定位。因为这时候并不知道容器的高度和宽度，只能有100%来进行计算。<br>　　<br>这是一段文字，用于撑开容器。</p>\n<pre><code>&lt;div class=&quot;keith&quot;&gt;\n        这是一段文字，用于撑开容器。&lt;br&gt;\n&lt;/div&gt;\n\n.keith{\n    margin:2em;\n    padding:2em;\n    display:inline-block;\n    background:lightgreen url(&apos;../images/my-icons/Loginicon.png&apos;) scroll no-repeat;\n    background-position:calc(100% - 5px) calc(100% - 5px);\n}\n</code></pre><p>示例图片如下：</p>\n<p><img src=\"../../../../images/css-background-setting/3.png\" alt=\"calc()定位\"></p>\n<p>完。感谢大家的阅读。</p>\n<p>原文链接：<a href=\"http://www.cnblogs.com/Uncle-Keith/p/5937180.html?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/Uncle-Keith/p/5937180.html?utm_source=tuicool&amp;utm_medium=referral</a></p>\n","excerpt":"<p>CSS背景图片定位其实对于每一位学习前端的同学来说，都已经非常熟悉了。网上铺天盖地的最常见的一种方案就是在父元素中relative，然后子元素absolute。这种方案当然好，不过带来的一个缺点就是会改变元素的层级关系，如果在多个地方使用，这样的层叠嵌套的关系会十分混乱。</p>\n<p>先暂时抛弃那种方案，给大家分享几种CSS背景图片定位的方案。</p>\n<p>整篇文章会按照如下思路：</p>\n<ul>\n<li>1.无依赖的absolute定位</li>\n<li>2.background-position扩展语法</li>\n<li>3.background-origin定位</li>\n<li>4.calc()定位","more":"<h2 id=\"无依赖的absolute定位\"><a href=\"#无依赖的absolute定位\" class=\"headerlink\" title=\"无依赖的absolute定位\"></a>无依赖的absolute定位</h2></li>\n</ul>\n<p>在网络上，对absolute存在这样一个误解，认为绝对定位absolute的使用必须要设置父元素相对定位relative。这样的理解不能认为是错的，只能说对定义没有完全认识。在W3C文档中是这样定义absolute的：<br>　　生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位。元素的位置通过’left’ , ‘right’ , ‘bottom’ , ‘top’ 属性进行规定。<br>　　对这句话的理解应该如下(L : left，R：right，B：bottom，T：top)</p>\n<ul>\n<li>a：当给一个元素设置position:absolute之后，如果父元素没有设置position:relative，则该元素是通过LRBT依据可视窗口区域的左上角进行定位;如果父元素设置了position:relative，则该元素是通过LRBT依据父元素容器的左上角进行定位。</li>\n<li><p>b：在生成绝对定位的元素时，不管父元素是否设置了position:relative，使用margin-top , margin-left , margin-right , margin-bottom其中的两个非相反方向进行定位，其效果会像相对定位relative一样，根据自身位置进行定位。但是使用margin定位与relative唯一的区别就是，absolute脱离文档流，原来的物理空间已经消失，而relative没有脱离文档流，原来的物理空间依然占据。<br>　　所以，可以使用无依赖relative的absolute进行定位，定位方法是使用margin，而不能使用LRBT。<br>　　代码如下：</p>\n<pre><code>.keith {\n  margin: 2em;\n  width: 5em;\n  height: 5em;\n  background: lightgreen;\n}\n\n.keith .main {\n  position: absolute;\n  background: url(&quot;../images/my-icons/Loginicon.png&quot;) scroll no-repeat 0 0;\n  width: 21px;\n  height: 21px;\n  margin-left: calc(5em - 25px);\n  margin-top: calc(5em - 25px);\n}\n</code></pre></li>\n</ul>\n<p>上面代码中，使用margin-left , margin-top 与 position:absolute来对图片进行定位。使用了CSS3中的calc()来计算需要定位的值。</p>\n<p>示例图片如下：</p>\n<p> <img src=\"../../../../images/css-background-setting/1.png\" alt=\"无依赖的absolute定位\"></p>\n<h2 id=\"background-position扩展语法\"><a href=\"#background-position扩展语法\" class=\"headerlink\" title=\"background-position扩展语法\"></a>background-position扩展语法</h2><p>在CSS3背景与边框中，background-position属性已经得到扩展，它允许我们指定背景图片距离任意角的偏移量，只要我们在偏移量前面指定关键字即可。<br>代码如下：</p>\n<pre><code>.keith{\n    margin:2em;\n    width:5em;\n    height:5em;\n    background:lightgreen url(&apos;../images/my-icons/Loginicon.png&apos;) scroll no-repeat ;\n    background-position:right 5px bottom 5px;\n};\n</code></pre><p>上面代码中，使用background-position扩展语法即可实现距离右下角5px距离的定位。</p>\n<h2 id=\"background-origin定位\"><a href=\"#background-origin定位\" class=\"headerlink\" title=\"background-origin定位\"></a>background-origin定位</h2><p>background-origin是CSS3中新增的属性，主要用来决定background-position属性的参考原点，即决定背景图片定位的起点。在默认情况下，背景图片的background-position属性总是以元素左上角为坐标原定对背景图片进行背景定位。<br>　　background-origin有三个属性值content-box , padding-box(默认值) , border-box 。<br>　　看看如何使用这个属性来对背景图片进行右下角5px的定位，代码如下。</p>\n<pre><code>.keith {\n  margin: 2em;\n  width: 5em;\n  height: 5em;\n  padding: .5em;\n  background: lightgreen url(&quot;../images/my-icons/Loginicon.png&quot;) scroll no-repeat;\n  background-position: right bottom;\n  -moz-background-origin: content;\n  -o-background-origin: content-box;\n  -webkit-background-origin: content;\n  background-origin: content-box;\n  -moz-box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n}\n</code></pre><p>上面代码中，给盒子设置了padding值。使用box-sizing属性来调整div在浏览器下的盒模型为IE盒模型，border-box的意思是总宽度=content area + padding + border 。这里给background-origin属性设置了content-box，可能大家会不太理解，为什么不是padding-box。看一个。</p>\n<p><img src=\"../../../../images/css-background-setting/2.png\" alt=\"火狐下的截图\"></p>\n<p>上面图片中，黄色区域的是margin，紫色区域的是padding，浅蓝色区域的是content-area。如果给元素设置了padding-box，那么此时图片会定位在右下角，与右下角没有任何空间。所以此时要使用content-box进行定位。最终的效果如下。</p>\n<p><img src=\"../../../../images/css-background-setting/1.png\" alt=\"background-origin定位\"></p>\n<h2 id=\"calc-定位\"><a href=\"#calc-定位\" class=\"headerlink\" title=\"calc()定位\"></a>calc()定位</h2><p>如果我们希望通过内容来撑开容器的宽度和高度时，而不去固定高度和宽度时，这时需要使用calc属性+background-position属性结合使用，来对图片进行定位。因为这时候并不知道容器的高度和宽度，只能有100%来进行计算。<br>　　<br>这是一段文字，用于撑开容器。</p>\n<pre><code>&lt;div class=&quot;keith&quot;&gt;\n        这是一段文字，用于撑开容器。&lt;br&gt;\n&lt;/div&gt;\n\n.keith{\n    margin:2em;\n    padding:2em;\n    display:inline-block;\n    background:lightgreen url(&apos;../images/my-icons/Loginicon.png&apos;) scroll no-repeat;\n    background-position:calc(100% - 5px) calc(100% - 5px);\n}\n</code></pre><p>示例图片如下：</p>\n<p><img src=\"../../../../images/css-background-setting/3.png\" alt=\"calc()定位\"></p>\n<p>完。感谢大家的阅读。</p>\n<p>原文链接：<a href=\"http://www.cnblogs.com/Uncle-Keith/p/5937180.html?utm_source=tuicool&amp;utm_medium=referral\">http://www.cnblogs.com/Uncle-Keith/p/5937180.html?utm_source=tuicool&amp;utm_medium=referral</a></p>"},{"title":"JS 控制CSS样式表的语法对照","_content":"福利：JavaScript获取demo节点\n\n    var ID=document.getElementById(\"myId\");\n    var name=document.getElementsByName(\"myName\");\n    var tagName=document.getElementsByTagName(\"tagName\");\n\n主题：下面就是JS 控制CSS样式表的语法对照： \nCSS语法 (不区分大小写)  JavaScript语法 (区分大小写) \nJavaScript改变CSS样式语法为：\n`Object.style.color=\"red\";`\n`Object.style.backgroundColor=\"red\";`\n<!--more -->\n\n    border  border \n    border-bottom   borderBottom \n    border-bottom-color borderBottomColor \n    border-bottom-style borderBottomStyle \n    border-bottom-width borderBottomWidth \n    border-color    borderColor \n    border-left borderLeft \n    border-left-color   borderLeftColor \n    border-left-style   borderLeftStyle \n    border-left-width   borderLeftWidth \n    border-right    borderRight \n    border-right-color  borderRightColor \n    border-right-style  borderRightStyle \n    border-right-width  borderRightWidth \n    border-style    borderStyle \n    border-top  borderTop \n    border-top-color    borderTopColor \n    border-top-style    borderTopStyle \n    border-top-width    borderTopWidth \n    border-width    borderWidth \n    clear   clear \n    float   floatStyle \n    margin  margin \n    margin-bottom   marginBottom \n    margin-left marginLeft \n    margin-right    marginRight \n    margin-top  marginTop \n    padding padding \n    padding-bottom  paddingBottom \n    padding-left    paddingLeft \n    padding-right   paddingRight \n    padding-top paddingTop\n    background  background \n    background-attachment   backgroundAttachment \n    background-color    backgroundColor \n    background-image    backgroundImage \n    background-position backgroundPosition \n    background-repeat   backgroundRepeat \n    color   color \n    display display \n    list-style-type listStyleType \n    list-style-image    listStyleImage \n    list-style-position listStylePosition \n    list-style  listStyle \n    white-space whiteSpace \n    font    font \n    font-family fontFamily \n    font-size   fontSize \n    font-style  fontStyle \n    font-variant    fontVariant \n    font-weight fontWeight \n    letter-spacing  letterSpacing \n    line-break  lineBreak \n    line-height lineHeight \n    text-align  textAlign \n    text-decoration textDecoration \n    text-indent textIndent \n    text-justify    textJustify \n    text-transform  textTransform \n    vertical-align  verticalAlign","source":"_posts/JS 控制CSS样式表的语法对照.md","raw":"---\ntitle: JS 控制CSS样式表的语法对照\n---\n福利：JavaScript获取demo节点\n\n    var ID=document.getElementById(\"myId\");\n    var name=document.getElementsByName(\"myName\");\n    var tagName=document.getElementsByTagName(\"tagName\");\n\n主题：下面就是JS 控制CSS样式表的语法对照： \nCSS语法 (不区分大小写)  JavaScript语法 (区分大小写) \nJavaScript改变CSS样式语法为：\n`Object.style.color=\"red\";`\n`Object.style.backgroundColor=\"red\";`\n<!--more -->\n\n    border  border \n    border-bottom   borderBottom \n    border-bottom-color borderBottomColor \n    border-bottom-style borderBottomStyle \n    border-bottom-width borderBottomWidth \n    border-color    borderColor \n    border-left borderLeft \n    border-left-color   borderLeftColor \n    border-left-style   borderLeftStyle \n    border-left-width   borderLeftWidth \n    border-right    borderRight \n    border-right-color  borderRightColor \n    border-right-style  borderRightStyle \n    border-right-width  borderRightWidth \n    border-style    borderStyle \n    border-top  borderTop \n    border-top-color    borderTopColor \n    border-top-style    borderTopStyle \n    border-top-width    borderTopWidth \n    border-width    borderWidth \n    clear   clear \n    float   floatStyle \n    margin  margin \n    margin-bottom   marginBottom \n    margin-left marginLeft \n    margin-right    marginRight \n    margin-top  marginTop \n    padding padding \n    padding-bottom  paddingBottom \n    padding-left    paddingLeft \n    padding-right   paddingRight \n    padding-top paddingTop\n    background  background \n    background-attachment   backgroundAttachment \n    background-color    backgroundColor \n    background-image    backgroundImage \n    background-position backgroundPosition \n    background-repeat   backgroundRepeat \n    color   color \n    display display \n    list-style-type listStyleType \n    list-style-image    listStyleImage \n    list-style-position listStylePosition \n    list-style  listStyle \n    white-space whiteSpace \n    font    font \n    font-family fontFamily \n    font-size   fontSize \n    font-style  fontStyle \n    font-variant    fontVariant \n    font-weight fontWeight \n    letter-spacing  letterSpacing \n    line-break  lineBreak \n    line-height lineHeight \n    text-align  textAlign \n    text-decoration textDecoration \n    text-indent textIndent \n    text-justify    textJustify \n    text-transform  textTransform \n    vertical-align  verticalAlign","slug":"JS 控制CSS样式表的语法对照","published":1,"date":"2016-08-25T09:13:40.149Z","updated":"2016-09-09T08:16:28.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bp1fo0002i0bem9zogln3","content":"<p>福利：JavaScript获取demo节点</p>\n<pre><code>var ID=document.getElementById(&quot;myId&quot;);\nvar name=document.getElementsByName(&quot;myName&quot;);\nvar tagName=document.getElementsByTagName(&quot;tagName&quot;);\n</code></pre><p>主题：下面就是JS 控制CSS样式表的语法对照：<br>CSS语法 (不区分大小写)  JavaScript语法 (区分大小写)<br>JavaScript改变CSS样式语法为：<br><code>Object.style.color=&quot;red&quot;;</code><br><code>Object.style.backgroundColor=&quot;red&quot;;</code><br><a id=\"more\"></a></p>\n<pre><code>border  border \nborder-bottom   borderBottom \nborder-bottom-color borderBottomColor \nborder-bottom-style borderBottomStyle \nborder-bottom-width borderBottomWidth \nborder-color    borderColor \nborder-left borderLeft \nborder-left-color   borderLeftColor \nborder-left-style   borderLeftStyle \nborder-left-width   borderLeftWidth \nborder-right    borderRight \nborder-right-color  borderRightColor \nborder-right-style  borderRightStyle \nborder-right-width  borderRightWidth \nborder-style    borderStyle \nborder-top  borderTop \nborder-top-color    borderTopColor \nborder-top-style    borderTopStyle \nborder-top-width    borderTopWidth \nborder-width    borderWidth \nclear   clear \nfloat   floatStyle \nmargin  margin \nmargin-bottom   marginBottom \nmargin-left marginLeft \nmargin-right    marginRight \nmargin-top  marginTop \npadding padding \npadding-bottom  paddingBottom \npadding-left    paddingLeft \npadding-right   paddingRight \npadding-top paddingTop\nbackground  background \nbackground-attachment   backgroundAttachment \nbackground-color    backgroundColor \nbackground-image    backgroundImage \nbackground-position backgroundPosition \nbackground-repeat   backgroundRepeat \ncolor   color \ndisplay display \nlist-style-type listStyleType \nlist-style-image    listStyleImage \nlist-style-position listStylePosition \nlist-style  listStyle \nwhite-space whiteSpace \nfont    font \nfont-family fontFamily \nfont-size   fontSize \nfont-style  fontStyle \nfont-variant    fontVariant \nfont-weight fontWeight \nletter-spacing  letterSpacing \nline-break  lineBreak \nline-height lineHeight \ntext-align  textAlign \ntext-decoration textDecoration \ntext-indent textIndent \ntext-justify    textJustify \ntext-transform  textTransform \nvertical-align  verticalAlign\n</code></pre>","excerpt":"<p>福利：JavaScript获取demo节点</p>\n<pre><code>var ID=document.getElementById(&quot;myId&quot;);\nvar name=document.getElementsByName(&quot;myName&quot;);\nvar tagName=document.getElementsByTagName(&quot;tagName&quot;);\n</code></pre><p>主题：下面就是JS 控制CSS样式表的语法对照：<br>CSS语法 (不区分大小写)  JavaScript语法 (区分大小写)<br>JavaScript改变CSS样式语法为：<br><code>Object.style.color=&quot;red&quot;;</code><br><code>Object.style.backgroundColor=&quot;red&quot;;</code><br>","more":"</p>\n<pre><code>border  border \nborder-bottom   borderBottom \nborder-bottom-color borderBottomColor \nborder-bottom-style borderBottomStyle \nborder-bottom-width borderBottomWidth \nborder-color    borderColor \nborder-left borderLeft \nborder-left-color   borderLeftColor \nborder-left-style   borderLeftStyle \nborder-left-width   borderLeftWidth \nborder-right    borderRight \nborder-right-color  borderRightColor \nborder-right-style  borderRightStyle \nborder-right-width  borderRightWidth \nborder-style    borderStyle \nborder-top  borderTop \nborder-top-color    borderTopColor \nborder-top-style    borderTopStyle \nborder-top-width    borderTopWidth \nborder-width    borderWidth \nclear   clear \nfloat   floatStyle \nmargin  margin \nmargin-bottom   marginBottom \nmargin-left marginLeft \nmargin-right    marginRight \nmargin-top  marginTop \npadding padding \npadding-bottom  paddingBottom \npadding-left    paddingLeft \npadding-right   paddingRight \npadding-top paddingTop\nbackground  background \nbackground-attachment   backgroundAttachment \nbackground-color    backgroundColor \nbackground-image    backgroundImage \nbackground-position backgroundPosition \nbackground-repeat   backgroundRepeat \ncolor   color \ndisplay display \nlist-style-type listStyleType \nlist-style-image    listStyleImage \nlist-style-position listStylePosition \nlist-style  listStyle \nwhite-space whiteSpace \nfont    font \nfont-family fontFamily \nfont-size   fontSize \nfont-style  fontStyle \nfont-variant    fontVariant \nfont-weight fontWeight \nletter-spacing  letterSpacing \nline-break  lineBreak \nline-height lineHeight \ntext-align  textAlign \ntext-decoration textDecoration \ntext-indent textIndent \ntext-justify    textJustify \ntext-transform  textTransform \nvertical-align  verticalAlign\n</code></pre>"},{"title":"Markdown 语法简略说明 (简体中文版)","keywords":"Markdown 语法 常用语法 Markdown写表格","_content":"\nMarkdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。\n\nMarkdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。\n\n# Markdown 语法\n## Markdown 常用语法\n### 先来一个标题\n    # 这是 <h1></h1>\n    ## 这是 <h2></h2>\n    ### 这是 <h3></h3>\n    #### 这是 <h4></h4>\n    ##### 这是 <h5></h5>\n    ###### 这是 <h6></h6>\n<!-- more -->\n### 引用\n> >引用里的引用\n> \n> 这段话就是一句引用的话\n\n    ------------代码域------------\n    >>引用里的引用   \n    > 这段话就是一句引用的话\n    ------------代码域------------\n\n### 列表\n*   Red\n*   Green\n*   Blue\n        ------------代码域------------\n            *   Red\n            *   Green\n            *   Blue\n        ------------代码域------------\n\n### 代码区块\n4个空格符即可\n\n    $(document).ready(function(){\n        alert(\"Hello World!\");\n    })\n\n### 分隔线\n***\n\n    ------------代码域------------\n    * * *\n    ***\n    *****\n    - - -\n    ---------------------------------------\n    ------------代码域------------\n\n### 区段元素——链接\nMarkdown 支持两种形式的链接语法： 行内式和参考式两种形式。\n以下只介绍行内式，更多详情请参考：[Markdown 语法简略说明 (简体中文版)](http://wowubuntu.com/markdown/#philosophy)\n\nThis is [an example](https://foxsnower.github.io/ 'this is title') inline link.\n[This link](https://foxsnower.github.io/ \"this is title\") has no title attribute.\n\n     This is [an example](https://foxsnower.github.io/ 'this is title') inline link.\n    [This link](https://foxsnower.github.io/ \"this is title\") has no title attribute.\n\n### 区段元素——强调\n*single asterisks*\n_single underscores_\n**double asterisks**\n__double underscores__\n\n    *single asterisks*\n    _single underscores_\n    **double asterisks**\n    __double underscores__\n\n### 区段元素——代码\n如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：\n\nUse the `printf()` function\n\n    Use the `printf()` function.\n\n``There is a literal backtick (`) here.``\n\n### 区段元素——图片\n\n    ![Alt text](/path/to/img.jpg)\n\n    ![Alt text](/path/to/img.jpg \"Optional title\")\n\n### 其它——自动链接\n<http://example.com/>\n\n    <http://example.com/>\n\n### 其它——反斜杠\n\\*literal asterisks\\*\n\n    \\*literal asterisks\\*\n    \\   反斜线\n    `   反引号\n    -   星号\n    _   底线\n    {}  花括号\n    []  方括号\n    ()  括弧\n    #   井字号\n    *   加号\n    +   减号\n    .   英文句点\n    !   惊叹号\n\n### 表格\n\n|表格|阿萨德|\n|:-:|:-:|\n|asd |asd |\n|asd |asd |\n|asd |asd |\n|asd |asd |\n|asd |asd |\n\n文章参考于：[Markdown 语法简略说明 (简体中文版)](http://wowubuntu.com/markdown/#philosophy)\n\n\n","source":"_posts/Markdown 语法简略说明 (简体中文版).md","raw":"---\ntitle: Markdown 语法简略说明 (简体中文版)\nkeywords: Markdown 语法 常用语法 Markdown写表格\n---\n\nMarkdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。\n\nMarkdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。\n\n# Markdown 语法\n## Markdown 常用语法\n### 先来一个标题\n    # 这是 <h1></h1>\n    ## 这是 <h2></h2>\n    ### 这是 <h3></h3>\n    #### 这是 <h4></h4>\n    ##### 这是 <h5></h5>\n    ###### 这是 <h6></h6>\n<!-- more -->\n### 引用\n> >引用里的引用\n> \n> 这段话就是一句引用的话\n\n    ------------代码域------------\n    >>引用里的引用   \n    > 这段话就是一句引用的话\n    ------------代码域------------\n\n### 列表\n*   Red\n*   Green\n*   Blue\n        ------------代码域------------\n            *   Red\n            *   Green\n            *   Blue\n        ------------代码域------------\n\n### 代码区块\n4个空格符即可\n\n    $(document).ready(function(){\n        alert(\"Hello World!\");\n    })\n\n### 分隔线\n***\n\n    ------------代码域------------\n    * * *\n    ***\n    *****\n    - - -\n    ---------------------------------------\n    ------------代码域------------\n\n### 区段元素——链接\nMarkdown 支持两种形式的链接语法： 行内式和参考式两种形式。\n以下只介绍行内式，更多详情请参考：[Markdown 语法简略说明 (简体中文版)](http://wowubuntu.com/markdown/#philosophy)\n\nThis is [an example](https://foxsnower.github.io/ 'this is title') inline link.\n[This link](https://foxsnower.github.io/ \"this is title\") has no title attribute.\n\n     This is [an example](https://foxsnower.github.io/ 'this is title') inline link.\n    [This link](https://foxsnower.github.io/ \"this is title\") has no title attribute.\n\n### 区段元素——强调\n*single asterisks*\n_single underscores_\n**double asterisks**\n__double underscores__\n\n    *single asterisks*\n    _single underscores_\n    **double asterisks**\n    __double underscores__\n\n### 区段元素——代码\n如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：\n\nUse the `printf()` function\n\n    Use the `printf()` function.\n\n``There is a literal backtick (`) here.``\n\n### 区段元素——图片\n\n    ![Alt text](/path/to/img.jpg)\n\n    ![Alt text](/path/to/img.jpg \"Optional title\")\n\n### 其它——自动链接\n<http://example.com/>\n\n    <http://example.com/>\n\n### 其它——反斜杠\n\\*literal asterisks\\*\n\n    \\*literal asterisks\\*\n    \\   反斜线\n    `   反引号\n    -   星号\n    _   底线\n    {}  花括号\n    []  方括号\n    ()  括弧\n    #   井字号\n    *   加号\n    +   减号\n    .   英文句点\n    !   惊叹号\n\n### 表格\n\n|表格|阿萨德|\n|:-:|:-:|\n|asd |asd |\n|asd |asd |\n|asd |asd |\n|asd |asd |\n|asd |asd |\n\n文章参考于：[Markdown 语法简略说明 (简体中文版)](http://wowubuntu.com/markdown/#philosophy)\n\n\n","slug":"Markdown 语法简略说明 (简体中文版)","published":1,"date":"2016-08-25T09:13:25.491Z","updated":"2017-01-17T01:43:39.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bp1fo0004i0beqlhq2rig","content":"<p>Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<em>强调</em>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>\n<p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>\n<h1 id=\"Markdown-语法\"><a href=\"#Markdown-语法\" class=\"headerlink\" title=\"Markdown 语法\"></a>Markdown 语法</h1><h2 id=\"Markdown-常用语法\"><a href=\"#Markdown-常用语法\" class=\"headerlink\" title=\"Markdown 常用语法\"></a>Markdown 常用语法</h2><h3 id=\"先来一个标题\"><a href=\"#先来一个标题\" class=\"headerlink\" title=\"先来一个标题\"></a>先来一个标题</h3><pre><code># 这是 &lt;h1&gt;&lt;/h1&gt;\n## 这是 &lt;h2&gt;&lt;/h2&gt;\n### 这是 &lt;h3&gt;&lt;/h3&gt;\n#### 这是 &lt;h4&gt;&lt;/h4&gt;\n##### 这是 &lt;h5&gt;&lt;/h5&gt;\n###### 这是 &lt;h6&gt;&lt;/h6&gt;\n</code></pre><a id=\"more\"></a>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><blockquote>\n<blockquote>\n<p>引用里的引用</p>\n</blockquote>\n<p>这段话就是一句引用的话</p>\n</blockquote>\n<pre><code>------------代码域------------\n&gt;&gt;引用里的引用   \n&gt; 这段话就是一句引用的话\n------------代码域------------\n</code></pre><h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue<pre><code>------------代码域------------\n    *   Red\n    *   Green\n    *   Blue\n------------代码域------------\n</code></pre></li>\n</ul>\n<h3 id=\"代码区块\"><a href=\"#代码区块\" class=\"headerlink\" title=\"代码区块\"></a>代码区块</h3><p>4个空格符即可</p>\n<pre><code>$(document).ready(function(){\n    alert(&quot;Hello World!&quot;);\n})\n</code></pre><h3 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h3><hr>\n<pre><code>------------代码域------------\n* * *\n***\n*****\n- - -\n---------------------------------------\n------------代码域------------\n</code></pre><h3 id=\"区段元素——链接\"><a href=\"#区段元素——链接\" class=\"headerlink\" title=\"区段元素——链接\"></a>区段元素——链接</h3><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。<br>以下只介绍行内式，更多详情请参考：<a href=\"http://wowubuntu.com/markdown/#philosophy\" target=\"_blank\" rel=\"external\">Markdown 语法简略说明 (简体中文版)</a></p>\n<p>This is <a href=\"https://foxsnower.github.io/\" title=\"this is title\" target=\"_blank\" rel=\"external\">an example</a> inline link.<br><a href=\"https://foxsnower.github.io/\" title=\"this is title\" target=\"_blank\" rel=\"external\">This link</a> has no title attribute.</p>\n<pre><code> This is [an example](https://foxsnower.github.io/ &apos;this is title&apos;) inline link.\n[This link](https://foxsnower.github.io/ &quot;this is title&quot;) has no title attribute.\n</code></pre><h3 id=\"区段元素——强调\"><a href=\"#区段元素——强调\" class=\"headerlink\" title=\"区段元素——强调\"></a>区段元素——强调</h3><p><em>single asterisks</em><br><em>single underscores</em><br><strong>double asterisks</strong><br><strong>double underscores</strong></p>\n<pre><code>*single asterisks*\n_single underscores_\n**double asterisks**\n__double underscores__\n</code></pre><h3 id=\"区段元素——代码\"><a href=\"#区段元素——代码\" class=\"headerlink\" title=\"区段元素——代码\"></a>区段元素——代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：</p>\n<p>Use the <code>printf()</code> function</p>\n<pre><code>Use the `printf()` function.\n</code></pre><p><code>There is a literal backtick (`) here.</code></p>\n<h3 id=\"区段元素——图片\"><a href=\"#区段元素——图片\" class=\"headerlink\" title=\"区段元素——图片\"></a>区段元素——图片</h3><pre><code>![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg &quot;Optional title&quot;)\n</code></pre><h3 id=\"其它——自动链接\"><a href=\"#其它——自动链接\" class=\"headerlink\" title=\"其它——自动链接\"></a>其它——自动链接</h3><p><a href=\"http://example.com/\" target=\"_blank\" rel=\"external\">http://example.com/</a></p>\n<pre><code>&lt;http://example.com/&gt;\n</code></pre><h3 id=\"其它——反斜杠\"><a href=\"#其它——反斜杠\" class=\"headerlink\" title=\"其它——反斜杠\"></a>其它——反斜杠</h3><p>*literal asterisks*</p>\n<pre><code>\\*literal asterisks\\*\n\\   反斜线\n`   反引号\n-   星号\n_   底线\n{}  花括号\n[]  方括号\n()  括弧\n#   井字号\n*   加号\n+   减号\n.   英文句点\n!   惊叹号\n</code></pre><h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表格</th>\n<th style=\"text-align:center\">阿萨德</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">asd</td>\n<td style=\"text-align:center\">asd</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">asd</td>\n<td style=\"text-align:center\">asd</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">asd</td>\n<td style=\"text-align:center\">asd</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">asd</td>\n<td style=\"text-align:center\">asd</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">asd</td>\n<td style=\"text-align:center\">asd</td>\n</tr>\n</tbody>\n</table>\n<p>文章参考于：<a href=\"http://wowubuntu.com/markdown/#philosophy\" target=\"_blank\" rel=\"external\">Markdown 语法简略说明 (简体中文版)</a></p>\n","excerpt":"<p>Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<em>强调</em>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>\n<p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>\n<h1 id=\"Markdown-语法\"><a href=\"#Markdown-语法\" class=\"headerlink\" title=\"Markdown 语法\"></a>Markdown 语法</h1><h2 id=\"Markdown-常用语法\"><a href=\"#Markdown-常用语法\" class=\"headerlink\" title=\"Markdown 常用语法\"></a>Markdown 常用语法</h2><h3 id=\"先来一个标题\"><a href=\"#先来一个标题\" class=\"headerlink\" title=\"先来一个标题\"></a>先来一个标题</h3><pre><code># 这是 &lt;h1&gt;&lt;/h1&gt;\n## 这是 &lt;h2&gt;&lt;/h2&gt;\n### 这是 &lt;h3&gt;&lt;/h3&gt;\n#### 这是 &lt;h4&gt;&lt;/h4&gt;\n##### 这是 &lt;h5&gt;&lt;/h5&gt;\n###### 这是 &lt;h6&gt;&lt;/h6&gt;\n</code></pre>","more":"<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><blockquote>\n<blockquote>\n<p>引用里的引用</p>\n</blockquote>\n<p>这段话就是一句引用的话</p>\n</blockquote>\n<pre><code>------------代码域------------\n&gt;&gt;引用里的引用   \n&gt; 这段话就是一句引用的话\n------------代码域------------\n</code></pre><h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue<pre><code>------------代码域------------\n    *   Red\n    *   Green\n    *   Blue\n------------代码域------------\n</code></pre></li>\n</ul>\n<h3 id=\"代码区块\"><a href=\"#代码区块\" class=\"headerlink\" title=\"代码区块\"></a>代码区块</h3><p>4个空格符即可</p>\n<pre><code>$(document).ready(function(){\n    alert(&quot;Hello World!&quot;);\n})\n</code></pre><h3 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h3><hr>\n<pre><code>------------代码域------------\n* * *\n***\n*****\n- - -\n---------------------------------------\n------------代码域------------\n</code></pre><h3 id=\"区段元素——链接\"><a href=\"#区段元素——链接\" class=\"headerlink\" title=\"区段元素——链接\"></a>区段元素——链接</h3><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。<br>以下只介绍行内式，更多详情请参考：<a href=\"http://wowubuntu.com/markdown/#philosophy\">Markdown 语法简略说明 (简体中文版)</a></p>\n<p>This is <a href=\"https://foxsnower.github.io/\" title=\"this is title\">an example</a> inline link.<br><a href=\"https://foxsnower.github.io/\" title=\"this is title\">This link</a> has no title attribute.</p>\n<pre><code> This is [an example](https://foxsnower.github.io/ &apos;this is title&apos;) inline link.\n[This link](https://foxsnower.github.io/ &quot;this is title&quot;) has no title attribute.\n</code></pre><h3 id=\"区段元素——强调\"><a href=\"#区段元素——强调\" class=\"headerlink\" title=\"区段元素——强调\"></a>区段元素——强调</h3><p><em>single asterisks</em><br><em>single underscores</em><br><strong>double asterisks</strong><br><strong>double underscores</strong></p>\n<pre><code>*single asterisks*\n_single underscores_\n**double asterisks**\n__double underscores__\n</code></pre><h3 id=\"区段元素——代码\"><a href=\"#区段元素——代码\" class=\"headerlink\" title=\"区段元素——代码\"></a>区段元素——代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：</p>\n<p>Use the <code>printf()</code> function</p>\n<pre><code>Use the `printf()` function.\n</code></pre><p><code>There is a literal backtick (`) here.</code></p>\n<h3 id=\"区段元素——图片\"><a href=\"#区段元素——图片\" class=\"headerlink\" title=\"区段元素——图片\"></a>区段元素——图片</h3><pre><code>![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg &quot;Optional title&quot;)\n</code></pre><h3 id=\"其它——自动链接\"><a href=\"#其它——自动链接\" class=\"headerlink\" title=\"其它——自动链接\"></a>其它——自动链接</h3><p><a href=\"http://example.com/\">http://example.com/</a></p>\n<pre><code>&lt;http://example.com/&gt;\n</code></pre><h3 id=\"其它——反斜杠\"><a href=\"#其它——反斜杠\" class=\"headerlink\" title=\"其它——反斜杠\"></a>其它——反斜杠</h3><p>*literal asterisks*</p>\n<pre><code>\\*literal asterisks\\*\n\\   反斜线\n`   反引号\n-   星号\n_   底线\n{}  花括号\n[]  方括号\n()  括弧\n#   井字号\n*   加号\n+   减号\n.   英文句点\n!   惊叹号\n</code></pre><h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表格</th>\n<th style=\"text-align:center\">阿萨德</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">asd</td>\n<td style=\"text-align:center\">asd</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">asd</td>\n<td style=\"text-align:center\">asd</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">asd</td>\n<td style=\"text-align:center\">asd</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">asd</td>\n<td style=\"text-align:center\">asd</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">asd</td>\n<td style=\"text-align:center\">asd</td>\n</tr>\n</tbody>\n</table>\n<p>文章参考于：<a href=\"http://wowubuntu.com/markdown/#philosophy\">Markdown 语法简略说明 (简体中文版)</a></p>"},{"_content":"\n\n# clean\n\n      $ hexo clean\n\n清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n\n      $ hexo g\n\n建工程项目\n\n      $ hexo d\n\n上传github\n\n      $ hexo s\n运行\n","source":"_posts/hexo-运行方法.md","raw":"\n\n# clean\n\n      $ hexo clean\n\n清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n\n      $ hexo g\n\n建工程项目\n\n      $ hexo d\n\n上传github\n\n      $ hexo s\n运行\n","slug":"hexo-运行方法","published":1,"date":"2017-01-11T02:47:39.865Z","updated":"2017-01-11T02:53:04.012Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bp1g40005i0beetuvg5gn","content":"<h1 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h1><pre><code>$ hexo clean\n</code></pre><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>\n<pre><code>$ hexo g\n</code></pre><p>建工程项目</p>\n<pre><code>$ hexo d\n</code></pre><p>上传github</p>\n<pre><code>$ hexo s\n</code></pre><p>运行</p>\n","excerpt":"","more":"<h1 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h1><pre><code>$ hexo clean\n</code></pre><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>\n<pre><code>$ hexo g\n</code></pre><p>建工程项目</p>\n<pre><code>$ hexo d\n</code></pre><p>上传github</p>\n<pre><code>$ hexo s\n</code></pre><p>运行</p>\n"},{"title":"css绘图，实现一些特殊形状","_content":"\n这是一件神奇的事，不信？\n\n贴代码试试...\n<!-- more -->\n\n    <!DOCTYPE HTML>\n    <html>\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n        <meta name=\"keywords\" content=\"前端开发,CSS,HTML,XHTML,JS\"/>\n        <meta name=\"description\" content=\"专注前端技术博客\"/>\n        <title>WEB前端开发 | 闪亮于WEB前端的彩虹</title>\n        <title>测试</title>\n        <style type=\"text/css\">\n            - {\n                margin: 0;\n                padding: 0;\n                border: 0;\n            }\n            .wrap {\n                position: absolute;\n            }\n            .arrow { position: relative; width: 0; height: 0; border-top: 9px solid transparent; border-right: 9px solid #000; -webkit-transform: rotate(10deg); -moz-transform: rotate(10deg); -ms-transform: rotate(10deg); -o-transform: rotate(10deg);\n            }\n            .arrow:after {\n                content: \"\"; position: absolute; border: 0 solid transparent; border-top: 3px solid #000; border-radius: 20px 0 0 0; top: -12px; left: -9px; width: 12px; height: 12px; -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -o-transform: rotate(45deg);\n            }\n            .star-six { width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-bottom: 100px solid #9C3; position: relative; }\n            .star-six:after { width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-top: 100px solid #9C3; position: absolute; content: \"\"; top: 30px; left: -50px; }\n            .star-five { margin: 50px 0; position: relative; display: block; color: #06C; width: 0px; height: 0px; border-right: 100px solid transparent; border-bottom: 70px solid #06C; border-left: 100px solid transparent; -moz-transform: rotate(35deg); -webkit-transform: rotate(35deg); -ms-transform: rotate(35deg); -o-transform: rotate(35deg); }\n            .star-five:before { border-bottom: 80px solid #06C; border-left: 30px solid transparent; border-right: 30px solid transparent; position: absolute; height: 0; width: 0; top: -45px; left: -65px; display: block; content: ''; -webkit-transform: rotate(-35deg); -moz-transform: rotate(-35deg); -ms-transform: rotate(-35deg); -o-transform: rotate(-35deg); }\n            .star-five:after { position: absolute; display: block; color: #06C; top: 3px; left: -105px; width: 0px; height: 0px; border-right: 100px solid transparent; border-bottom: 70px solid #06C; border-left: 100px solid transparent; -webkit-transform: rotate(-70deg); -moz-transform: rotate(-70deg); -ms-transform: rotate(-70deg); -o-transform: rotate(-70deg); content: ''; }\n            .heart { position: relative; width: 100px; height: 90px; }\n            .heart:before, .heart:after { position: absolute; content: \"\"; left: 50px; top: 0; width: 50px; height: 80px; background: red; -moz-border-radius: 50px 50px 0 0; border-radius: 50px 50px 0 0; -webkit-transform: rotate(-45deg); -moz-transform: rotate(-45deg); -ms-transform: rotate(-45deg); -o-transform: rotate(-45deg); transform: rotate(-45deg); -webkit-transform-origin: 0 100%; -moz-transform-origin: 0 100%; -ms-transform-origin: 0 100%; -o-transform-origin: 0 100%; transform-origin: 0 100%; }\n            .heart:after { left: 0; -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -o-transform: rotate(45deg); transform: rotate(45deg); -webkit-transform-origin: 100% 100%; -moz-transform-origin: 100% 100%; -ms-transform-origin: 100% 100%; -o-transform-origin: 100% 100%; transform-origin: 100% 100%; }\n            .infinity { position: relative; width: 212px; height: 100px; }\n            .infinity:before, .infinity:after { content: \"\"; position: absolute; top: 0; left: 0; width: 60px; height: 60px; border: 20px solid #F3C; -moz-border-radius: 50px 50px 0 50px; border-radius: 50px 50px 0 50px; -webkit-transform: rotate(-45deg); -moz-transform: rotate(-45deg); -ms-transform: rotate(-45deg); -o-transform: rotate(-45deg); transform: rotate(-45deg); }\n            .infinity:after { left: auto; right: 0; -moz-border-radius: 50px 50px 50px 0; border-radius: 50px 50px 50px 0; -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -o-transform: rotate(45deg); transform: rotate(45deg); }\n            .pacman { width: 0px; height: 0px; border-right: 60px solid transparent; border-top: 60px solid #FC0; border-left: 60px solid #FC0; border-bottom: 60px solid #FC0; border-top-left-radius: 60px; border-top-right-radius: 60px; border-bottom-left-radius: 60px; border-bottom-right-radius: 60px;\n            }\n            .yin-yang { width: 96px; height: 48px; background: #fff; border-color: #000; border-style: solid; border-width: 2px 2px 50px 2px; border-radius: 100%; position: relative; }\n            .yin-yang:before { content: \"\"; position: absolute; top: 50%; left: 0; background: #fff; border: 18px solid #000; border-radius: 100%; width: 12px; height: 12px; }\n            .yin-yang:after { content: \"\"; position: absolute; top: 50%; left: 50%; background: #000; border: 18px solid #fff; border-radius: 100%; width: 12px; height: 12px; }\n        </style>\n    </head>\n    <body>\n        <div class=\"wrap\" style=\"top:30px; left:40px;\">\n            <div class=\"arrow\"></div>\n        </div>\n        <div class=\"wrap\" style=\"top:20px; left:100px;\">\n            <div class=\"star-six\"></div>\n        </div>\n        <div class=\"wrap\" style=\"top:20px; left:200px;\">\n            <div class=\"star-five\"></div>\n        </div>\n        <div class=\"wrap\" style=\"top:20px; left:400px;\">\n            <div class=\"heart\"></div>\n        </div>\n        <div class=\"wrap\" style=\"top:220px; left:100px;\">\n            <div class=\"infinity\"></div>\n        </div>\n        <div class=\"wrap\" style=\"top:220px; left:400px;\">\n            <div class=\"pacman\"></div>\n        </div>\n        <div class=\"wrap\" style=\"top:340px; left:200px;\">\n            <div class=\"yin-yang\"></div>\n        </div>\n    </body>\n    </html>  \n\n\n\n\n","source":"_posts/css绘图，实现一些特殊形状.md","raw":"\n---\ntitle: css绘图，实现一些特殊形状\n---\n\n这是一件神奇的事，不信？\n\n贴代码试试...\n<!-- more -->\n\n    <!DOCTYPE HTML>\n    <html>\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n        <meta name=\"keywords\" content=\"前端开发,CSS,HTML,XHTML,JS\"/>\n        <meta name=\"description\" content=\"专注前端技术博客\"/>\n        <title>WEB前端开发 | 闪亮于WEB前端的彩虹</title>\n        <title>测试</title>\n        <style type=\"text/css\">\n            - {\n                margin: 0;\n                padding: 0;\n                border: 0;\n            }\n            .wrap {\n                position: absolute;\n            }\n            .arrow { position: relative; width: 0; height: 0; border-top: 9px solid transparent; border-right: 9px solid #000; -webkit-transform: rotate(10deg); -moz-transform: rotate(10deg); -ms-transform: rotate(10deg); -o-transform: rotate(10deg);\n            }\n            .arrow:after {\n                content: \"\"; position: absolute; border: 0 solid transparent; border-top: 3px solid #000; border-radius: 20px 0 0 0; top: -12px; left: -9px; width: 12px; height: 12px; -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -o-transform: rotate(45deg);\n            }\n            .star-six { width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-bottom: 100px solid #9C3; position: relative; }\n            .star-six:after { width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-top: 100px solid #9C3; position: absolute; content: \"\"; top: 30px; left: -50px; }\n            .star-five { margin: 50px 0; position: relative; display: block; color: #06C; width: 0px; height: 0px; border-right: 100px solid transparent; border-bottom: 70px solid #06C; border-left: 100px solid transparent; -moz-transform: rotate(35deg); -webkit-transform: rotate(35deg); -ms-transform: rotate(35deg); -o-transform: rotate(35deg); }\n            .star-five:before { border-bottom: 80px solid #06C; border-left: 30px solid transparent; border-right: 30px solid transparent; position: absolute; height: 0; width: 0; top: -45px; left: -65px; display: block; content: ''; -webkit-transform: rotate(-35deg); -moz-transform: rotate(-35deg); -ms-transform: rotate(-35deg); -o-transform: rotate(-35deg); }\n            .star-five:after { position: absolute; display: block; color: #06C; top: 3px; left: -105px; width: 0px; height: 0px; border-right: 100px solid transparent; border-bottom: 70px solid #06C; border-left: 100px solid transparent; -webkit-transform: rotate(-70deg); -moz-transform: rotate(-70deg); -ms-transform: rotate(-70deg); -o-transform: rotate(-70deg); content: ''; }\n            .heart { position: relative; width: 100px; height: 90px; }\n            .heart:before, .heart:after { position: absolute; content: \"\"; left: 50px; top: 0; width: 50px; height: 80px; background: red; -moz-border-radius: 50px 50px 0 0; border-radius: 50px 50px 0 0; -webkit-transform: rotate(-45deg); -moz-transform: rotate(-45deg); -ms-transform: rotate(-45deg); -o-transform: rotate(-45deg); transform: rotate(-45deg); -webkit-transform-origin: 0 100%; -moz-transform-origin: 0 100%; -ms-transform-origin: 0 100%; -o-transform-origin: 0 100%; transform-origin: 0 100%; }\n            .heart:after { left: 0; -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -o-transform: rotate(45deg); transform: rotate(45deg); -webkit-transform-origin: 100% 100%; -moz-transform-origin: 100% 100%; -ms-transform-origin: 100% 100%; -o-transform-origin: 100% 100%; transform-origin: 100% 100%; }\n            .infinity { position: relative; width: 212px; height: 100px; }\n            .infinity:before, .infinity:after { content: \"\"; position: absolute; top: 0; left: 0; width: 60px; height: 60px; border: 20px solid #F3C; -moz-border-radius: 50px 50px 0 50px; border-radius: 50px 50px 0 50px; -webkit-transform: rotate(-45deg); -moz-transform: rotate(-45deg); -ms-transform: rotate(-45deg); -o-transform: rotate(-45deg); transform: rotate(-45deg); }\n            .infinity:after { left: auto; right: 0; -moz-border-radius: 50px 50px 50px 0; border-radius: 50px 50px 50px 0; -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -o-transform: rotate(45deg); transform: rotate(45deg); }\n            .pacman { width: 0px; height: 0px; border-right: 60px solid transparent; border-top: 60px solid #FC0; border-left: 60px solid #FC0; border-bottom: 60px solid #FC0; border-top-left-radius: 60px; border-top-right-radius: 60px; border-bottom-left-radius: 60px; border-bottom-right-radius: 60px;\n            }\n            .yin-yang { width: 96px; height: 48px; background: #fff; border-color: #000; border-style: solid; border-width: 2px 2px 50px 2px; border-radius: 100%; position: relative; }\n            .yin-yang:before { content: \"\"; position: absolute; top: 50%; left: 0; background: #fff; border: 18px solid #000; border-radius: 100%; width: 12px; height: 12px; }\n            .yin-yang:after { content: \"\"; position: absolute; top: 50%; left: 50%; background: #000; border: 18px solid #fff; border-radius: 100%; width: 12px; height: 12px; }\n        </style>\n    </head>\n    <body>\n        <div class=\"wrap\" style=\"top:30px; left:40px;\">\n            <div class=\"arrow\"></div>\n        </div>\n        <div class=\"wrap\" style=\"top:20px; left:100px;\">\n            <div class=\"star-six\"></div>\n        </div>\n        <div class=\"wrap\" style=\"top:20px; left:200px;\">\n            <div class=\"star-five\"></div>\n        </div>\n        <div class=\"wrap\" style=\"top:20px; left:400px;\">\n            <div class=\"heart\"></div>\n        </div>\n        <div class=\"wrap\" style=\"top:220px; left:100px;\">\n            <div class=\"infinity\"></div>\n        </div>\n        <div class=\"wrap\" style=\"top:220px; left:400px;\">\n            <div class=\"pacman\"></div>\n        </div>\n        <div class=\"wrap\" style=\"top:340px; left:200px;\">\n            <div class=\"yin-yang\"></div>\n        </div>\n    </body>\n    </html>  \n\n\n\n\n","slug":"css绘图，实现一些特殊形状","published":1,"date":"2016-08-25T08:09:15.356Z","updated":"2016-09-09T06:38:12.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bp1g40006i0beekyqeotm","content":"<p>这是一件神奇的事，不信？</p>\n<p>贴代码试试…<br><a id=\"more\"></a></p>\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;\n    &lt;meta name=&quot;keywords&quot; content=&quot;前端开发,CSS,HTML,XHTML,JS&quot;/&gt;\n    &lt;meta name=&quot;description&quot; content=&quot;专注前端技术博客&quot;/&gt;\n    &lt;title&gt;WEB前端开发 | 闪亮于WEB前端的彩虹&lt;/title&gt;\n    &lt;title&gt;测试&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        - {\n            margin: 0;\n            padding: 0;\n            border: 0;\n        }\n        .wrap {\n            position: absolute;\n        }\n        .arrow { position: relative; width: 0; height: 0; border-top: 9px solid transparent; border-right: 9px solid #000; -webkit-transform: rotate(10deg); -moz-transform: rotate(10deg); -ms-transform: rotate(10deg); -o-transform: rotate(10deg);\n        }\n        .arrow:after {\n            content: &quot;&quot;; position: absolute; border: 0 solid transparent; border-top: 3px solid #000; border-radius: 20px 0 0 0; top: -12px; left: -9px; width: 12px; height: 12px; -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -o-transform: rotate(45deg);\n        }\n        .star-six { width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-bottom: 100px solid #9C3; position: relative; }\n        .star-six:after { width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-top: 100px solid #9C3; position: absolute; content: &quot;&quot;; top: 30px; left: -50px; }\n        .star-five { margin: 50px 0; position: relative; display: block; color: #06C; width: 0px; height: 0px; border-right: 100px solid transparent; border-bottom: 70px solid #06C; border-left: 100px solid transparent; -moz-transform: rotate(35deg); -webkit-transform: rotate(35deg); -ms-transform: rotate(35deg); -o-transform: rotate(35deg); }\n        .star-five:before { border-bottom: 80px solid #06C; border-left: 30px solid transparent; border-right: 30px solid transparent; position: absolute; height: 0; width: 0; top: -45px; left: -65px; display: block; content: &apos;&apos;; -webkit-transform: rotate(-35deg); -moz-transform: rotate(-35deg); -ms-transform: rotate(-35deg); -o-transform: rotate(-35deg); }\n        .star-five:after { position: absolute; display: block; color: #06C; top: 3px; left: -105px; width: 0px; height: 0px; border-right: 100px solid transparent; border-bottom: 70px solid #06C; border-left: 100px solid transparent; -webkit-transform: rotate(-70deg); -moz-transform: rotate(-70deg); -ms-transform: rotate(-70deg); -o-transform: rotate(-70deg); content: &apos;&apos;; }\n        .heart { position: relative; width: 100px; height: 90px; }\n        .heart:before, .heart:after { position: absolute; content: &quot;&quot;; left: 50px; top: 0; width: 50px; height: 80px; background: red; -moz-border-radius: 50px 50px 0 0; border-radius: 50px 50px 0 0; -webkit-transform: rotate(-45deg); -moz-transform: rotate(-45deg); -ms-transform: rotate(-45deg); -o-transform: rotate(-45deg); transform: rotate(-45deg); -webkit-transform-origin: 0 100%; -moz-transform-origin: 0 100%; -ms-transform-origin: 0 100%; -o-transform-origin: 0 100%; transform-origin: 0 100%; }\n        .heart:after { left: 0; -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -o-transform: rotate(45deg); transform: rotate(45deg); -webkit-transform-origin: 100% 100%; -moz-transform-origin: 100% 100%; -ms-transform-origin: 100% 100%; -o-transform-origin: 100% 100%; transform-origin: 100% 100%; }\n        .infinity { position: relative; width: 212px; height: 100px; }\n        .infinity:before, .infinity:after { content: &quot;&quot;; position: absolute; top: 0; left: 0; width: 60px; height: 60px; border: 20px solid #F3C; -moz-border-radius: 50px 50px 0 50px; border-radius: 50px 50px 0 50px; -webkit-transform: rotate(-45deg); -moz-transform: rotate(-45deg); -ms-transform: rotate(-45deg); -o-transform: rotate(-45deg); transform: rotate(-45deg); }\n        .infinity:after { left: auto; right: 0; -moz-border-radius: 50px 50px 50px 0; border-radius: 50px 50px 50px 0; -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -o-transform: rotate(45deg); transform: rotate(45deg); }\n        .pacman { width: 0px; height: 0px; border-right: 60px solid transparent; border-top: 60px solid #FC0; border-left: 60px solid #FC0; border-bottom: 60px solid #FC0; border-top-left-radius: 60px; border-top-right-radius: 60px; border-bottom-left-radius: 60px; border-bottom-right-radius: 60px;\n        }\n        .yin-yang { width: 96px; height: 48px; background: #fff; border-color: #000; border-style: solid; border-width: 2px 2px 50px 2px; border-radius: 100%; position: relative; }\n        .yin-yang:before { content: &quot;&quot;; position: absolute; top: 50%; left: 0; background: #fff; border: 18px solid #000; border-radius: 100%; width: 12px; height: 12px; }\n        .yin-yang:after { content: &quot;&quot;; position: absolute; top: 50%; left: 50%; background: #000; border: 18px solid #fff; border-radius: 100%; width: 12px; height: 12px; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;wrap&quot; style=&quot;top:30px; left:40px;&quot;&gt;\n        &lt;div class=&quot;arrow&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;wrap&quot; style=&quot;top:20px; left:100px;&quot;&gt;\n        &lt;div class=&quot;star-six&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;wrap&quot; style=&quot;top:20px; left:200px;&quot;&gt;\n        &lt;div class=&quot;star-five&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;wrap&quot; style=&quot;top:20px; left:400px;&quot;&gt;\n        &lt;div class=&quot;heart&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;wrap&quot; style=&quot;top:220px; left:100px;&quot;&gt;\n        &lt;div class=&quot;infinity&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;wrap&quot; style=&quot;top:220px; left:400px;&quot;&gt;\n        &lt;div class=&quot;pacman&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;wrap&quot; style=&quot;top:340px; left:200px;&quot;&gt;\n        &lt;div class=&quot;yin-yang&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;  \n</code></pre>","excerpt":"<p>这是一件神奇的事，不信？</p>\n<p>贴代码试试…<br>","more":"</p>\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;\n    &lt;meta name=&quot;keywords&quot; content=&quot;前端开发,CSS,HTML,XHTML,JS&quot;/&gt;\n    &lt;meta name=&quot;description&quot; content=&quot;专注前端技术博客&quot;/&gt;\n    &lt;title&gt;WEB前端开发 | 闪亮于WEB前端的彩虹&lt;/title&gt;\n    &lt;title&gt;测试&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        - {\n            margin: 0;\n            padding: 0;\n            border: 0;\n        }\n        .wrap {\n            position: absolute;\n        }\n        .arrow { position: relative; width: 0; height: 0; border-top: 9px solid transparent; border-right: 9px solid #000; -webkit-transform: rotate(10deg); -moz-transform: rotate(10deg); -ms-transform: rotate(10deg); -o-transform: rotate(10deg);\n        }\n        .arrow:after {\n            content: &quot;&quot;; position: absolute; border: 0 solid transparent; border-top: 3px solid #000; border-radius: 20px 0 0 0; top: -12px; left: -9px; width: 12px; height: 12px; -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -o-transform: rotate(45deg);\n        }\n        .star-six { width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-bottom: 100px solid #9C3; position: relative; }\n        .star-six:after { width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-top: 100px solid #9C3; position: absolute; content: &quot;&quot;; top: 30px; left: -50px; }\n        .star-five { margin: 50px 0; position: relative; display: block; color: #06C; width: 0px; height: 0px; border-right: 100px solid transparent; border-bottom: 70px solid #06C; border-left: 100px solid transparent; -moz-transform: rotate(35deg); -webkit-transform: rotate(35deg); -ms-transform: rotate(35deg); -o-transform: rotate(35deg); }\n        .star-five:before { border-bottom: 80px solid #06C; border-left: 30px solid transparent; border-right: 30px solid transparent; position: absolute; height: 0; width: 0; top: -45px; left: -65px; display: block; content: &apos;&apos;; -webkit-transform: rotate(-35deg); -moz-transform: rotate(-35deg); -ms-transform: rotate(-35deg); -o-transform: rotate(-35deg); }\n        .star-five:after { position: absolute; display: block; color: #06C; top: 3px; left: -105px; width: 0px; height: 0px; border-right: 100px solid transparent; border-bottom: 70px solid #06C; border-left: 100px solid transparent; -webkit-transform: rotate(-70deg); -moz-transform: rotate(-70deg); -ms-transform: rotate(-70deg); -o-transform: rotate(-70deg); content: &apos;&apos;; }\n        .heart { position: relative; width: 100px; height: 90px; }\n        .heart:before, .heart:after { position: absolute; content: &quot;&quot;; left: 50px; top: 0; width: 50px; height: 80px; background: red; -moz-border-radius: 50px 50px 0 0; border-radius: 50px 50px 0 0; -webkit-transform: rotate(-45deg); -moz-transform: rotate(-45deg); -ms-transform: rotate(-45deg); -o-transform: rotate(-45deg); transform: rotate(-45deg); -webkit-transform-origin: 0 100%; -moz-transform-origin: 0 100%; -ms-transform-origin: 0 100%; -o-transform-origin: 0 100%; transform-origin: 0 100%; }\n        .heart:after { left: 0; -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -o-transform: rotate(45deg); transform: rotate(45deg); -webkit-transform-origin: 100% 100%; -moz-transform-origin: 100% 100%; -ms-transform-origin: 100% 100%; -o-transform-origin: 100% 100%; transform-origin: 100% 100%; }\n        .infinity { position: relative; width: 212px; height: 100px; }\n        .infinity:before, .infinity:after { content: &quot;&quot;; position: absolute; top: 0; left: 0; width: 60px; height: 60px; border: 20px solid #F3C; -moz-border-radius: 50px 50px 0 50px; border-radius: 50px 50px 0 50px; -webkit-transform: rotate(-45deg); -moz-transform: rotate(-45deg); -ms-transform: rotate(-45deg); -o-transform: rotate(-45deg); transform: rotate(-45deg); }\n        .infinity:after { left: auto; right: 0; -moz-border-radius: 50px 50px 50px 0; border-radius: 50px 50px 50px 0; -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -o-transform: rotate(45deg); transform: rotate(45deg); }\n        .pacman { width: 0px; height: 0px; border-right: 60px solid transparent; border-top: 60px solid #FC0; border-left: 60px solid #FC0; border-bottom: 60px solid #FC0; border-top-left-radius: 60px; border-top-right-radius: 60px; border-bottom-left-radius: 60px; border-bottom-right-radius: 60px;\n        }\n        .yin-yang { width: 96px; height: 48px; background: #fff; border-color: #000; border-style: solid; border-width: 2px 2px 50px 2px; border-radius: 100%; position: relative; }\n        .yin-yang:before { content: &quot;&quot;; position: absolute; top: 50%; left: 0; background: #fff; border: 18px solid #000; border-radius: 100%; width: 12px; height: 12px; }\n        .yin-yang:after { content: &quot;&quot;; position: absolute; top: 50%; left: 50%; background: #000; border: 18px solid #fff; border-radius: 100%; width: 12px; height: 12px; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;wrap&quot; style=&quot;top:30px; left:40px;&quot;&gt;\n        &lt;div class=&quot;arrow&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;wrap&quot; style=&quot;top:20px; left:100px;&quot;&gt;\n        &lt;div class=&quot;star-six&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;wrap&quot; style=&quot;top:20px; left:200px;&quot;&gt;\n        &lt;div class=&quot;star-five&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;wrap&quot; style=&quot;top:20px; left:400px;&quot;&gt;\n        &lt;div class=&quot;heart&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;wrap&quot; style=&quot;top:220px; left:100px;&quot;&gt;\n        &lt;div class=&quot;infinity&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;wrap&quot; style=&quot;top:220px; left:400px;&quot;&gt;\n        &lt;div class=&quot;pacman&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;wrap&quot; style=&quot;top:340px; left:200px;&quot;&gt;\n        &lt;div class=&quot;yin-yang&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;  \n</code></pre>"},{"title":"js获取日期：前天、昨天、今天、明天、后天","_content":"想不想用最简短的js代码就能获取日期：前天、昨天、今天、明天、后天\n\n废话不多说，代码说话：\n<!--more -->\n\n    <html>\n    <head >\n        <meta charset=\"UTF-8\">\n        <title>js获取日期：前天、昨天、今天、明天、后天 - Liehuo.Net</title>\n    </head>\n    <body>\n    <script language=\"JavaScript\" type=\"text/javascript\">\n        function GetDateStr(AddDayCount) {\n            var dd = new Date();\n            dd.setDate(dd.getDate()+AddDayCount);//获取AddDayCount天后的日期\n            var y = dd.getFullYear();\n            var m = dd.getMonth()+1;//获取当前月份的日期\n            var d = dd.getDate();\n            if (m < 10) m = \"0\" + m;\n            if (d < 10) d = \"0\" + d;\n            return y+\"-\"+m+\"-\"+d;\n        }\n        document.write(\"前天：\"+GetDateStr(-2));\n        document.write(\"<br />昨天：\"+GetDateStr(-1));\n        document.write(\"<br />今天：\"+GetDateStr(0));\n        document.write(\"<br />明天：\"+GetDateStr(1));\n        document.write(\"<br />后天：\"+GetDateStr(2));\n        document.write(\"<br />大后天：\"+GetDateStr(3));\n    </script>\n    </body>\n    </html>\n","source":"_posts/js获取日期：前天、昨天、今天、明天、后天.md","raw":"---\ntitle: js获取日期：前天、昨天、今天、明天、后天\n---\n想不想用最简短的js代码就能获取日期：前天、昨天、今天、明天、后天\n\n废话不多说，代码说话：\n<!--more -->\n\n    <html>\n    <head >\n        <meta charset=\"UTF-8\">\n        <title>js获取日期：前天、昨天、今天、明天、后天 - Liehuo.Net</title>\n    </head>\n    <body>\n    <script language=\"JavaScript\" type=\"text/javascript\">\n        function GetDateStr(AddDayCount) {\n            var dd = new Date();\n            dd.setDate(dd.getDate()+AddDayCount);//获取AddDayCount天后的日期\n            var y = dd.getFullYear();\n            var m = dd.getMonth()+1;//获取当前月份的日期\n            var d = dd.getDate();\n            if (m < 10) m = \"0\" + m;\n            if (d < 10) d = \"0\" + d;\n            return y+\"-\"+m+\"-\"+d;\n        }\n        document.write(\"前天：\"+GetDateStr(-2));\n        document.write(\"<br />昨天：\"+GetDateStr(-1));\n        document.write(\"<br />今天：\"+GetDateStr(0));\n        document.write(\"<br />明天：\"+GetDateStr(1));\n        document.write(\"<br />后天：\"+GetDateStr(2));\n        document.write(\"<br />大后天：\"+GetDateStr(3));\n    </script>\n    </body>\n    </html>\n","slug":"js获取日期：前天、昨天、今天、明天、后天","published":1,"date":"2016-08-25T09:14:09.818Z","updated":"2016-09-09T08:28:06.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bp1g40007i0ben3rvqd05","content":"<p>想不想用最简短的js代码就能获取日期：前天、昨天、今天、明天、后天</p>\n<p>废话不多说，代码说话：<br><a id=\"more\"></a></p>\n<pre><code>&lt;html&gt;\n&lt;head &gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;js获取日期：前天、昨天、今天、明天、后天 - Liehuo.Net&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt;\n    function GetDateStr(AddDayCount) {\n        var dd = new Date();\n        dd.setDate(dd.getDate()+AddDayCount);//获取AddDayCount天后的日期\n        var y = dd.getFullYear();\n        var m = dd.getMonth()+1;//获取当前月份的日期\n        var d = dd.getDate();\n        if (m &lt; 10) m = &quot;0&quot; + m;\n        if (d &lt; 10) d = &quot;0&quot; + d;\n        return y+&quot;-&quot;+m+&quot;-&quot;+d;\n    }\n    document.write(&quot;前天：&quot;+GetDateStr(-2));\n    document.write(&quot;&lt;br /&gt;昨天：&quot;+GetDateStr(-1));\n    document.write(&quot;&lt;br /&gt;今天：&quot;+GetDateStr(0));\n    document.write(&quot;&lt;br /&gt;明天：&quot;+GetDateStr(1));\n    document.write(&quot;&lt;br /&gt;后天：&quot;+GetDateStr(2));\n    document.write(&quot;&lt;br /&gt;大后天：&quot;+GetDateStr(3));\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>","excerpt":"<p>想不想用最简短的js代码就能获取日期：前天、昨天、今天、明天、后天</p>\n<p>废话不多说，代码说话：<br>","more":"</p>\n<pre><code>&lt;html&gt;\n&lt;head &gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;js获取日期：前天、昨天、今天、明天、后天 - Liehuo.Net&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt;\n    function GetDateStr(AddDayCount) {\n        var dd = new Date();\n        dd.setDate(dd.getDate()+AddDayCount);//获取AddDayCount天后的日期\n        var y = dd.getFullYear();\n        var m = dd.getMonth()+1;//获取当前月份的日期\n        var d = dd.getDate();\n        if (m &lt; 10) m = &quot;0&quot; + m;\n        if (d &lt; 10) d = &quot;0&quot; + d;\n        return y+&quot;-&quot;+m+&quot;-&quot;+d;\n    }\n    document.write(&quot;前天：&quot;+GetDateStr(-2));\n    document.write(&quot;&lt;br /&gt;昨天：&quot;+GetDateStr(-1));\n    document.write(&quot;&lt;br /&gt;今天：&quot;+GetDateStr(0));\n    document.write(&quot;&lt;br /&gt;明天：&quot;+GetDateStr(1));\n    document.write(&quot;&lt;br /&gt;后天：&quot;+GetDateStr(2));\n    document.write(&quot;&lt;br /&gt;大后天：&quot;+GetDateStr(3));\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"title":"sublime Text 3常用插件安装大法","_content":"### 安装Package Control的方法如下：\n\n点击菜单中的 “View”–“Show Console”（也可通过快捷键 Ctrl + ` 打开，不过可能因与系统其他软件快捷键冲突而打不开）调出 Console。然后把下面的代码粘贴进去后回车即可，需稍微等待一段时间。（以下代码可能会因更新而导致失效，请以[官网代码](https://packagecontrol.io/installation#st3)为准。）\n\n    import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n\n重启Sublime Text即可。\n\n<!--more-->\n\n### 1. Emmet\nEmmet的前身是大名鼎鼎的Zen coding，如果你从事Web前端开发的话，对该插件一定不会陌生。它使用仿CSS选择器的语法来生成代码，大大提高了HTML/CSS代码编写的速度。\n\n    ul>li.item$*3\n\n按 `ctrl+e` 或`tab` 键，自动生成以下代码，快捷方便，是你必备安装的插件之一。\n\n    <ul>\n\t<li class=\"item1\"></li>\n\t<li class=\"item2\"></li>\n\t<li class=\"item3\"></li>\n\t</ul>\n\n附：[Emmet使用文档](http://docs.emmet.io/).\n\n### 2. HTML-CSS-JS Prettify\n\n从名字中就可以看出，这是一款美化 HTML 、CSS、JS及Json代码的插件。需要注意的是，必须先安装 Node.js（最好使用默认安装路径，否则安装完插件后还需修改配置文件）。\n\n按 `Ctrl+Shift+P` 或`Ctrl+Shift+H`或者 `右键–“HTML/CSS/JS Prettify”–“Prettify Code” `键，快捷方便，是你美化代码的插件。\n\n### 3. Sublime​Code​Intel\n\n支持所有 Komode Editor 支持的代码语言，如：JavaScript, Mason, XBL, XUL, RHTML, SCSS, Python, HTML, Ruby, Python3, XML, Sass, XSLT, Django, HTML5, Perl, CSS, Twig, Less, Smarty, Node.js, Tcl, TemplateToolkit, PHP等。\n\n提供以下功能：\n\n* 打开并跳转到函数/类等的符号定义位置\n* 实时显示模块/符号的自动补全功能\n* 在状态栏显示当前函数的相关信息\n\n跳转到定义位置（`Alt+Click` 或 `Control+Windows+Alt+Up`）、返回（`Control+Windows+Alt+Left`）\n\n### 4. AutoFileName\n\n一款在 Sublime Text 中可以自动补全文件路径及名称的插件。没有这个插件之前，如果我们要输入文件的路径，就需要凭自己的记忆来输，但是你能确保记得正确吗？能否记得图片是 jpg 还是 png 吗？想更快的输入文件名吗？那么，你肯定需要这款插件！\n\n调用方法\t\n\t\t`<img src=\"../\" />`\n\n\n### 5. jQuery\n一款自动补全 jQuery 函数的插件，带有语法高亮，并且包含几乎所有的 jQuery 方法。\n\n### 6. DocBlockr\nDocBlockr 是一款 Sublime Text 2 & 3 都可以使用的代码快注释插件。支持的语言有：JavaScript (including ES6), PHP, ActionScript, Haxe,CoffeeScript, TypeScript, Java, Groovy, Objective C, C, C++ and Rust.\n\n调用方法：输入 `/**` 后按 `Enter` 或者 `Tab`\n\n### 7. BracketHighlighter\n\nBracketHighlighter 是一款Sublime下匹配标签高亮的小插件，可以把匹配到的如 {}、()、”、””等对应的符号或者标签高亮显示。\n\n调用方法：选中标签即可显示","source":"_posts/sublime Text 3常用插件安装大法.md","raw":"\n---\ntitle: sublime Text 3常用插件安装大法\n---\n### 安装Package Control的方法如下：\n\n点击菜单中的 “View”–“Show Console”（也可通过快捷键 Ctrl + ` 打开，不过可能因与系统其他软件快捷键冲突而打不开）调出 Console。然后把下面的代码粘贴进去后回车即可，需稍微等待一段时间。（以下代码可能会因更新而导致失效，请以[官网代码](https://packagecontrol.io/installation#st3)为准。）\n\n    import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n\n重启Sublime Text即可。\n\n<!--more-->\n\n### 1. Emmet\nEmmet的前身是大名鼎鼎的Zen coding，如果你从事Web前端开发的话，对该插件一定不会陌生。它使用仿CSS选择器的语法来生成代码，大大提高了HTML/CSS代码编写的速度。\n\n    ul>li.item$*3\n\n按 `ctrl+e` 或`tab` 键，自动生成以下代码，快捷方便，是你必备安装的插件之一。\n\n    <ul>\n\t<li class=\"item1\"></li>\n\t<li class=\"item2\"></li>\n\t<li class=\"item3\"></li>\n\t</ul>\n\n附：[Emmet使用文档](http://docs.emmet.io/).\n\n### 2. HTML-CSS-JS Prettify\n\n从名字中就可以看出，这是一款美化 HTML 、CSS、JS及Json代码的插件。需要注意的是，必须先安装 Node.js（最好使用默认安装路径，否则安装完插件后还需修改配置文件）。\n\n按 `Ctrl+Shift+P` 或`Ctrl+Shift+H`或者 `右键–“HTML/CSS/JS Prettify”–“Prettify Code” `键，快捷方便，是你美化代码的插件。\n\n### 3. Sublime​Code​Intel\n\n支持所有 Komode Editor 支持的代码语言，如：JavaScript, Mason, XBL, XUL, RHTML, SCSS, Python, HTML, Ruby, Python3, XML, Sass, XSLT, Django, HTML5, Perl, CSS, Twig, Less, Smarty, Node.js, Tcl, TemplateToolkit, PHP等。\n\n提供以下功能：\n\n* 打开并跳转到函数/类等的符号定义位置\n* 实时显示模块/符号的自动补全功能\n* 在状态栏显示当前函数的相关信息\n\n跳转到定义位置（`Alt+Click` 或 `Control+Windows+Alt+Up`）、返回（`Control+Windows+Alt+Left`）\n\n### 4. AutoFileName\n\n一款在 Sublime Text 中可以自动补全文件路径及名称的插件。没有这个插件之前，如果我们要输入文件的路径，就需要凭自己的记忆来输，但是你能确保记得正确吗？能否记得图片是 jpg 还是 png 吗？想更快的输入文件名吗？那么，你肯定需要这款插件！\n\n调用方法\t\n\t\t`<img src=\"../\" />`\n\n\n### 5. jQuery\n一款自动补全 jQuery 函数的插件，带有语法高亮，并且包含几乎所有的 jQuery 方法。\n\n### 6. DocBlockr\nDocBlockr 是一款 Sublime Text 2 & 3 都可以使用的代码快注释插件。支持的语言有：JavaScript (including ES6), PHP, ActionScript, Haxe,CoffeeScript, TypeScript, Java, Groovy, Objective C, C, C++ and Rust.\n\n调用方法：输入 `/**` 后按 `Enter` 或者 `Tab`\n\n### 7. BracketHighlighter\n\nBracketHighlighter 是一款Sublime下匹配标签高亮的小插件，可以把匹配到的如 {}、()、”、””等对应的符号或者标签高亮显示。\n\n调用方法：选中标签即可显示","slug":"sublime Text 3常用插件安装大法","published":1,"date":"2017-01-16T02:07:54.866Z","updated":"2017-01-16T03:31:47.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bp1g40008i0beufdsf47c","content":"<h3 id=\"安装Package-Control的方法如下：\"><a href=\"#安装Package-Control的方法如下：\" class=\"headerlink\" title=\"安装Package Control的方法如下：\"></a>安装Package Control的方法如下：</h3><p>点击菜单中的 “View”–“Show Console”（也可通过快捷键 Ctrl + ` 打开，不过可能因与系统其他软件快捷键冲突而打不开）调出 Console。然后把下面的代码粘贴进去后回车即可，需稍微等待一段时间。（以下代码可能会因更新而导致失效，请以<a href=\"https://packagecontrol.io/installation#st3\" target=\"_blank\" rel=\"external\">官网代码</a>为准。）</p>\n<pre><code>import urllib.request,os,hashlib; h = &apos;df21e130d211cfc94d9b0905775a7c0f&apos; + &apos;1e3d39e33b79698005270310898eea76&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)\n</code></pre><p>重启Sublime Text即可。</p>\n<a id=\"more\"></a>\n<h3 id=\"1-Emmet\"><a href=\"#1-Emmet\" class=\"headerlink\" title=\"1. Emmet\"></a>1. Emmet</h3><p>Emmet的前身是大名鼎鼎的Zen coding，如果你从事Web前端开发的话，对该插件一定不会陌生。它使用仿CSS选择器的语法来生成代码，大大提高了HTML/CSS代码编写的速度。</p>\n<pre><code>ul&gt;li.item$*3\n</code></pre><p>按 <code>ctrl+e</code> 或<code>tab</code> 键，自动生成以下代码，快捷方便，是你必备安装的插件之一。</p>\n<pre><code>&lt;ul&gt;\n&lt;li class=&quot;item1&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;item2&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre><p>附：<a href=\"http://docs.emmet.io/\" target=\"_blank\" rel=\"external\">Emmet使用文档</a>.</p>\n<h3 id=\"2-HTML-CSS-JS-Prettify\"><a href=\"#2-HTML-CSS-JS-Prettify\" class=\"headerlink\" title=\"2. HTML-CSS-JS Prettify\"></a>2. HTML-CSS-JS Prettify</h3><p>从名字中就可以看出，这是一款美化 HTML 、CSS、JS及Json代码的插件。需要注意的是，必须先安装 Node.js（最好使用默认安装路径，否则安装完插件后还需修改配置文件）。</p>\n<p>按 <code>Ctrl+Shift+P</code> 或<code>Ctrl+Shift+H</code>或者 <code>右键–“HTML/CSS/JS Prettify”–“Prettify Code”</code>键，快捷方便，是你美化代码的插件。</p>\n<h3 id=\"3-Sublime​Code​Intel\"><a href=\"#3-Sublime​Code​Intel\" class=\"headerlink\" title=\"3. Sublime​Code​Intel\"></a>3. Sublime​Code​Intel</h3><p>支持所有 Komode Editor 支持的代码语言，如：JavaScript, Mason, XBL, XUL, RHTML, SCSS, Python, HTML, Ruby, Python3, XML, Sass, XSLT, Django, HTML5, Perl, CSS, Twig, Less, Smarty, Node.js, Tcl, TemplateToolkit, PHP等。</p>\n<p>提供以下功能：</p>\n<ul>\n<li>打开并跳转到函数/类等的符号定义位置</li>\n<li>实时显示模块/符号的自动补全功能</li>\n<li>在状态栏显示当前函数的相关信息</li>\n</ul>\n<p>跳转到定义位置（<code>Alt+Click</code> 或 <code>Control+Windows+Alt+Up</code>）、返回（<code>Control+Windows+Alt+Left</code>）</p>\n<h3 id=\"4-AutoFileName\"><a href=\"#4-AutoFileName\" class=\"headerlink\" title=\"4. AutoFileName\"></a>4. AutoFileName</h3><p>一款在 Sublime Text 中可以自动补全文件路径及名称的插件。没有这个插件之前，如果我们要输入文件的路径，就需要凭自己的记忆来输，但是你能确保记得正确吗？能否记得图片是 jpg 还是 png 吗？想更快的输入文件名吗？那么，你肯定需要这款插件！</p>\n<p>调用方法<br>        <code>&lt;img src=&quot;../&quot; /&gt;</code></p>\n<h3 id=\"5-jQuery\"><a href=\"#5-jQuery\" class=\"headerlink\" title=\"5. jQuery\"></a>5. jQuery</h3><p>一款自动补全 jQuery 函数的插件，带有语法高亮，并且包含几乎所有的 jQuery 方法。</p>\n<h3 id=\"6-DocBlockr\"><a href=\"#6-DocBlockr\" class=\"headerlink\" title=\"6. DocBlockr\"></a>6. DocBlockr</h3><p>DocBlockr 是一款 Sublime Text 2 &amp; 3 都可以使用的代码快注释插件。支持的语言有：JavaScript (including ES6), PHP, ActionScript, Haxe,CoffeeScript, TypeScript, Java, Groovy, Objective C, C, C++ and Rust.</p>\n<p>调用方法：输入 <code>/**</code> 后按 <code>Enter</code> 或者 <code>Tab</code></p>\n<h3 id=\"7-BracketHighlighter\"><a href=\"#7-BracketHighlighter\" class=\"headerlink\" title=\"7. BracketHighlighter\"></a>7. BracketHighlighter</h3><p>BracketHighlighter 是一款Sublime下匹配标签高亮的小插件，可以把匹配到的如 {}、()、”、””等对应的符号或者标签高亮显示。</p>\n<p>调用方法：选中标签即可显示</p>\n","excerpt":"<h3 id=\"安装Package-Control的方法如下：\"><a href=\"#安装Package-Control的方法如下：\" class=\"headerlink\" title=\"安装Package Control的方法如下：\"></a>安装Package Control的方法如下：</h3><p>点击菜单中的 “View”–“Show Console”（也可通过快捷键 Ctrl + ` 打开，不过可能因与系统其他软件快捷键冲突而打不开）调出 Console。然后把下面的代码粘贴进去后回车即可，需稍微等待一段时间。（以下代码可能会因更新而导致失效，请以<a href=\"https://packagecontrol.io/installation#st3\">官网代码</a>为准。）</p>\n<pre><code>import urllib.request,os,hashlib; h = &apos;df21e130d211cfc94d9b0905775a7c0f&apos; + &apos;1e3d39e33b79698005270310898eea76&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)\n</code></pre><p>重启Sublime Text即可。</p>","more":"<h3 id=\"1-Emmet\"><a href=\"#1-Emmet\" class=\"headerlink\" title=\"1. Emmet\"></a>1. Emmet</h3><p>Emmet的前身是大名鼎鼎的Zen coding，如果你从事Web前端开发的话，对该插件一定不会陌生。它使用仿CSS选择器的语法来生成代码，大大提高了HTML/CSS代码编写的速度。</p>\n<pre><code>ul&gt;li.item$*3\n</code></pre><p>按 <code>ctrl+e</code> 或<code>tab</code> 键，自动生成以下代码，快捷方便，是你必备安装的插件之一。</p>\n<pre><code>&lt;ul&gt;\n&lt;li class=&quot;item1&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;item2&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre><p>附：<a href=\"http://docs.emmet.io/\">Emmet使用文档</a>.</p>\n<h3 id=\"2-HTML-CSS-JS-Prettify\"><a href=\"#2-HTML-CSS-JS-Prettify\" class=\"headerlink\" title=\"2. HTML-CSS-JS Prettify\"></a>2. HTML-CSS-JS Prettify</h3><p>从名字中就可以看出，这是一款美化 HTML 、CSS、JS及Json代码的插件。需要注意的是，必须先安装 Node.js（最好使用默认安装路径，否则安装完插件后还需修改配置文件）。</p>\n<p>按 <code>Ctrl+Shift+P</code> 或<code>Ctrl+Shift+H</code>或者 <code>右键–“HTML/CSS/JS Prettify”–“Prettify Code”</code>键，快捷方便，是你美化代码的插件。</p>\n<h3 id=\"3-Sublime​Code​Intel\"><a href=\"#3-Sublime​Code​Intel\" class=\"headerlink\" title=\"3. Sublime​Code​Intel\"></a>3. Sublime​Code​Intel</h3><p>支持所有 Komode Editor 支持的代码语言，如：JavaScript, Mason, XBL, XUL, RHTML, SCSS, Python, HTML, Ruby, Python3, XML, Sass, XSLT, Django, HTML5, Perl, CSS, Twig, Less, Smarty, Node.js, Tcl, TemplateToolkit, PHP等。</p>\n<p>提供以下功能：</p>\n<ul>\n<li>打开并跳转到函数/类等的符号定义位置</li>\n<li>实时显示模块/符号的自动补全功能</li>\n<li>在状态栏显示当前函数的相关信息</li>\n</ul>\n<p>跳转到定义位置（<code>Alt+Click</code> 或 <code>Control+Windows+Alt+Up</code>）、返回（<code>Control+Windows+Alt+Left</code>）</p>\n<h3 id=\"4-AutoFileName\"><a href=\"#4-AutoFileName\" class=\"headerlink\" title=\"4. AutoFileName\"></a>4. AutoFileName</h3><p>一款在 Sublime Text 中可以自动补全文件路径及名称的插件。没有这个插件之前，如果我们要输入文件的路径，就需要凭自己的记忆来输，但是你能确保记得正确吗？能否记得图片是 jpg 还是 png 吗？想更快的输入文件名吗？那么，你肯定需要这款插件！</p>\n<p>调用方法<br>        <code>&lt;img src=&quot;../&quot; /&gt;</code></p>\n<h3 id=\"5-jQuery\"><a href=\"#5-jQuery\" class=\"headerlink\" title=\"5. jQuery\"></a>5. jQuery</h3><p>一款自动补全 jQuery 函数的插件，带有语法高亮，并且包含几乎所有的 jQuery 方法。</p>\n<h3 id=\"6-DocBlockr\"><a href=\"#6-DocBlockr\" class=\"headerlink\" title=\"6. DocBlockr\"></a>6. DocBlockr</h3><p>DocBlockr 是一款 Sublime Text 2 &amp; 3 都可以使用的代码快注释插件。支持的语言有：JavaScript (including ES6), PHP, ActionScript, Haxe,CoffeeScript, TypeScript, Java, Groovy, Objective C, C, C++ and Rust.</p>\n<p>调用方法：输入 <code>/**</code> 后按 <code>Enter</code> 或者 <code>Tab</code></p>\n<h3 id=\"7-BracketHighlighter\"><a href=\"#7-BracketHighlighter\" class=\"headerlink\" title=\"7. BracketHighlighter\"></a>7. BracketHighlighter</h3><p>BracketHighlighter 是一款Sublime下匹配标签高亮的小插件，可以把匹配到的如 {}、()、”、””等对应的符号或者标签高亮显示。</p>\n<p>调用方法：选中标签即可显示</p>"},{"title":"webpack 入门教程","_content":"\n目前，我正在学习用webpack搭建React-Native的环境，在众多的学习过程中，发现这个时期的代码更新速度非常的快，而且学习资料也有很多渐渐过时，而我，不得不在这些（旧）教程中掺杂着最新技术开始我漫长的埋坑之旅。\n\n以下资料来源于[Webpack for React](http://www.pro-react.com/materials/appendixA/)、 [入门Webpack，看这篇就够了](http://blog.csdn.net/kun5706947/article/details/52596766)，敬请参考:\n\n# 什么是WebPack，为什么要使用它？\n## 为什要使用WebPack\n现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法\n\n* 模块化，让我们可以把复杂的程序细化为小的文件;\n* 类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能能装换为JavaScript文件使浏览器可以识别；\n* Scss，less等CSS预处理器\n\n这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常反锁的，这就为WebPack类的工具的出现提供了需求。\n## 什么是Webpack\nWebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。\n## WebPack和Grunt以及Gulp相比有什么特性\n其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack可以替代Gulp/Grunt类的工具。\n\nGrunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，这个工具之后可以自动替你完成这些任务。\n\n ![Grunt和Gulp的工作流程](../../../../images/webpack/picture1.png)\n<!-- more -->\n Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个浏览器可识别的JavaScript文件。\n\n  ![Webpack工作方式](../../../../images/webpack/picture2.png)\n\n如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。\n# 开始使用Webpack\n初步了解了Webpack工作方式后，我们一步步的开始学习使用Webpack。\n## 安装\nWebpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample progect），在终端中转到该文件夹后执行下述指令就可以完成安装。\n\n    //全局安装\n    npm install -g webpack\n    //安装到你的项目目录\n    npm install --save-dev webpack\n\n## 正式使用Webpack前的准备\n在上述练习文件夹中创建一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用`npm`\n`init`命令可以自动创建这个package.json文件\n\n    npm init\n\n输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。\n\n1、package.json文件已经就绪，我们在本项目中安装Webpack作为依赖包\n\n    // 安装Webpack\n    npm install --save-dev webpack\n\n2、回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中，此时项目结构如下图所示\n\n ![项目结构](../../../../images/webpack/picture3.png)\n\nindex.html文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（index.js）\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>React-Native</title>\n    </head>\n    <body>\n        <div id=\"App\"></div>\n        <script src=\"index.js\"></script>\n    </body>\n    </html>\n\nGreeter.js只包括一个用来返回包含问候信息的html元素的函数。\n\n    // Greeter.js\n    module.exports=\"Hi,World!\";\n\nmain.js用来把Greeter模块返回的节点插入页面。\n\n    //main.js \n    var greeter=require('./Greeter.js');\n    document.getElementById('App').innerHTML=greeter;\n\n## 正式使用Webpack\nwebpack可以在终端中使用，其最基础的命令是\n\n    webpack {entry file/入口文件} {destination for bundled file/存放bundle.js的地方,我们这里用index.js}\n\n只需要指定一个入口文件，webpack将自动识别项目所依赖的其它文件，不过需要注意的是如果你的webpack没有进行全局安装，那么当你在终端中使用此命令时，需要额外指定其在node_modules中的地址，继续上面的例子，在终端中属于如下命令\n\n    //webpack非全局安装的情况\n    node_modules/.bin/webpack app/main.js public/index.js\n\n结果如下\n\n![termialResult1](../../../../images/webpack/picture4.png)\n\n可以看出webpack同时编译了main.js和Greeter,js,现在打开index.html,可以看到如下结果\n\n![htmlResult1](../../../../images/webpack/picture5.png)\n\n有没有很激动，已经成功的使用Webpack打包了一个文件了。不过如果在终端中进行复杂的操作，还是不太方便且容易出错的，接下来看看Webpack的另一种使用方法。\n## 通过配置文件来使用Webpack\nWebpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。\n\n还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。\n\n    module.exports = {\n        entry:  __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n        output: {\n        path: __dirname + \"/public\",//打包后的文件存放的地方\n        filename: \"index.js\"//打包后输出文件的文件名\n        }\n    }\n\n>注：“__dirname”是Node.js中的一个全局变量，它指向当前执行脚本所在的目录。\n\n现在如果你需要打包文件只需要在终端里你运行`webpack(非全局安装需使用node_modules/.bin/webpack)`命令就可以了，这条命令会自动参考webpack.config.js文件中的配置选项打包你的项目，输出结果如下\n\n![webpack](../../../../images/webpack/picture6.png)\n\n又学会了一种使用Webpack的方法，而且不用管那烦人的命令行参数了，有没有感觉很爽。有没有想过如果可以连webpack(非全局安装需使用node_modules/.bin/webpack)这条命令都可以不用，那种感觉会不会更爽~，继续看下文。\n\n## 更快捷的执行打包任务\n执行类似于node_modules/.bin/webpack这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是`npm`可以引导任务执行，对其进行配置后可以使用简单的`npm start`命令来代替这些繁琐的命令。在package.json中对`npm`的脚本部分进行相关设置即可，设置方法如下。\n\n    {\n      \"name\": \"react-app\",\n      \"version\": \"1.0.0\",\n      \"description\": \"尝试搭建一次react-native环境\",\n      \"main\": \"main.js\",\n      \"scripts\": {\n        \"start\": \"webpack\"\n      },\n      \"author\": \"FoxSnower\",\n      \"license\": \"ISC\",\n      \"devDependencies\": {\n        \"webpack\": \"^1.13.2\"\n      }\n    }\n\n>注：package.json中的脚本部分已经默认在命令前添加了node_modules/.bin路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。\n\nnpm的`start`是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用`npm start`就可以执行相关命令，如果对应的此脚本名称不是`start`，想要在命令行中运行时，需要这样用`npm run {script name}`如`npm run build`，以下是执行`npm start`后命令行的输出显示\n\n![npmStartTermialResult](../../../../images/webpack/picture7.png)\n\n现在只需要使用`npm start`就可以打包文件了，有没有觉得webpack也不过如此嘛，不过不要太小瞧Webpack，其强大的功能包含在其一系列可供配置的选项中，我们一项项来看。\n\n# Webpack的强大功能\n## 生成Source Maps（使调试更容易）\n\n开发总是离不开调试，如果可以更加方便的调试当然就能提高开发效率，不过打包后的文件有时候你是不容易找到出错了的地方对应的源代码的位置的，Source Maps就是来帮我们解决这个问题的。\n通过简单的配置后，Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。\n\n在webpack的配置文件中配置source maps，需要配置devtool，它有以下四种不同的配置选项，各具优缺点，描述如下：\n\n![devtool配置选项](../../../../images/webpack/picture8.png)\n\n正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的构建速度的后果就是对打包后的文件的的执行有一定影响。\n\n在学习阶段以及在小到中性的项目上，eval-source-map是一个很好的选项，不过记得只在开发阶段使用它，继续上面的例子，进行如下配置\n\n    module.exports = {\n      devtool: 'eval-source-map',//配置生成Source Maps，选择合适的选项\n      entry:  __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/public\",\n        filename: \"bundle.js\"\n      }\n    }\n\n>cheap-module-eval-source-map方法构建速度更快，但是不利于调试，推荐在大型项目考虑da时间成本是使用。\n\n## 使用webpack构建本地服务器\n想不想让你的浏览器监测你都代码的修改，并自动刷新修改后的结果，其实Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖\n\n    npm install --save-dev webpack-dev-server\n\ndevserver作为webpack配置选项中的一项，具有以下配置选项\n\n![devserver配置选项](../../../../images/webpack/picture9.png)\n\n继续把这些命令加到webpack的配置文件中，现在的配置文件如下所示\n\n    module.exports={\n        devtool:'eval-source-map',//配置生成Source Maps，选择合适的选项\n        \n        entry:__dirname+\"/app/main.js\",//唯一的入口文件\n        output:{\n            path:__dirname+\"/public\",//打包后的文件存放的地方\n            filename:\"index.js\"//打包后输出的文件名\n        },\n        devServer:{\n            contentBase:'./public',//本地服务器所加载的页面所在的目录\n            color:true,//终端中输出结果为彩色\n            historyApiFallBack:true,//不跳转\n            inline:true//实时刷新\n        }\n    }\n\n# Loaders\n## 鼎鼎大名的Loaders登场了！\n\nLoaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。\n\nLoaders需要单独安装并且需要在webpack.config.js下的modules关键字下进行配置，Loaders的配置选项包括以下几方面：\n\n* `test`：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）\n* `loader`：loader的名称（必须）\n* `include/exclude`:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；\n* `query`：为loaders提供额外的设置选项（可选）\n\n继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下\n\n    //安装可以装换JSON的loader\n    npm install --save-dev json-loader\n\n创建带有问候信息的JSON文件(命名为config.json)\n\n    //config.json\n    {\n      \"greetText\": \"Hi there and greetings from JSON!\"\n    }\n\n更新后的Greeter.js\n\n    var config = require('./config.json');\n\n    module.exports = function() {\n      var greet = document.createElement('div');\n      greet.textContent = config.greetText;\n      return greet;\n    };\n\nLoaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。\n\n## Babel\nBabel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：\n\n* 一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；\n* 使用基于JavaScript进行了拓展的语言，比如React的JSX\n\n## Babel的安装与配置\n\nBabel其实是几个模块化的包，其核心功能位于称为babel-core的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。\n\n我们先来一次性安装这些依赖包\n\n    // npm一次性安装多个依赖模块，模块之间用空格隔开\n    npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react\n\n在webpack中配置Babel的方法如下\n\n    module.exports = {\n      devtool: 'eval-source-map',\n        \n      entry:  __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/public\",\n        filename: \"index.js\"\n      },\n    \n      module: {\n        loaders: [\n          {\n            test: /\\.json$/,\n            loader: \"json\"\n          },\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel',//在webpack的module部分的loaders里进行配置即可\n            query: {\n              presets: ['es2015','react']\n            }\n          }\n        ]\n      },\n    \n      devServer: {\n        contentBase: \"./public\",\n        colors: true,\n        historyApiFallback: true,\n        inline: true\n      }\n    }\n\n现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM\n\n    npm install --save react react-dom\n\n使用ES6的语法，更新Greeter.js并返回一个React组件\n\n    //Greeter,js\n    import React, {Component} from 'react'\n    import config from './config.json';\n    \n    class Greeter extends Component{\n      render() {\n        return (\n          <div>\n            {config.greetText}\n          </div>\n        );\n      }\n    }\n    \n    export default Greeter\n\n使用ES6的模块定义和渲染Greeter模块\n\n    //main.js\n    import React from 'react';\n    import {render} from 'react-dom';\n    import Greeter from './Greeter';\n    \n    render(<Greeter />, document.getElementById('App'));\n\n## Babel的配置选项\nBabel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 \".babelrc\" 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用.babelrc里的babel配置选项），如下：\n\n    // webpack.config.js\n    module.exports = {\n      devtool: 'eval-source-map',\n    \n      entry:  __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/public\",\n        filename: \"index.js\"\n      },\n    \n      module: {\n        loaders: [\n          {\n            test: /\\.json$/,\n            loader: \"json\"\n          },\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel'\n          }\n        ]\n      },\n    \n      devServer: {...} // Omitted for brevity\n    }\n\n    //.babelrc\n    {\n      \"presets\": [\"react\", \"es2015\"]\n    }\n\n到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那哪些是模块呢。 \n\n# 一切皆模块\nWebpack有一个不可不说的优点，它把所有的文件都可以当做模块处理，包括你的JavaScript代码，也包括CSS和fonts以及图片等等等，只有通过合适的loaders，它们都可以被当做模块被处理。\n## CSS\nwebpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似@import 和 url(...)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。\n\n继续上面的例子\n\n    //安装\n    npm install --save-dev style-loader css-loader\n \n    //使用\n    module.exports = {\n      devtool: 'eval-source-map',\n      entry:  __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/build\",\n        filename: \"index.js\"\n      },\n    \n      module: {\n        loaders: [\n          {\n            test: /\\.json$/,\n            loader: \"json\"\n          },\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel'\n          },\n          {\n            test: /\\.css$/,\n            loader: 'style!css'//添加对样式表的处理\n          }\n        ]\n      },\n    \n      devServer: {...}\n    }\n\n>注：感叹号的作用在于使同一文件能够使用不同类型的loader\n\n接下来，在app文件夹里创建一个名字为\"main.css\"的文件，对一些元素设置样式\n\n    html {\n      box-sizing: border-box;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    *, *:before, *:after {\n      box-sizing: inherit;\n    }\n    body {\n      margin: 0;\n      font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    }\n    h1, h2, h3, h4, h5, h6, p, ul {\n      margin: 0;\n      padding: 0;\n    }\n\n你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下\n\n    //main.js\n    import React from 'react';\n    import {render} from 'react-dom';\n    import Greeter from './Greeter';\n    \n    import './main.css';//使用require导入css文件\n    \n    render(<Greeter />, document.getElementById('App'));  \n\n>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。\n不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。\n\n## CSS module\n在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，且基于优化工具，依赖管理和加载管理可以自动完成。\n不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧是巨大且充满了全局类名，这使得维护和修改都非常困难和复杂。\n\n最近有一个叫做 CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递都所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中具有相同的类名可能会造成的问题。具体的代码如下\n\n    module.exports = {\n      devtool: 'eval-source-map',\n    \n      entry:  __dirname + \"/app/main.js\",\n      output: {...},\n    \n      module: {\n        loaders: [\n          {\n            test: /\\.json$/,\n            loader: \"json\"\n          },\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel'\n          },\n          {\n            test: /\\.css$/,\n            loader: 'style!css?modules'//跟前面相比就在后面加上了?modules\n          }\n        ]\n      },\n    \n      devServer: {...}\n    }\n\n创建一个Greeter.css文件\n\n    .root {\n      background-color: #eee;\n      padding: 10px;\n      border: 3px solid #ccc;\n    }\n\n导入.root到Greeter.js中\n\n    import React, {Component} from 'react';\n    import config from './config.json';\n    import styles from './Greeter.css';//导入\n    \n    class Greeter extends Component{\n      render() {\n        return (\n          <div className={styles.root}>//添加类名\n            {config.greetText}\n          </div>\n        );\n      }\n    }\n    \n    export default Greeter   \n\n放心使用把，相同的类名也不会造成不同组件之间的污染。\nCSS modules 也是一个很大的主题，有兴趣的话可以去官方文档查看更多消息\n\n## CSS预处理器\n\nSass 和 Less之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，\n你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理loaders\n\n* Less Loader\n* Sass Loader\n* Stylus Loader\n\n不过其实也存在一个CSS的处理平台-PostCSS，它可以帮助你的CSS实现更多的功能，在其[CSS官方文档](https://github.com/postcss/postcss)可了解更多相关知识。\n\n举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。\n\n首先安装postcss-loader 和 autoprefixer（自动添加前缀的插件）\n\n    npm install --save-dev postcss-loader autoprefixer\n\n接下来，在webpack配置文件中进行设置，只需要新建一个postcss关键字，并在里面申明依赖的插件，如下，现在你写的css会自动根据Can i use里的数据添加不同前缀了。\n\n    //webpack配置文件\n    module.exports = {\n      devtool: 'eval-source-map',\n      entry: __dirname + \"/app/main.js\",\n      output: {...},\n    \n      module: {\n        loaders: [\n          {\n            test: /\\.json$/,\n            loader: \"json\"\n          },\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel'\n          },\n          {\n            test: /\\.css$/,\n            loader: 'style!css?modules!postcss'\n          }\n        ]\n      },\n    \n      postcss: [\n        require('autoprefixer')//调用autoprefixer插件\n      ],\n    \n      devServer: {...}\n    }\n\n到现在，本文已经涉及到处理JS的Babel和处理CSS的PostCSS，它们其实也是两个单独的平台，配合Webpack可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-Plugins\n\n# 插件（Plugins）\n插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。\nLoaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。\n\nWebpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。\n\n## 使用插件的方法\n要使用某个插件，我们需要通过npm安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续看例子，我们添加了一个实现版权声明的插件。\n\n    //webpack.config.js\n    var webpack = require('webpack');\n    \n    module.exports = {\n      devtool: 'eval-source-map',\n      entry:  __dirname + \"/app/main.js\",\n      output: {...},\n    \n      module: {\n        loaders: [\n          { test: /\\.json$/, loader: \"json\" },\n          { test: /\\.js$/, exclude: /node_modules/, loader: 'babel' },\n          { test: /\\.css$/, loader: 'style!css?modules!postcss' }//这里添加PostCSS\n        ]\n      },\n      postcss: [\n        require('autoprefixer')\n      ],\n    \n      plugins: [\n        new webpack.BannerPlugin(\"Copyright Flying Unicorns inc.\")//在这个数组中new一个就可以了\n      ],\n    \n      devServer: {...}\n    }\n\n通过这个插件，打包后的JS文件显示如下\n\n知道Webpack中的插件如何使用了，下面给大家推荐几个常用的插件\n## HtmlWebpackPlugin\n这个插件的作用是依据一个简单的模板，帮你生成最终的HTML5文件，这个文件中自动引用了你打包后的JS文件。每次编译都在文件名中插入一个不同的哈希值。\n\n安装\n\n    npm install --save-dev html-webpack-plugin\n\n这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些改变：\n\n1、移除public文件夹，利用此插件，HTML5文件会自动生成，此外CSS已经通过前面的操作打包到JS中了，public文件夹里。\n2、在app目录下，创建一个Html文件模板，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，在本例中我们命名模板文件名称为index.tmpl.html，模板源代码如下\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Webpack Sample Project</title>\n      </head>\n      <body>\n        <div id='App'>\n        </div>\n      </body>\n    </html>\n\n3、更新webpack的配置文件，方法同上,新建一个build文件夹用来存放最终的输出文件\n\n    var webpack = require('webpack');\n    var HtmlWebpackPlugin = require('html-webpack-plugin');\n    module.exports = {\n      devtool: 'eval-source-map',\n    \n      entry:  __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/build\",\n        filename: \"index.js\"\n      },\n    \n      module: {\n        loaders: [\n          { test: /\\.json$/, loader: \"json\" },\n          { test: /\\.js$/, exclude: /node_modules/, loader: 'babel' },\n          { test: /\\.css$/, loader: 'style!css?modules!postcss' }\n        ]\n      },\n      postcss: [\n        require('autoprefixer')\n      ],\n    \n      plugins: [\n        new HtmlWebpackPlugin({\n          template: __dirname + \"/app/index.tmpl.html\"//new 一个这个插件的实例，并传入相关的参数\n        })\n      ],\n    \n      devServer: {\n        colors: true,\n        historyApiFallback: true,\n        inline: true\n      }\n    }\n\n## Hot Module Replacement\n\nHot Module Replacement（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。\n在webpack中实现HMR也很简单，只需要做两项配置\n\n1、在webpack配置文件中添加HMR插件；\n2、在Webpack Dev Server中添加“hot”参数；\n\n不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。\n\n整理下我们的思路，具体实现方法如下\n\n* Babel和webpack是独立的工具\n* 二者可以一起工作\n* 二者都可以通过插件拓展功能\n* HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；\n* Babel有一个叫做react-transform-hrm的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作;\n\n更新我们的例子来实际看看如何配置\n\n    //webpack中的配置\n    var webpack = require('webpack');\n    var HtmlWebpackPlugin = require('html-webpack-plugin');\n    \n    module.exports = {\n      devtool: 'eval-source-map',\n      entry: __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle.js\"\n      },\n    \n      module: {\n        loaders: [\n          { test: /\\.json$/, loader: \"json\" },\n          { test: /\\.js$/, exclude: /node_modules/, loader: 'babel' },\n          { test: /\\.css$/, loader: 'style!css?modules!postcss' }\n        ]\n      },\n      postcss: [\n        require('autoprefixer')\n      ],\n    \n      plugins: [\n        new HtmlWebpackPlugin({\n          template: __dirname + \"/app/index.tmpl.html\"\n        }),\n        new webpack.HotModuleReplacementPlugin()//热加载插件\n      ],\n    \n      devServer: {\n        colors: true,\n        historyApiFallback: true,\n        inline: true,\n        hot: true\n      }\n    }\n\n安装react-transform-hmr\n\n    npm install --save-dev babel-plugin-react-transform react-transform-hmr\n\n配置Babel\n\n    {\n      \"presets\": [\"react\", \"es2015\"],\n      \"env\": {\n        \"development\": {\n        \"plugins\": [[\"react-transform\", {\n           \"transforms\": [{\n             \"transform\": \"react-transform-hmr\",\n    \n             \"imports\": [\"react\"],\n    \n             \"locals\": [\"module\"]\n           }]\n         }]]\n        }\n      }\n    }\n\n现在当你使用React时，可以热加载模块了\n\n# 产品阶段的构建\n目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。\n\n对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个“webpack.production.config.js”的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下\n\n    var webpack = require('webpack');\n    var HtmlWebpackPlugin = require('html-webpack-plugin');\n    \n    module.exports = {\n      entry: __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle.js\"\n      },\n    \n      module: {\n        loaders: [\n          {\n            test: /\\.json$/,\n            loader: \"json\"\n          },\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel'\n          },\n          {\n            test: /\\.css$/,\n            loader: 'style!css?modules!postcss'\n          }\n        ]\n      },\n      postcss: [\n        require('autoprefixer')\n      ],\n    \n      plugins: [\n        new HtmlWebpackPlugin({\n          template: __dirname + \"/app/index.tmpl.html\"\n        }),\n      ],\n    \n    }\n\n\n    //package.json\n    {\n      \"name\": \"webpack-sample-project\",\n      \"version\": \"1.0.0\",\n      \"description\": \"Sample webpack project\",\n      \"scripts\": {\n        \"start\": \"webpack-dev-server --progress\",\n        \"build\": \"NODE_ENV=production webpack --config ./webpack.production.config.js --progress\"\n      },\n      \"author\": \"Cássio Zen\",\n      \"license\": \"ISC\",\n      \"devDependencies\": {...},\n      \"dependencies\": {...}\n    }\n\n# 优化插件\nwebpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能\n\n* OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID\n* UglifyJsPlugin：压缩JS代码；\n* ExtractTextPlugin：分离CSS和JS文件\n\n我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装它们\n\n    npm install --save-dev extract-text-webpack-plugin  \n\n在配置文件的plugins后引用它们\n\n    var webpack = require('webpack');\n    var HtmlWebpackPlugin = require('html-webpack-plugin');\n    var ExtractTextPlugin = require('extract-text-webpack-plugin');\n    \n    module.exports = {\n      entry: __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle.js\"\n      },\n    \n      module: {\n        loaders: [\n          {\n            test: /\\.json$/,\n            loader: \"json\"\n          },\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel'\n          },\n          {\n            test: /\\.css$/,\n            loader: ExtractTextPlugin.extract('style', 'css?modules!postcss')\n          }\n        ]\n      },\n      postcss: [\n        require('autoprefixer')\n      ],\n    \n      plugins: [\n        new HtmlWebpackPlugin({\n          template: __dirname + \"/app/index.tmpl.html\"\n        }),\n        new webpack.optimize.OccurenceOrderPlugin(),\n        new webpack.optimize.UglifyJsPlugin(),\n        new ExtractTextPlugin(\"style.css\")\n      ]\n    }\n\n# 缓存\n缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）\n\nwebpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前\n\n    var webpack = require('webpack');\n    var HtmlWebpackPlugin = require('html-webpack-plugin');\n    var ExtractTextPlugin = require('extract-text-webpack-plugin');\n    \n    module.exports = {\n      entry: __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/build\",\n        filename: \"[name]-[hash].js\"\n      },\n    \n      module: {\n        loaders: [\n          {\n            test: /\\.json$/,\n            loader: \"json\"\n          },\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel'\n          },\n          {\n            test: /\\.css$/,\n            loader: ExtractTextPlugin.extract('style', 'css?modules!postcss')\n          }\n        ]\n      },\n      postcss: [\n        require('autoprefixer')\n      ],\n    \n      plugins: [\n        new HtmlWebpackPlugin({\n          template: __dirname + \"/app/index.tmpl.html\"\n        }),\n        new webpack.optimize.OccurenceOrderPlugin(),\n        new webpack.optimize.UglifyJsPlugin(),\n        new ExtractTextPlugin(\"[name]-[hash].css\")\n      ]\n    }\n\n现在用户会有合理的缓存了。\n\n# 总结\n这是一篇好长的文章，谢谢你的耐心，能仔细看到了这里，大概半个月前我第一次自己一步步配置项目所需的Webpack后就一直想写一篇笔记做总结，几次动笔都不能让自己满意，总觉得写不清楚。直到看到本文的英文版Webpack for React，真的有多次豁然开朗的感觉，喜欢看原文的点链接就可以看了。其实关于Webpack本文讲述得仍不完全，不过相信你看完后已经进入Webpack的大门，能够更好的探索其它的关于Webpack的知识了。\n\n本文转载自 http://www.jianshu.com/p/42e11515c10f  \n","source":"_posts/webpack 入门教程.md","raw":"\n---\ntitle: webpack 入门教程\n---\n\n目前，我正在学习用webpack搭建React-Native的环境，在众多的学习过程中，发现这个时期的代码更新速度非常的快，而且学习资料也有很多渐渐过时，而我，不得不在这些（旧）教程中掺杂着最新技术开始我漫长的埋坑之旅。\n\n以下资料来源于[Webpack for React](http://www.pro-react.com/materials/appendixA/)、 [入门Webpack，看这篇就够了](http://blog.csdn.net/kun5706947/article/details/52596766)，敬请参考:\n\n# 什么是WebPack，为什么要使用它？\n## 为什要使用WebPack\n现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法\n\n* 模块化，让我们可以把复杂的程序细化为小的文件;\n* 类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能能装换为JavaScript文件使浏览器可以识别；\n* Scss，less等CSS预处理器\n\n这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常反锁的，这就为WebPack类的工具的出现提供了需求。\n## 什么是Webpack\nWebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。\n## WebPack和Grunt以及Gulp相比有什么特性\n其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack可以替代Gulp/Grunt类的工具。\n\nGrunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，这个工具之后可以自动替你完成这些任务。\n\n ![Grunt和Gulp的工作流程](../../../../images/webpack/picture1.png)\n<!-- more -->\n Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个浏览器可识别的JavaScript文件。\n\n  ![Webpack工作方式](../../../../images/webpack/picture2.png)\n\n如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。\n# 开始使用Webpack\n初步了解了Webpack工作方式后，我们一步步的开始学习使用Webpack。\n## 安装\nWebpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample progect），在终端中转到该文件夹后执行下述指令就可以完成安装。\n\n    //全局安装\n    npm install -g webpack\n    //安装到你的项目目录\n    npm install --save-dev webpack\n\n## 正式使用Webpack前的准备\n在上述练习文件夹中创建一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用`npm`\n`init`命令可以自动创建这个package.json文件\n\n    npm init\n\n输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。\n\n1、package.json文件已经就绪，我们在本项目中安装Webpack作为依赖包\n\n    // 安装Webpack\n    npm install --save-dev webpack\n\n2、回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中，此时项目结构如下图所示\n\n ![项目结构](../../../../images/webpack/picture3.png)\n\nindex.html文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（index.js）\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>React-Native</title>\n    </head>\n    <body>\n        <div id=\"App\"></div>\n        <script src=\"index.js\"></script>\n    </body>\n    </html>\n\nGreeter.js只包括一个用来返回包含问候信息的html元素的函数。\n\n    // Greeter.js\n    module.exports=\"Hi,World!\";\n\nmain.js用来把Greeter模块返回的节点插入页面。\n\n    //main.js \n    var greeter=require('./Greeter.js');\n    document.getElementById('App').innerHTML=greeter;\n\n## 正式使用Webpack\nwebpack可以在终端中使用，其最基础的命令是\n\n    webpack {entry file/入口文件} {destination for bundled file/存放bundle.js的地方,我们这里用index.js}\n\n只需要指定一个入口文件，webpack将自动识别项目所依赖的其它文件，不过需要注意的是如果你的webpack没有进行全局安装，那么当你在终端中使用此命令时，需要额外指定其在node_modules中的地址，继续上面的例子，在终端中属于如下命令\n\n    //webpack非全局安装的情况\n    node_modules/.bin/webpack app/main.js public/index.js\n\n结果如下\n\n![termialResult1](../../../../images/webpack/picture4.png)\n\n可以看出webpack同时编译了main.js和Greeter,js,现在打开index.html,可以看到如下结果\n\n![htmlResult1](../../../../images/webpack/picture5.png)\n\n有没有很激动，已经成功的使用Webpack打包了一个文件了。不过如果在终端中进行复杂的操作，还是不太方便且容易出错的，接下来看看Webpack的另一种使用方法。\n## 通过配置文件来使用Webpack\nWebpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。\n\n还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。\n\n    module.exports = {\n        entry:  __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n        output: {\n        path: __dirname + \"/public\",//打包后的文件存放的地方\n        filename: \"index.js\"//打包后输出文件的文件名\n        }\n    }\n\n>注：“__dirname”是Node.js中的一个全局变量，它指向当前执行脚本所在的目录。\n\n现在如果你需要打包文件只需要在终端里你运行`webpack(非全局安装需使用node_modules/.bin/webpack)`命令就可以了，这条命令会自动参考webpack.config.js文件中的配置选项打包你的项目，输出结果如下\n\n![webpack](../../../../images/webpack/picture6.png)\n\n又学会了一种使用Webpack的方法，而且不用管那烦人的命令行参数了，有没有感觉很爽。有没有想过如果可以连webpack(非全局安装需使用node_modules/.bin/webpack)这条命令都可以不用，那种感觉会不会更爽~，继续看下文。\n\n## 更快捷的执行打包任务\n执行类似于node_modules/.bin/webpack这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是`npm`可以引导任务执行，对其进行配置后可以使用简单的`npm start`命令来代替这些繁琐的命令。在package.json中对`npm`的脚本部分进行相关设置即可，设置方法如下。\n\n    {\n      \"name\": \"react-app\",\n      \"version\": \"1.0.0\",\n      \"description\": \"尝试搭建一次react-native环境\",\n      \"main\": \"main.js\",\n      \"scripts\": {\n        \"start\": \"webpack\"\n      },\n      \"author\": \"FoxSnower\",\n      \"license\": \"ISC\",\n      \"devDependencies\": {\n        \"webpack\": \"^1.13.2\"\n      }\n    }\n\n>注：package.json中的脚本部分已经默认在命令前添加了node_modules/.bin路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。\n\nnpm的`start`是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用`npm start`就可以执行相关命令，如果对应的此脚本名称不是`start`，想要在命令行中运行时，需要这样用`npm run {script name}`如`npm run build`，以下是执行`npm start`后命令行的输出显示\n\n![npmStartTermialResult](../../../../images/webpack/picture7.png)\n\n现在只需要使用`npm start`就可以打包文件了，有没有觉得webpack也不过如此嘛，不过不要太小瞧Webpack，其强大的功能包含在其一系列可供配置的选项中，我们一项项来看。\n\n# Webpack的强大功能\n## 生成Source Maps（使调试更容易）\n\n开发总是离不开调试，如果可以更加方便的调试当然就能提高开发效率，不过打包后的文件有时候你是不容易找到出错了的地方对应的源代码的位置的，Source Maps就是来帮我们解决这个问题的。\n通过简单的配置后，Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。\n\n在webpack的配置文件中配置source maps，需要配置devtool，它有以下四种不同的配置选项，各具优缺点，描述如下：\n\n![devtool配置选项](../../../../images/webpack/picture8.png)\n\n正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的构建速度的后果就是对打包后的文件的的执行有一定影响。\n\n在学习阶段以及在小到中性的项目上，eval-source-map是一个很好的选项，不过记得只在开发阶段使用它，继续上面的例子，进行如下配置\n\n    module.exports = {\n      devtool: 'eval-source-map',//配置生成Source Maps，选择合适的选项\n      entry:  __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/public\",\n        filename: \"bundle.js\"\n      }\n    }\n\n>cheap-module-eval-source-map方法构建速度更快，但是不利于调试，推荐在大型项目考虑da时间成本是使用。\n\n## 使用webpack构建本地服务器\n想不想让你的浏览器监测你都代码的修改，并自动刷新修改后的结果，其实Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖\n\n    npm install --save-dev webpack-dev-server\n\ndevserver作为webpack配置选项中的一项，具有以下配置选项\n\n![devserver配置选项](../../../../images/webpack/picture9.png)\n\n继续把这些命令加到webpack的配置文件中，现在的配置文件如下所示\n\n    module.exports={\n        devtool:'eval-source-map',//配置生成Source Maps，选择合适的选项\n        \n        entry:__dirname+\"/app/main.js\",//唯一的入口文件\n        output:{\n            path:__dirname+\"/public\",//打包后的文件存放的地方\n            filename:\"index.js\"//打包后输出的文件名\n        },\n        devServer:{\n            contentBase:'./public',//本地服务器所加载的页面所在的目录\n            color:true,//终端中输出结果为彩色\n            historyApiFallBack:true,//不跳转\n            inline:true//实时刷新\n        }\n    }\n\n# Loaders\n## 鼎鼎大名的Loaders登场了！\n\nLoaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。\n\nLoaders需要单独安装并且需要在webpack.config.js下的modules关键字下进行配置，Loaders的配置选项包括以下几方面：\n\n* `test`：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）\n* `loader`：loader的名称（必须）\n* `include/exclude`:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；\n* `query`：为loaders提供额外的设置选项（可选）\n\n继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下\n\n    //安装可以装换JSON的loader\n    npm install --save-dev json-loader\n\n创建带有问候信息的JSON文件(命名为config.json)\n\n    //config.json\n    {\n      \"greetText\": \"Hi there and greetings from JSON!\"\n    }\n\n更新后的Greeter.js\n\n    var config = require('./config.json');\n\n    module.exports = function() {\n      var greet = document.createElement('div');\n      greet.textContent = config.greetText;\n      return greet;\n    };\n\nLoaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。\n\n## Babel\nBabel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：\n\n* 一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；\n* 使用基于JavaScript进行了拓展的语言，比如React的JSX\n\n## Babel的安装与配置\n\nBabel其实是几个模块化的包，其核心功能位于称为babel-core的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。\n\n我们先来一次性安装这些依赖包\n\n    // npm一次性安装多个依赖模块，模块之间用空格隔开\n    npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react\n\n在webpack中配置Babel的方法如下\n\n    module.exports = {\n      devtool: 'eval-source-map',\n        \n      entry:  __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/public\",\n        filename: \"index.js\"\n      },\n    \n      module: {\n        loaders: [\n          {\n            test: /\\.json$/,\n            loader: \"json\"\n          },\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel',//在webpack的module部分的loaders里进行配置即可\n            query: {\n              presets: ['es2015','react']\n            }\n          }\n        ]\n      },\n    \n      devServer: {\n        contentBase: \"./public\",\n        colors: true,\n        historyApiFallback: true,\n        inline: true\n      }\n    }\n\n现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM\n\n    npm install --save react react-dom\n\n使用ES6的语法，更新Greeter.js并返回一个React组件\n\n    //Greeter,js\n    import React, {Component} from 'react'\n    import config from './config.json';\n    \n    class Greeter extends Component{\n      render() {\n        return (\n          <div>\n            {config.greetText}\n          </div>\n        );\n      }\n    }\n    \n    export default Greeter\n\n使用ES6的模块定义和渲染Greeter模块\n\n    //main.js\n    import React from 'react';\n    import {render} from 'react-dom';\n    import Greeter from './Greeter';\n    \n    render(<Greeter />, document.getElementById('App'));\n\n## Babel的配置选项\nBabel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 \".babelrc\" 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用.babelrc里的babel配置选项），如下：\n\n    // webpack.config.js\n    module.exports = {\n      devtool: 'eval-source-map',\n    \n      entry:  __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/public\",\n        filename: \"index.js\"\n      },\n    \n      module: {\n        loaders: [\n          {\n            test: /\\.json$/,\n            loader: \"json\"\n          },\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel'\n          }\n        ]\n      },\n    \n      devServer: {...} // Omitted for brevity\n    }\n\n    //.babelrc\n    {\n      \"presets\": [\"react\", \"es2015\"]\n    }\n\n到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那哪些是模块呢。 \n\n# 一切皆模块\nWebpack有一个不可不说的优点，它把所有的文件都可以当做模块处理，包括你的JavaScript代码，也包括CSS和fonts以及图片等等等，只有通过合适的loaders，它们都可以被当做模块被处理。\n## CSS\nwebpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似@import 和 url(...)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。\n\n继续上面的例子\n\n    //安装\n    npm install --save-dev style-loader css-loader\n \n    //使用\n    module.exports = {\n      devtool: 'eval-source-map',\n      entry:  __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/build\",\n        filename: \"index.js\"\n      },\n    \n      module: {\n        loaders: [\n          {\n            test: /\\.json$/,\n            loader: \"json\"\n          },\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel'\n          },\n          {\n            test: /\\.css$/,\n            loader: 'style!css'//添加对样式表的处理\n          }\n        ]\n      },\n    \n      devServer: {...}\n    }\n\n>注：感叹号的作用在于使同一文件能够使用不同类型的loader\n\n接下来，在app文件夹里创建一个名字为\"main.css\"的文件，对一些元素设置样式\n\n    html {\n      box-sizing: border-box;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    *, *:before, *:after {\n      box-sizing: inherit;\n    }\n    body {\n      margin: 0;\n      font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    }\n    h1, h2, h3, h4, h5, h6, p, ul {\n      margin: 0;\n      padding: 0;\n    }\n\n你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下\n\n    //main.js\n    import React from 'react';\n    import {render} from 'react-dom';\n    import Greeter from './Greeter';\n    \n    import './main.css';//使用require导入css文件\n    \n    render(<Greeter />, document.getElementById('App'));  \n\n>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。\n不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。\n\n## CSS module\n在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，且基于优化工具，依赖管理和加载管理可以自动完成。\n不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧是巨大且充满了全局类名，这使得维护和修改都非常困难和复杂。\n\n最近有一个叫做 CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递都所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中具有相同的类名可能会造成的问题。具体的代码如下\n\n    module.exports = {\n      devtool: 'eval-source-map',\n    \n      entry:  __dirname + \"/app/main.js\",\n      output: {...},\n    \n      module: {\n        loaders: [\n          {\n            test: /\\.json$/,\n            loader: \"json\"\n          },\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel'\n          },\n          {\n            test: /\\.css$/,\n            loader: 'style!css?modules'//跟前面相比就在后面加上了?modules\n          }\n        ]\n      },\n    \n      devServer: {...}\n    }\n\n创建一个Greeter.css文件\n\n    .root {\n      background-color: #eee;\n      padding: 10px;\n      border: 3px solid #ccc;\n    }\n\n导入.root到Greeter.js中\n\n    import React, {Component} from 'react';\n    import config from './config.json';\n    import styles from './Greeter.css';//导入\n    \n    class Greeter extends Component{\n      render() {\n        return (\n          <div className={styles.root}>//添加类名\n            {config.greetText}\n          </div>\n        );\n      }\n    }\n    \n    export default Greeter   \n\n放心使用把，相同的类名也不会造成不同组件之间的污染。\nCSS modules 也是一个很大的主题，有兴趣的话可以去官方文档查看更多消息\n\n## CSS预处理器\n\nSass 和 Less之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，\n你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理loaders\n\n* Less Loader\n* Sass Loader\n* Stylus Loader\n\n不过其实也存在一个CSS的处理平台-PostCSS，它可以帮助你的CSS实现更多的功能，在其[CSS官方文档](https://github.com/postcss/postcss)可了解更多相关知识。\n\n举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。\n\n首先安装postcss-loader 和 autoprefixer（自动添加前缀的插件）\n\n    npm install --save-dev postcss-loader autoprefixer\n\n接下来，在webpack配置文件中进行设置，只需要新建一个postcss关键字，并在里面申明依赖的插件，如下，现在你写的css会自动根据Can i use里的数据添加不同前缀了。\n\n    //webpack配置文件\n    module.exports = {\n      devtool: 'eval-source-map',\n      entry: __dirname + \"/app/main.js\",\n      output: {...},\n    \n      module: {\n        loaders: [\n          {\n            test: /\\.json$/,\n            loader: \"json\"\n          },\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel'\n          },\n          {\n            test: /\\.css$/,\n            loader: 'style!css?modules!postcss'\n          }\n        ]\n      },\n    \n      postcss: [\n        require('autoprefixer')//调用autoprefixer插件\n      ],\n    \n      devServer: {...}\n    }\n\n到现在，本文已经涉及到处理JS的Babel和处理CSS的PostCSS，它们其实也是两个单独的平台，配合Webpack可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-Plugins\n\n# 插件（Plugins）\n插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。\nLoaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。\n\nWebpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。\n\n## 使用插件的方法\n要使用某个插件，我们需要通过npm安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续看例子，我们添加了一个实现版权声明的插件。\n\n    //webpack.config.js\n    var webpack = require('webpack');\n    \n    module.exports = {\n      devtool: 'eval-source-map',\n      entry:  __dirname + \"/app/main.js\",\n      output: {...},\n    \n      module: {\n        loaders: [\n          { test: /\\.json$/, loader: \"json\" },\n          { test: /\\.js$/, exclude: /node_modules/, loader: 'babel' },\n          { test: /\\.css$/, loader: 'style!css?modules!postcss' }//这里添加PostCSS\n        ]\n      },\n      postcss: [\n        require('autoprefixer')\n      ],\n    \n      plugins: [\n        new webpack.BannerPlugin(\"Copyright Flying Unicorns inc.\")//在这个数组中new一个就可以了\n      ],\n    \n      devServer: {...}\n    }\n\n通过这个插件，打包后的JS文件显示如下\n\n知道Webpack中的插件如何使用了，下面给大家推荐几个常用的插件\n## HtmlWebpackPlugin\n这个插件的作用是依据一个简单的模板，帮你生成最终的HTML5文件，这个文件中自动引用了你打包后的JS文件。每次编译都在文件名中插入一个不同的哈希值。\n\n安装\n\n    npm install --save-dev html-webpack-plugin\n\n这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些改变：\n\n1、移除public文件夹，利用此插件，HTML5文件会自动生成，此外CSS已经通过前面的操作打包到JS中了，public文件夹里。\n2、在app目录下，创建一个Html文件模板，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，在本例中我们命名模板文件名称为index.tmpl.html，模板源代码如下\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Webpack Sample Project</title>\n      </head>\n      <body>\n        <div id='App'>\n        </div>\n      </body>\n    </html>\n\n3、更新webpack的配置文件，方法同上,新建一个build文件夹用来存放最终的输出文件\n\n    var webpack = require('webpack');\n    var HtmlWebpackPlugin = require('html-webpack-plugin');\n    module.exports = {\n      devtool: 'eval-source-map',\n    \n      entry:  __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/build\",\n        filename: \"index.js\"\n      },\n    \n      module: {\n        loaders: [\n          { test: /\\.json$/, loader: \"json\" },\n          { test: /\\.js$/, exclude: /node_modules/, loader: 'babel' },\n          { test: /\\.css$/, loader: 'style!css?modules!postcss' }\n        ]\n      },\n      postcss: [\n        require('autoprefixer')\n      ],\n    \n      plugins: [\n        new HtmlWebpackPlugin({\n          template: __dirname + \"/app/index.tmpl.html\"//new 一个这个插件的实例，并传入相关的参数\n        })\n      ],\n    \n      devServer: {\n        colors: true,\n        historyApiFallback: true,\n        inline: true\n      }\n    }\n\n## Hot Module Replacement\n\nHot Module Replacement（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。\n在webpack中实现HMR也很简单，只需要做两项配置\n\n1、在webpack配置文件中添加HMR插件；\n2、在Webpack Dev Server中添加“hot”参数；\n\n不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。\n\n整理下我们的思路，具体实现方法如下\n\n* Babel和webpack是独立的工具\n* 二者可以一起工作\n* 二者都可以通过插件拓展功能\n* HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；\n* Babel有一个叫做react-transform-hrm的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作;\n\n更新我们的例子来实际看看如何配置\n\n    //webpack中的配置\n    var webpack = require('webpack');\n    var HtmlWebpackPlugin = require('html-webpack-plugin');\n    \n    module.exports = {\n      devtool: 'eval-source-map',\n      entry: __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle.js\"\n      },\n    \n      module: {\n        loaders: [\n          { test: /\\.json$/, loader: \"json\" },\n          { test: /\\.js$/, exclude: /node_modules/, loader: 'babel' },\n          { test: /\\.css$/, loader: 'style!css?modules!postcss' }\n        ]\n      },\n      postcss: [\n        require('autoprefixer')\n      ],\n    \n      plugins: [\n        new HtmlWebpackPlugin({\n          template: __dirname + \"/app/index.tmpl.html\"\n        }),\n        new webpack.HotModuleReplacementPlugin()//热加载插件\n      ],\n    \n      devServer: {\n        colors: true,\n        historyApiFallback: true,\n        inline: true,\n        hot: true\n      }\n    }\n\n安装react-transform-hmr\n\n    npm install --save-dev babel-plugin-react-transform react-transform-hmr\n\n配置Babel\n\n    {\n      \"presets\": [\"react\", \"es2015\"],\n      \"env\": {\n        \"development\": {\n        \"plugins\": [[\"react-transform\", {\n           \"transforms\": [{\n             \"transform\": \"react-transform-hmr\",\n    \n             \"imports\": [\"react\"],\n    \n             \"locals\": [\"module\"]\n           }]\n         }]]\n        }\n      }\n    }\n\n现在当你使用React时，可以热加载模块了\n\n# 产品阶段的构建\n目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。\n\n对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个“webpack.production.config.js”的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下\n\n    var webpack = require('webpack');\n    var HtmlWebpackPlugin = require('html-webpack-plugin');\n    \n    module.exports = {\n      entry: __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle.js\"\n      },\n    \n      module: {\n        loaders: [\n          {\n            test: /\\.json$/,\n            loader: \"json\"\n          },\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel'\n          },\n          {\n            test: /\\.css$/,\n            loader: 'style!css?modules!postcss'\n          }\n        ]\n      },\n      postcss: [\n        require('autoprefixer')\n      ],\n    \n      plugins: [\n        new HtmlWebpackPlugin({\n          template: __dirname + \"/app/index.tmpl.html\"\n        }),\n      ],\n    \n    }\n\n\n    //package.json\n    {\n      \"name\": \"webpack-sample-project\",\n      \"version\": \"1.0.0\",\n      \"description\": \"Sample webpack project\",\n      \"scripts\": {\n        \"start\": \"webpack-dev-server --progress\",\n        \"build\": \"NODE_ENV=production webpack --config ./webpack.production.config.js --progress\"\n      },\n      \"author\": \"Cássio Zen\",\n      \"license\": \"ISC\",\n      \"devDependencies\": {...},\n      \"dependencies\": {...}\n    }\n\n# 优化插件\nwebpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能\n\n* OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID\n* UglifyJsPlugin：压缩JS代码；\n* ExtractTextPlugin：分离CSS和JS文件\n\n我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装它们\n\n    npm install --save-dev extract-text-webpack-plugin  \n\n在配置文件的plugins后引用它们\n\n    var webpack = require('webpack');\n    var HtmlWebpackPlugin = require('html-webpack-plugin');\n    var ExtractTextPlugin = require('extract-text-webpack-plugin');\n    \n    module.exports = {\n      entry: __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle.js\"\n      },\n    \n      module: {\n        loaders: [\n          {\n            test: /\\.json$/,\n            loader: \"json\"\n          },\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel'\n          },\n          {\n            test: /\\.css$/,\n            loader: ExtractTextPlugin.extract('style', 'css?modules!postcss')\n          }\n        ]\n      },\n      postcss: [\n        require('autoprefixer')\n      ],\n    \n      plugins: [\n        new HtmlWebpackPlugin({\n          template: __dirname + \"/app/index.tmpl.html\"\n        }),\n        new webpack.optimize.OccurenceOrderPlugin(),\n        new webpack.optimize.UglifyJsPlugin(),\n        new ExtractTextPlugin(\"style.css\")\n      ]\n    }\n\n# 缓存\n缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）\n\nwebpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前\n\n    var webpack = require('webpack');\n    var HtmlWebpackPlugin = require('html-webpack-plugin');\n    var ExtractTextPlugin = require('extract-text-webpack-plugin');\n    \n    module.exports = {\n      entry: __dirname + \"/app/main.js\",\n      output: {\n        path: __dirname + \"/build\",\n        filename: \"[name]-[hash].js\"\n      },\n    \n      module: {\n        loaders: [\n          {\n            test: /\\.json$/,\n            loader: \"json\"\n          },\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel'\n          },\n          {\n            test: /\\.css$/,\n            loader: ExtractTextPlugin.extract('style', 'css?modules!postcss')\n          }\n        ]\n      },\n      postcss: [\n        require('autoprefixer')\n      ],\n    \n      plugins: [\n        new HtmlWebpackPlugin({\n          template: __dirname + \"/app/index.tmpl.html\"\n        }),\n        new webpack.optimize.OccurenceOrderPlugin(),\n        new webpack.optimize.UglifyJsPlugin(),\n        new ExtractTextPlugin(\"[name]-[hash].css\")\n      ]\n    }\n\n现在用户会有合理的缓存了。\n\n# 总结\n这是一篇好长的文章，谢谢你的耐心，能仔细看到了这里，大概半个月前我第一次自己一步步配置项目所需的Webpack后就一直想写一篇笔记做总结，几次动笔都不能让自己满意，总觉得写不清楚。直到看到本文的英文版Webpack for React，真的有多次豁然开朗的感觉，喜欢看原文的点链接就可以看了。其实关于Webpack本文讲述得仍不完全，不过相信你看完后已经进入Webpack的大门，能够更好的探索其它的关于Webpack的知识了。\n\n本文转载自 http://www.jianshu.com/p/42e11515c10f  \n","slug":"webpack 入门教程","published":1,"date":"2016-10-17T03:22:55.375Z","updated":"2016-10-18T08:07:08.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bp1gj0009i0bevjdlgqgt","content":"<p>目前，我正在学习用webpack搭建React-Native的环境，在众多的学习过程中，发现这个时期的代码更新速度非常的快，而且学习资料也有很多渐渐过时，而我，不得不在这些（旧）教程中掺杂着最新技术开始我漫长的埋坑之旅。</p>\n<p>以下资料来源于<a href=\"http://www.pro-react.com/materials/appendixA/\" target=\"_blank\" rel=\"external\">Webpack for React</a>、 <a href=\"http://blog.csdn.net/kun5706947/article/details/52596766\" target=\"_blank\" rel=\"external\">入门Webpack，看这篇就够了</a>，敬请参考:</p>\n<h1 id=\"什么是WebPack，为什么要使用它？\"><a href=\"#什么是WebPack，为什么要使用它？\" class=\"headerlink\" title=\"什么是WebPack，为什么要使用它？\"></a>什么是WebPack，为什么要使用它？</h1><h2 id=\"为什要使用WebPack\"><a href=\"#为什要使用WebPack\" class=\"headerlink\" title=\"为什要使用WebPack\"></a>为什要使用WebPack</h2><p>现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法</p>\n<ul>\n<li>模块化，让我们可以把复杂的程序细化为小的文件;</li>\n<li>类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能能装换为JavaScript文件使浏览器可以识别；</li>\n<li>Scss，less等CSS预处理器</li>\n</ul>\n<p>这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常反锁的，这就为WebPack类的工具的出现提供了需求。</p>\n<h2 id=\"什么是Webpack\"><a href=\"#什么是Webpack\" class=\"headerlink\" title=\"什么是Webpack\"></a>什么是Webpack</h2><p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。</p>\n<h2 id=\"WebPack和Grunt以及Gulp相比有什么特性\"><a href=\"#WebPack和Grunt以及Gulp相比有什么特性\" class=\"headerlink\" title=\"WebPack和Grunt以及Gulp相比有什么特性\"></a>WebPack和Grunt以及Gulp相比有什么特性</h2><p>其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack可以替代Gulp/Grunt类的工具。</p>\n<p>Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，这个工具之后可以自动替你完成这些任务。</p>\n<p> <img src=\"../../../../images/webpack/picture1.png\" alt=\"Grunt和Gulp的工作流程\"><br><a id=\"more\"></a><br> Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个浏览器可识别的JavaScript文件。</p>\n<p>  <img src=\"../../../../images/webpack/picture2.png\" alt=\"Webpack工作方式\"></p>\n<p>如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。</p>\n<h1 id=\"开始使用Webpack\"><a href=\"#开始使用Webpack\" class=\"headerlink\" title=\"开始使用Webpack\"></a>开始使用Webpack</h1><p>初步了解了Webpack工作方式后，我们一步步的开始学习使用Webpack。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample progect），在终端中转到该文件夹后执行下述指令就可以完成安装。</p>\n<pre><code>//全局安装\nnpm install -g webpack\n//安装到你的项目目录\nnpm install --save-dev webpack\n</code></pre><h2 id=\"正式使用Webpack前的准备\"><a href=\"#正式使用Webpack前的准备\" class=\"headerlink\" title=\"正式使用Webpack前的准备\"></a>正式使用Webpack前的准备</h2><p>在上述练习文件夹中创建一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用<code>npm</code><br><code>init</code>命令可以自动创建这个package.json文件</p>\n<pre><code>npm init\n</code></pre><p>输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。</p>\n<p>1、package.json文件已经就绪，我们在本项目中安装Webpack作为依赖包</p>\n<pre><code>// 安装Webpack\nnpm install --save-dev webpack\n</code></pre><p>2、回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中，此时项目结构如下图所示</p>\n<p> <img src=\"../../../../images/webpack/picture3.png\" alt=\"项目结构\"></p>\n<p>index.html文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（index.js）</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;React-Native&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;App&quot;&gt;&lt;/div&gt;\n    &lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>Greeter.js只包括一个用来返回包含问候信息的html元素的函数。</p>\n<pre><code>// Greeter.js\nmodule.exports=&quot;Hi,World!&quot;;\n</code></pre><p>main.js用来把Greeter模块返回的节点插入页面。</p>\n<pre><code>//main.js \nvar greeter=require(&apos;./Greeter.js&apos;);\ndocument.getElementById(&apos;App&apos;).innerHTML=greeter;\n</code></pre><h2 id=\"正式使用Webpack\"><a href=\"#正式使用Webpack\" class=\"headerlink\" title=\"正式使用Webpack\"></a>正式使用Webpack</h2><p>webpack可以在终端中使用，其最基础的命令是</p>\n<pre><code>webpack {entry file/入口文件} {destination for bundled file/存放bundle.js的地方,我们这里用index.js}\n</code></pre><p>只需要指定一个入口文件，webpack将自动识别项目所依赖的其它文件，不过需要注意的是如果你的webpack没有进行全局安装，那么当你在终端中使用此命令时，需要额外指定其在node_modules中的地址，继续上面的例子，在终端中属于如下命令</p>\n<pre><code>//webpack非全局安装的情况\nnode_modules/.bin/webpack app/main.js public/index.js\n</code></pre><p>结果如下</p>\n<p><img src=\"../../../../images/webpack/picture4.png\" alt=\"termialResult1\"></p>\n<p>可以看出webpack同时编译了main.js和Greeter,js,现在打开index.html,可以看到如下结果</p>\n<p><img src=\"../../../../images/webpack/picture5.png\" alt=\"htmlResult1\"></p>\n<p>有没有很激动，已经成功的使用Webpack打包了一个文件了。不过如果在终端中进行复杂的操作，还是不太方便且容易出错的，接下来看看Webpack的另一种使用方法。</p>\n<h2 id=\"通过配置文件来使用Webpack\"><a href=\"#通过配置文件来使用Webpack\" class=\"headerlink\" title=\"通过配置文件来使用Webpack\"></a>通过配置文件来使用Webpack</h2><p>Webpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。</p>\n<p>还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。</p>\n<pre><code>module.exports = {\n    entry:  __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件\n    output: {\n    path: __dirname + &quot;/public&quot;,//打包后的文件存放的地方\n    filename: &quot;index.js&quot;//打包后输出文件的文件名\n    }\n}\n</code></pre><blockquote>\n<p>注：“__dirname”是Node.js中的一个全局变量，它指向当前执行脚本所在的目录。</p>\n</blockquote>\n<p>现在如果你需要打包文件只需要在终端里你运行<code>webpack(非全局安装需使用node_modules/.bin/webpack)</code>命令就可以了，这条命令会自动参考webpack.config.js文件中的配置选项打包你的项目，输出结果如下</p>\n<p><img src=\"../../../../images/webpack/picture6.png\" alt=\"webpack\"></p>\n<p>又学会了一种使用Webpack的方法，而且不用管那烦人的命令行参数了，有没有感觉很爽。有没有想过如果可以连webpack(非全局安装需使用node_modules/.bin/webpack)这条命令都可以不用，那种感觉会不会更爽~，继续看下文。</p>\n<h2 id=\"更快捷的执行打包任务\"><a href=\"#更快捷的执行打包任务\" class=\"headerlink\" title=\"更快捷的执行打包任务\"></a>更快捷的执行打包任务</h2><p>执行类似于node_modules/.bin/webpack这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是<code>npm</code>可以引导任务执行，对其进行配置后可以使用简单的<code>npm start</code>命令来代替这些繁琐的命令。在package.json中对<code>npm</code>的脚本部分进行相关设置即可，设置方法如下。</p>\n<pre><code>{\n  &quot;name&quot;: &quot;react-app&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;尝试搭建一次react-native环境&quot;,\n  &quot;main&quot;: &quot;main.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;webpack&quot;\n  },\n  &quot;author&quot;: &quot;FoxSnower&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;devDependencies&quot;: {\n    &quot;webpack&quot;: &quot;^1.13.2&quot;\n  }\n}\n</code></pre><blockquote>\n<p>注：package.json中的脚本部分已经默认在命令前添加了node_modules/.bin路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。</p>\n</blockquote>\n<p>npm的<code>start</code>是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用<code>npm start</code>就可以执行相关命令，如果对应的此脚本名称不是<code>start</code>，想要在命令行中运行时，需要这样用<code>npm run {script name}</code>如<code>npm run build</code>，以下是执行<code>npm start</code>后命令行的输出显示</p>\n<p><img src=\"../../../../images/webpack/picture7.png\" alt=\"npmStartTermialResult\"></p>\n<p>现在只需要使用<code>npm start</code>就可以打包文件了，有没有觉得webpack也不过如此嘛，不过不要太小瞧Webpack，其强大的功能包含在其一系列可供配置的选项中，我们一项项来看。</p>\n<h1 id=\"Webpack的强大功能\"><a href=\"#Webpack的强大功能\" class=\"headerlink\" title=\"Webpack的强大功能\"></a>Webpack的强大功能</h1><h2 id=\"生成Source-Maps（使调试更容易）\"><a href=\"#生成Source-Maps（使调试更容易）\" class=\"headerlink\" title=\"生成Source Maps（使调试更容易）\"></a>生成Source Maps（使调试更容易）</h2><p>开发总是离不开调试，如果可以更加方便的调试当然就能提高开发效率，不过打包后的文件有时候你是不容易找到出错了的地方对应的源代码的位置的，Source Maps就是来帮我们解决这个问题的。<br>通过简单的配置后，Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。</p>\n<p>在webpack的配置文件中配置source maps，需要配置devtool，它有以下四种不同的配置选项，各具优缺点，描述如下：</p>\n<p><img src=\"../../../../images/webpack/picture8.png\" alt=\"devtool配置选项\"></p>\n<p>正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的构建速度的后果就是对打包后的文件的的执行有一定影响。</p>\n<p>在学习阶段以及在小到中性的项目上，eval-source-map是一个很好的选项，不过记得只在开发阶段使用它，继续上面的例子，进行如下配置</p>\n<pre><code>module.exports = {\n  devtool: &apos;eval-source-map&apos;,//配置生成Source Maps，选择合适的选项\n  entry:  __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/public&quot;,\n    filename: &quot;bundle.js&quot;\n  }\n}\n</code></pre><blockquote>\n<p>cheap-module-eval-source-map方法构建速度更快，但是不利于调试，推荐在大型项目考虑da时间成本是使用。</p>\n</blockquote>\n<h2 id=\"使用webpack构建本地服务器\"><a href=\"#使用webpack构建本地服务器\" class=\"headerlink\" title=\"使用webpack构建本地服务器\"></a>使用webpack构建本地服务器</h2><p>想不想让你的浏览器监测你都代码的修改，并自动刷新修改后的结果，其实Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖</p>\n<pre><code>npm install --save-dev webpack-dev-server\n</code></pre><p>devserver作为webpack配置选项中的一项，具有以下配置选项</p>\n<p><img src=\"../../../../images/webpack/picture9.png\" alt=\"devserver配置选项\"></p>\n<p>继续把这些命令加到webpack的配置文件中，现在的配置文件如下所示</p>\n<pre><code>module.exports={\n    devtool:&apos;eval-source-map&apos;,//配置生成Source Maps，选择合适的选项\n\n    entry:__dirname+&quot;/app/main.js&quot;,//唯一的入口文件\n    output:{\n        path:__dirname+&quot;/public&quot;,//打包后的文件存放的地方\n        filename:&quot;index.js&quot;//打包后输出的文件名\n    },\n    devServer:{\n        contentBase:&apos;./public&apos;,//本地服务器所加载的页面所在的目录\n        color:true,//终端中输出结果为彩色\n        historyApiFallBack:true,//不跳转\n        inline:true//实时刷新\n    }\n}\n</code></pre><h1 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h1><h2 id=\"鼎鼎大名的Loaders登场了！\"><a href=\"#鼎鼎大名的Loaders登场了！\" class=\"headerlink\" title=\"鼎鼎大名的Loaders登场了！\"></a>鼎鼎大名的Loaders登场了！</h2><p>Loaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。</p>\n<p>Loaders需要单独安装并且需要在webpack.config.js下的modules关键字下进行配置，Loaders的配置选项包括以下几方面：</p>\n<ul>\n<li><code>test</code>：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）</li>\n<li><code>loader</code>：loader的名称（必须）</li>\n<li><code>include/exclude</code>:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>\n<li><code>query</code>：为loaders提供额外的设置选项（可选）</li>\n</ul>\n<p>继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下</p>\n<pre><code>//安装可以装换JSON的loader\nnpm install --save-dev json-loader\n</code></pre><p>创建带有问候信息的JSON文件(命名为config.json)</p>\n<pre><code>//config.json\n{\n  &quot;greetText&quot;: &quot;Hi there and greetings from JSON!&quot;\n}\n</code></pre><p>更新后的Greeter.js</p>\n<pre><code>var config = require(&apos;./config.json&apos;);\n\nmodule.exports = function() {\n  var greet = document.createElement(&apos;div&apos;);\n  greet.textContent = config.greetText;\n  return greet;\n};\n</code></pre><p>Loaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。</p>\n<h2 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h2><p>Babel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：</p>\n<ul>\n<li>一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；</li>\n<li>使用基于JavaScript进行了拓展的语言，比如React的JSX</li>\n</ul>\n<h2 id=\"Babel的安装与配置\"><a href=\"#Babel的安装与配置\" class=\"headerlink\" title=\"Babel的安装与配置\"></a>Babel的安装与配置</h2><p>Babel其实是几个模块化的包，其核心功能位于称为babel-core的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。</p>\n<p>我们先来一次性安装这些依赖包</p>\n<pre><code>// npm一次性安装多个依赖模块，模块之间用空格隔开\nnpm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react\n</code></pre><p>在webpack中配置Babel的方法如下</p>\n<pre><code>module.exports = {\n  devtool: &apos;eval-source-map&apos;,\n\n  entry:  __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/public&quot;,\n    filename: &quot;index.js&quot;\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: &quot;json&quot;\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: &apos;babel&apos;,//在webpack的module部分的loaders里进行配置即可\n        query: {\n          presets: [&apos;es2015&apos;,&apos;react&apos;]\n        }\n      }\n    ]\n  },\n\n  devServer: {\n    contentBase: &quot;./public&quot;,\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n</code></pre><p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM</p>\n<pre><code>npm install --save react react-dom\n</code></pre><p>使用ES6的语法，更新Greeter.js并返回一个React组件</p>\n<pre><code>//Greeter,js\nimport React, {Component} from &apos;react&apos;\nimport config from &apos;./config.json&apos;;\n\nclass Greeter extends Component{\n  render() {\n    return (\n      &lt;div&gt;\n        {config.greetText}\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default Greeter\n</code></pre><p>使用ES6的模块定义和渲染Greeter模块</p>\n<pre><code>//main.js\nimport React from &apos;react&apos;;\nimport {render} from &apos;react-dom&apos;;\nimport Greeter from &apos;./Greeter&apos;;\n\nrender(&lt;Greeter /&gt;, document.getElementById(&apos;App&apos;));\n</code></pre><h2 id=\"Babel的配置选项\"><a href=\"#Babel的配置选项\" class=\"headerlink\" title=\"Babel的配置选项\"></a>Babel的配置选项</h2><p>Babel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用.babelrc里的babel配置选项），如下：</p>\n<pre><code>// webpack.config.js\nmodule.exports = {\n  devtool: &apos;eval-source-map&apos;,\n\n  entry:  __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/public&quot;,\n    filename: &quot;index.js&quot;\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: &quot;json&quot;\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: &apos;babel&apos;\n      }\n    ]\n  },\n\n  devServer: {...} // Omitted for brevity\n}\n\n//.babelrc\n{\n  &quot;presets&quot;: [&quot;react&quot;, &quot;es2015&quot;]\n}\n</code></pre><p>到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那哪些是模块呢。 </p>\n<h1 id=\"一切皆模块\"><a href=\"#一切皆模块\" class=\"headerlink\" title=\"一切皆模块\"></a>一切皆模块</h1><p>Webpack有一个不可不说的优点，它把所有的文件都可以当做模块处理，包括你的JavaScript代码，也包括CSS和fonts以及图片等等等，只有通过合适的loaders，它们都可以被当做模块被处理。</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><p>webpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似@import 和 url(…)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>\n<p>继续上面的例子</p>\n<pre><code>//安装\nnpm install --save-dev style-loader css-loader\n\n//使用\nmodule.exports = {\n  devtool: &apos;eval-source-map&apos;,\n  entry:  __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/build&quot;,\n    filename: &quot;index.js&quot;\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: &quot;json&quot;\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: &apos;babel&apos;\n      },\n      {\n        test: /\\.css$/,\n        loader: &apos;style!css&apos;//添加对样式表的处理\n      }\n    ]\n  },\n\n  devServer: {...}\n}\n</code></pre><blockquote>\n<p>注：感叹号的作用在于使同一文件能够使用不同类型的loader</p>\n</blockquote>\n<p>接下来，在app文件夹里创建一个名字为”main.css”的文件，对一些元素设置样式</p>\n<pre><code>html {\n  box-sizing: border-box;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\n*, *:before, *:after {\n  box-sizing: inherit;\n}\nbody {\n  margin: 0;\n  font-family: &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif;\n}\nh1, h2, h3, h4, h5, h6, p, ul {\n  margin: 0;\n  padding: 0;\n}\n</code></pre><p>你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下</p>\n<pre><code>//main.js\nimport React from &apos;react&apos;;\nimport {render} from &apos;react-dom&apos;;\nimport Greeter from &apos;./Greeter&apos;;\n\nimport &apos;./main.css&apos;;//使用require导入css文件\n\nrender(&lt;Greeter /&gt;, document.getElementById(&apos;App&apos;));  \n</code></pre><blockquote>\n<p>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。<br>不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。</p>\n</blockquote>\n<h2 id=\"CSS-module\"><a href=\"#CSS-module\" class=\"headerlink\" title=\"CSS module\"></a>CSS module</h2><p>在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，且基于优化工具，依赖管理和加载管理可以自动完成。<br>不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧是巨大且充满了全局类名，这使得维护和修改都非常困难和复杂。</p>\n<p>最近有一个叫做 CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递都所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中具有相同的类名可能会造成的问题。具体的代码如下</p>\n<pre><code>module.exports = {\n  devtool: &apos;eval-source-map&apos;,\n\n  entry:  __dirname + &quot;/app/main.js&quot;,\n  output: {...},\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: &quot;json&quot;\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: &apos;babel&apos;\n      },\n      {\n        test: /\\.css$/,\n        loader: &apos;style!css?modules&apos;//跟前面相比就在后面加上了?modules\n      }\n    ]\n  },\n\n  devServer: {...}\n}\n</code></pre><p>创建一个Greeter.css文件</p>\n<pre><code>.root {\n  background-color: #eee;\n  padding: 10px;\n  border: 3px solid #ccc;\n}\n</code></pre><p>导入.root到Greeter.js中</p>\n<pre><code>import React, {Component} from &apos;react&apos;;\nimport config from &apos;./config.json&apos;;\nimport styles from &apos;./Greeter.css&apos;;//导入\n\nclass Greeter extends Component{\n  render() {\n    return (\n      &lt;div className={styles.root}&gt;//添加类名\n        {config.greetText}\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default Greeter   \n</code></pre><p>放心使用把，相同的类名也不会造成不同组件之间的污染。<br>CSS modules 也是一个很大的主题，有兴趣的话可以去官方文档查看更多消息</p>\n<h2 id=\"CSS预处理器\"><a href=\"#CSS预处理器\" class=\"headerlink\" title=\"CSS预处理器\"></a>CSS预处理器</h2><p>Sass 和 Less之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，<br>你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理loaders</p>\n<ul>\n<li>Less Loader</li>\n<li>Sass Loader</li>\n<li>Stylus Loader</li>\n</ul>\n<p>不过其实也存在一个CSS的处理平台-PostCSS，它可以帮助你的CSS实现更多的功能，在其<a href=\"https://github.com/postcss/postcss\" target=\"_blank\" rel=\"external\">CSS官方文档</a>可了解更多相关知识。</p>\n<p>举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。</p>\n<p>首先安装postcss-loader 和 autoprefixer（自动添加前缀的插件）</p>\n<pre><code>npm install --save-dev postcss-loader autoprefixer\n</code></pre><p>接下来，在webpack配置文件中进行设置，只需要新建一个postcss关键字，并在里面申明依赖的插件，如下，现在你写的css会自动根据Can i use里的数据添加不同前缀了。</p>\n<pre><code>//webpack配置文件\nmodule.exports = {\n  devtool: &apos;eval-source-map&apos;,\n  entry: __dirname + &quot;/app/main.js&quot;,\n  output: {...},\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: &quot;json&quot;\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: &apos;babel&apos;\n      },\n      {\n        test: /\\.css$/,\n        loader: &apos;style!css?modules!postcss&apos;\n      }\n    ]\n  },\n\n  postcss: [\n    require(&apos;autoprefixer&apos;)//调用autoprefixer插件\n  ],\n\n  devServer: {...}\n}\n</code></pre><p>到现在，本文已经涉及到处理JS的Babel和处理CSS的PostCSS，它们其实也是两个单独的平台，配合Webpack可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-Plugins</p>\n<h1 id=\"插件（Plugins）\"><a href=\"#插件（Plugins）\" class=\"headerlink\" title=\"插件（Plugins）\"></a>插件（Plugins）</h1><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。<br>Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p>\n<p>Webpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。</p>\n<h2 id=\"使用插件的方法\"><a href=\"#使用插件的方法\" class=\"headerlink\" title=\"使用插件的方法\"></a>使用插件的方法</h2><p>要使用某个插件，我们需要通过npm安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续看例子，我们添加了一个实现版权声明的插件。</p>\n<pre><code>//webpack.config.js\nvar webpack = require(&apos;webpack&apos;);\n\nmodule.exports = {\n  devtool: &apos;eval-source-map&apos;,\n  entry:  __dirname + &quot;/app/main.js&quot;,\n  output: {...},\n\n  module: {\n    loaders: [\n      { test: /\\.json$/, loader: &quot;json&quot; },\n      { test: /\\.js$/, exclude: /node_modules/, loader: &apos;babel&apos; },\n      { test: /\\.css$/, loader: &apos;style!css?modules!postcss&apos; }//这里添加PostCSS\n    ]\n  },\n  postcss: [\n    require(&apos;autoprefixer&apos;)\n  ],\n\n  plugins: [\n    new webpack.BannerPlugin(&quot;Copyright Flying Unicorns inc.&quot;)//在这个数组中new一个就可以了\n  ],\n\n  devServer: {...}\n}\n</code></pre><p>通过这个插件，打包后的JS文件显示如下</p>\n<p>知道Webpack中的插件如何使用了，下面给大家推荐几个常用的插件</p>\n<h2 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h2><p>这个插件的作用是依据一个简单的模板，帮你生成最终的HTML5文件，这个文件中自动引用了你打包后的JS文件。每次编译都在文件名中插入一个不同的哈希值。</p>\n<p>安装</p>\n<pre><code>npm install --save-dev html-webpack-plugin\n</code></pre><p>这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些改变：</p>\n<p>1、移除public文件夹，利用此插件，HTML5文件会自动生成，此外CSS已经通过前面的操作打包到JS中了，public文件夹里。<br>2、在app目录下，创建一个Html文件模板，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，在本例中我们命名模板文件名称为index.tmpl.html，模板源代码如下</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;Webpack Sample Project&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=&apos;App&apos;&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>3、更新webpack的配置文件，方法同上,新建一个build文件夹用来存放最终的输出文件</p>\n<pre><code>var webpack = require(&apos;webpack&apos;);\nvar HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\nmodule.exports = {\n  devtool: &apos;eval-source-map&apos;,\n\n  entry:  __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/build&quot;,\n    filename: &quot;index.js&quot;\n  },\n\n  module: {\n    loaders: [\n      { test: /\\.json$/, loader: &quot;json&quot; },\n      { test: /\\.js$/, exclude: /node_modules/, loader: &apos;babel&apos; },\n      { test: /\\.css$/, loader: &apos;style!css?modules!postcss&apos; }\n    ]\n  },\n  postcss: [\n    require(&apos;autoprefixer&apos;)\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + &quot;/app/index.tmpl.html&quot;//new 一个这个插件的实例，并传入相关的参数\n    })\n  ],\n\n  devServer: {\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n</code></pre><h2 id=\"Hot-Module-Replacement\"><a href=\"#Hot-Module-Replacement\" class=\"headerlink\" title=\"Hot Module Replacement\"></a>Hot Module Replacement</h2><p>Hot Module Replacement（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。<br>在webpack中实现HMR也很简单，只需要做两项配置</p>\n<p>1、在webpack配置文件中添加HMR插件；<br>2、在Webpack Dev Server中添加“hot”参数；</p>\n<p>不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。</p>\n<p>整理下我们的思路，具体实现方法如下</p>\n<ul>\n<li>Babel和webpack是独立的工具</li>\n<li>二者可以一起工作</li>\n<li>二者都可以通过插件拓展功能</li>\n<li>HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；</li>\n<li>Babel有一个叫做react-transform-hrm的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作;</li>\n</ul>\n<p>更新我们的例子来实际看看如何配置</p>\n<pre><code>//webpack中的配置\nvar webpack = require(&apos;webpack&apos;);\nvar HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\n\nmodule.exports = {\n  devtool: &apos;eval-source-map&apos;,\n  entry: __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/build&quot;,\n    filename: &quot;bundle.js&quot;\n  },\n\n  module: {\n    loaders: [\n      { test: /\\.json$/, loader: &quot;json&quot; },\n      { test: /\\.js$/, exclude: /node_modules/, loader: &apos;babel&apos; },\n      { test: /\\.css$/, loader: &apos;style!css?modules!postcss&apos; }\n    ]\n  },\n  postcss: [\n    require(&apos;autoprefixer&apos;)\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + &quot;/app/index.tmpl.html&quot;\n    }),\n    new webpack.HotModuleReplacementPlugin()//热加载插件\n  ],\n\n  devServer: {\n    colors: true,\n    historyApiFallback: true,\n    inline: true,\n    hot: true\n  }\n}\n</code></pre><p>安装react-transform-hmr</p>\n<pre><code>npm install --save-dev babel-plugin-react-transform react-transform-hmr\n</code></pre><p>配置Babel</p>\n<pre><code>{\n  &quot;presets&quot;: [&quot;react&quot;, &quot;es2015&quot;],\n  &quot;env&quot;: {\n    &quot;development&quot;: {\n    &quot;plugins&quot;: [[&quot;react-transform&quot;, {\n       &quot;transforms&quot;: [{\n         &quot;transform&quot;: &quot;react-transform-hmr&quot;,\n\n         &quot;imports&quot;: [&quot;react&quot;],\n\n         &quot;locals&quot;: [&quot;module&quot;]\n       }]\n     }]]\n    }\n  }\n}\n</code></pre><p>现在当你使用React时，可以热加载模块了</p>\n<h1 id=\"产品阶段的构建\"><a href=\"#产品阶段的构建\" class=\"headerlink\" title=\"产品阶段的构建\"></a>产品阶段的构建</h1><p>目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。</p>\n<p>对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个“webpack.production.config.js”的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下</p>\n<pre><code>var webpack = require(&apos;webpack&apos;);\nvar HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\n\nmodule.exports = {\n  entry: __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/build&quot;,\n    filename: &quot;bundle.js&quot;\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: &quot;json&quot;\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: &apos;babel&apos;\n      },\n      {\n        test: /\\.css$/,\n        loader: &apos;style!css?modules!postcss&apos;\n      }\n    ]\n  },\n  postcss: [\n    require(&apos;autoprefixer&apos;)\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + &quot;/app/index.tmpl.html&quot;\n    }),\n  ],\n\n}\n\n\n//package.json\n{\n  &quot;name&quot;: &quot;webpack-sample-project&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;Sample webpack project&quot;,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;webpack-dev-server --progress&quot;,\n    &quot;build&quot;: &quot;NODE_ENV=production webpack --config ./webpack.production.config.js --progress&quot;\n  },\n  &quot;author&quot;: &quot;Cássio Zen&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;devDependencies&quot;: {...},\n  &quot;dependencies&quot;: {...}\n}\n</code></pre><h1 id=\"优化插件\"><a href=\"#优化插件\" class=\"headerlink\" title=\"优化插件\"></a>优化插件</h1><p>webpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能</p>\n<ul>\n<li>OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</li>\n<li>UglifyJsPlugin：压缩JS代码；</li>\n<li>ExtractTextPlugin：分离CSS和JS文件</li>\n</ul>\n<p>我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装它们</p>\n<pre><code>npm install --save-dev extract-text-webpack-plugin  \n</code></pre><p>在配置文件的plugins后引用它们</p>\n<pre><code>var webpack = require(&apos;webpack&apos;);\nvar HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\nvar ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);\n\nmodule.exports = {\n  entry: __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/build&quot;,\n    filename: &quot;bundle.js&quot;\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: &quot;json&quot;\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: &apos;babel&apos;\n      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract(&apos;style&apos;, &apos;css?modules!postcss&apos;)\n      }\n    ]\n  },\n  postcss: [\n    require(&apos;autoprefixer&apos;)\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + &quot;/app/index.tmpl.html&quot;\n    }),\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.optimize.UglifyJsPlugin(),\n    new ExtractTextPlugin(&quot;style.css&quot;)\n  ]\n}\n</code></pre><h1 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h1><p>缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）</p>\n<p>webpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前</p>\n<pre><code>var webpack = require(&apos;webpack&apos;);\nvar HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\nvar ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);\n\nmodule.exports = {\n  entry: __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/build&quot;,\n    filename: &quot;[name]-[hash].js&quot;\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: &quot;json&quot;\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: &apos;babel&apos;\n      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract(&apos;style&apos;, &apos;css?modules!postcss&apos;)\n      }\n    ]\n  },\n  postcss: [\n    require(&apos;autoprefixer&apos;)\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + &quot;/app/index.tmpl.html&quot;\n    }),\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.optimize.UglifyJsPlugin(),\n    new ExtractTextPlugin(&quot;[name]-[hash].css&quot;)\n  ]\n}\n</code></pre><p>现在用户会有合理的缓存了。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这是一篇好长的文章，谢谢你的耐心，能仔细看到了这里，大概半个月前我第一次自己一步步配置项目所需的Webpack后就一直想写一篇笔记做总结，几次动笔都不能让自己满意，总觉得写不清楚。直到看到本文的英文版Webpack for React，真的有多次豁然开朗的感觉，喜欢看原文的点链接就可以看了。其实关于Webpack本文讲述得仍不完全，不过相信你看完后已经进入Webpack的大门，能够更好的探索其它的关于Webpack的知识了。</p>\n<p>本文转载自 <a href=\"http://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/42e11515c10f</a>  </p>\n","excerpt":"<p>目前，我正在学习用webpack搭建React-Native的环境，在众多的学习过程中，发现这个时期的代码更新速度非常的快，而且学习资料也有很多渐渐过时，而我，不得不在这些（旧）教程中掺杂着最新技术开始我漫长的埋坑之旅。</p>\n<p>以下资料来源于<a href=\"http://www.pro-react.com/materials/appendixA/\">Webpack for React</a>、 <a href=\"http://blog.csdn.net/kun5706947/article/details/52596766\">入门Webpack，看这篇就够了</a>，敬请参考:</p>\n<h1 id=\"什么是WebPack，为什么要使用它？\"><a href=\"#什么是WebPack，为什么要使用它？\" class=\"headerlink\" title=\"什么是WebPack，为什么要使用它？\"></a>什么是WebPack，为什么要使用它？</h1><h2 id=\"为什要使用WebPack\"><a href=\"#为什要使用WebPack\" class=\"headerlink\" title=\"为什要使用WebPack\"></a>为什要使用WebPack</h2><p>现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法</p>\n<ul>\n<li>模块化，让我们可以把复杂的程序细化为小的文件;</li>\n<li>类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能能装换为JavaScript文件使浏览器可以识别；</li>\n<li>Scss，less等CSS预处理器</li>\n</ul>\n<p>这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常反锁的，这就为WebPack类的工具的出现提供了需求。</p>\n<h2 id=\"什么是Webpack\"><a href=\"#什么是Webpack\" class=\"headerlink\" title=\"什么是Webpack\"></a>什么是Webpack</h2><p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。</p>\n<h2 id=\"WebPack和Grunt以及Gulp相比有什么特性\"><a href=\"#WebPack和Grunt以及Gulp相比有什么特性\" class=\"headerlink\" title=\"WebPack和Grunt以及Gulp相比有什么特性\"></a>WebPack和Grunt以及Gulp相比有什么特性</h2><p>其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack可以替代Gulp/Grunt类的工具。</p>\n<p>Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，这个工具之后可以自动替你完成这些任务。</p>\n<p> <img src=\"../../../../images/webpack/picture1.png\" alt=\"Grunt和Gulp的工作流程\"><br>","more":"<br> Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个浏览器可识别的JavaScript文件。</p>\n<p>  <img src=\"../../../../images/webpack/picture2.png\" alt=\"Webpack工作方式\"></p>\n<p>如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。</p>\n<h1 id=\"开始使用Webpack\"><a href=\"#开始使用Webpack\" class=\"headerlink\" title=\"开始使用Webpack\"></a>开始使用Webpack</h1><p>初步了解了Webpack工作方式后，我们一步步的开始学习使用Webpack。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample progect），在终端中转到该文件夹后执行下述指令就可以完成安装。</p>\n<pre><code>//全局安装\nnpm install -g webpack\n//安装到你的项目目录\nnpm install --save-dev webpack\n</code></pre><h2 id=\"正式使用Webpack前的准备\"><a href=\"#正式使用Webpack前的准备\" class=\"headerlink\" title=\"正式使用Webpack前的准备\"></a>正式使用Webpack前的准备</h2><p>在上述练习文件夹中创建一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用<code>npm</code><br><code>init</code>命令可以自动创建这个package.json文件</p>\n<pre><code>npm init\n</code></pre><p>输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。</p>\n<p>1、package.json文件已经就绪，我们在本项目中安装Webpack作为依赖包</p>\n<pre><code>// 安装Webpack\nnpm install --save-dev webpack\n</code></pre><p>2、回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中，此时项目结构如下图所示</p>\n<p> <img src=\"../../../../images/webpack/picture3.png\" alt=\"项目结构\"></p>\n<p>index.html文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（index.js）</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;React-Native&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;App&quot;&gt;&lt;/div&gt;\n    &lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>Greeter.js只包括一个用来返回包含问候信息的html元素的函数。</p>\n<pre><code>// Greeter.js\nmodule.exports=&quot;Hi,World!&quot;;\n</code></pre><p>main.js用来把Greeter模块返回的节点插入页面。</p>\n<pre><code>//main.js \nvar greeter=require(&apos;./Greeter.js&apos;);\ndocument.getElementById(&apos;App&apos;).innerHTML=greeter;\n</code></pre><h2 id=\"正式使用Webpack\"><a href=\"#正式使用Webpack\" class=\"headerlink\" title=\"正式使用Webpack\"></a>正式使用Webpack</h2><p>webpack可以在终端中使用，其最基础的命令是</p>\n<pre><code>webpack {entry file/入口文件} {destination for bundled file/存放bundle.js的地方,我们这里用index.js}\n</code></pre><p>只需要指定一个入口文件，webpack将自动识别项目所依赖的其它文件，不过需要注意的是如果你的webpack没有进行全局安装，那么当你在终端中使用此命令时，需要额外指定其在node_modules中的地址，继续上面的例子，在终端中属于如下命令</p>\n<pre><code>//webpack非全局安装的情况\nnode_modules/.bin/webpack app/main.js public/index.js\n</code></pre><p>结果如下</p>\n<p><img src=\"../../../../images/webpack/picture4.png\" alt=\"termialResult1\"></p>\n<p>可以看出webpack同时编译了main.js和Greeter,js,现在打开index.html,可以看到如下结果</p>\n<p><img src=\"../../../../images/webpack/picture5.png\" alt=\"htmlResult1\"></p>\n<p>有没有很激动，已经成功的使用Webpack打包了一个文件了。不过如果在终端中进行复杂的操作，还是不太方便且容易出错的，接下来看看Webpack的另一种使用方法。</p>\n<h2 id=\"通过配置文件来使用Webpack\"><a href=\"#通过配置文件来使用Webpack\" class=\"headerlink\" title=\"通过配置文件来使用Webpack\"></a>通过配置文件来使用Webpack</h2><p>Webpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。</p>\n<p>还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。</p>\n<pre><code>module.exports = {\n    entry:  __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件\n    output: {\n    path: __dirname + &quot;/public&quot;,//打包后的文件存放的地方\n    filename: &quot;index.js&quot;//打包后输出文件的文件名\n    }\n}\n</code></pre><blockquote>\n<p>注：“__dirname”是Node.js中的一个全局变量，它指向当前执行脚本所在的目录。</p>\n</blockquote>\n<p>现在如果你需要打包文件只需要在终端里你运行<code>webpack(非全局安装需使用node_modules/.bin/webpack)</code>命令就可以了，这条命令会自动参考webpack.config.js文件中的配置选项打包你的项目，输出结果如下</p>\n<p><img src=\"../../../../images/webpack/picture6.png\" alt=\"webpack\"></p>\n<p>又学会了一种使用Webpack的方法，而且不用管那烦人的命令行参数了，有没有感觉很爽。有没有想过如果可以连webpack(非全局安装需使用node_modules/.bin/webpack)这条命令都可以不用，那种感觉会不会更爽~，继续看下文。</p>\n<h2 id=\"更快捷的执行打包任务\"><a href=\"#更快捷的执行打包任务\" class=\"headerlink\" title=\"更快捷的执行打包任务\"></a>更快捷的执行打包任务</h2><p>执行类似于node_modules/.bin/webpack这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是<code>npm</code>可以引导任务执行，对其进行配置后可以使用简单的<code>npm start</code>命令来代替这些繁琐的命令。在package.json中对<code>npm</code>的脚本部分进行相关设置即可，设置方法如下。</p>\n<pre><code>{\n  &quot;name&quot;: &quot;react-app&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;尝试搭建一次react-native环境&quot;,\n  &quot;main&quot;: &quot;main.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;webpack&quot;\n  },\n  &quot;author&quot;: &quot;FoxSnower&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;devDependencies&quot;: {\n    &quot;webpack&quot;: &quot;^1.13.2&quot;\n  }\n}\n</code></pre><blockquote>\n<p>注：package.json中的脚本部分已经默认在命令前添加了node_modules/.bin路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。</p>\n</blockquote>\n<p>npm的<code>start</code>是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用<code>npm start</code>就可以执行相关命令，如果对应的此脚本名称不是<code>start</code>，想要在命令行中运行时，需要这样用<code>npm run {script name}</code>如<code>npm run build</code>，以下是执行<code>npm start</code>后命令行的输出显示</p>\n<p><img src=\"../../../../images/webpack/picture7.png\" alt=\"npmStartTermialResult\"></p>\n<p>现在只需要使用<code>npm start</code>就可以打包文件了，有没有觉得webpack也不过如此嘛，不过不要太小瞧Webpack，其强大的功能包含在其一系列可供配置的选项中，我们一项项来看。</p>\n<h1 id=\"Webpack的强大功能\"><a href=\"#Webpack的强大功能\" class=\"headerlink\" title=\"Webpack的强大功能\"></a>Webpack的强大功能</h1><h2 id=\"生成Source-Maps（使调试更容易）\"><a href=\"#生成Source-Maps（使调试更容易）\" class=\"headerlink\" title=\"生成Source Maps（使调试更容易）\"></a>生成Source Maps（使调试更容易）</h2><p>开发总是离不开调试，如果可以更加方便的调试当然就能提高开发效率，不过打包后的文件有时候你是不容易找到出错了的地方对应的源代码的位置的，Source Maps就是来帮我们解决这个问题的。<br>通过简单的配置后，Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。</p>\n<p>在webpack的配置文件中配置source maps，需要配置devtool，它有以下四种不同的配置选项，各具优缺点，描述如下：</p>\n<p><img src=\"../../../../images/webpack/picture8.png\" alt=\"devtool配置选项\"></p>\n<p>正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的构建速度的后果就是对打包后的文件的的执行有一定影响。</p>\n<p>在学习阶段以及在小到中性的项目上，eval-source-map是一个很好的选项，不过记得只在开发阶段使用它，继续上面的例子，进行如下配置</p>\n<pre><code>module.exports = {\n  devtool: &apos;eval-source-map&apos;,//配置生成Source Maps，选择合适的选项\n  entry:  __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/public&quot;,\n    filename: &quot;bundle.js&quot;\n  }\n}\n</code></pre><blockquote>\n<p>cheap-module-eval-source-map方法构建速度更快，但是不利于调试，推荐在大型项目考虑da时间成本是使用。</p>\n</blockquote>\n<h2 id=\"使用webpack构建本地服务器\"><a href=\"#使用webpack构建本地服务器\" class=\"headerlink\" title=\"使用webpack构建本地服务器\"></a>使用webpack构建本地服务器</h2><p>想不想让你的浏览器监测你都代码的修改，并自动刷新修改后的结果，其实Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖</p>\n<pre><code>npm install --save-dev webpack-dev-server\n</code></pre><p>devserver作为webpack配置选项中的一项，具有以下配置选项</p>\n<p><img src=\"../../../../images/webpack/picture9.png\" alt=\"devserver配置选项\"></p>\n<p>继续把这些命令加到webpack的配置文件中，现在的配置文件如下所示</p>\n<pre><code>module.exports={\n    devtool:&apos;eval-source-map&apos;,//配置生成Source Maps，选择合适的选项\n\n    entry:__dirname+&quot;/app/main.js&quot;,//唯一的入口文件\n    output:{\n        path:__dirname+&quot;/public&quot;,//打包后的文件存放的地方\n        filename:&quot;index.js&quot;//打包后输出的文件名\n    },\n    devServer:{\n        contentBase:&apos;./public&apos;,//本地服务器所加载的页面所在的目录\n        color:true,//终端中输出结果为彩色\n        historyApiFallBack:true,//不跳转\n        inline:true//实时刷新\n    }\n}\n</code></pre><h1 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h1><h2 id=\"鼎鼎大名的Loaders登场了！\"><a href=\"#鼎鼎大名的Loaders登场了！\" class=\"headerlink\" title=\"鼎鼎大名的Loaders登场了！\"></a>鼎鼎大名的Loaders登场了！</h2><p>Loaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。</p>\n<p>Loaders需要单独安装并且需要在webpack.config.js下的modules关键字下进行配置，Loaders的配置选项包括以下几方面：</p>\n<ul>\n<li><code>test</code>：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）</li>\n<li><code>loader</code>：loader的名称（必须）</li>\n<li><code>include/exclude</code>:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>\n<li><code>query</code>：为loaders提供额外的设置选项（可选）</li>\n</ul>\n<p>继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下</p>\n<pre><code>//安装可以装换JSON的loader\nnpm install --save-dev json-loader\n</code></pre><p>创建带有问候信息的JSON文件(命名为config.json)</p>\n<pre><code>//config.json\n{\n  &quot;greetText&quot;: &quot;Hi there and greetings from JSON!&quot;\n}\n</code></pre><p>更新后的Greeter.js</p>\n<pre><code>var config = require(&apos;./config.json&apos;);\n\nmodule.exports = function() {\n  var greet = document.createElement(&apos;div&apos;);\n  greet.textContent = config.greetText;\n  return greet;\n};\n</code></pre><p>Loaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。</p>\n<h2 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h2><p>Babel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：</p>\n<ul>\n<li>一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；</li>\n<li>使用基于JavaScript进行了拓展的语言，比如React的JSX</li>\n</ul>\n<h2 id=\"Babel的安装与配置\"><a href=\"#Babel的安装与配置\" class=\"headerlink\" title=\"Babel的安装与配置\"></a>Babel的安装与配置</h2><p>Babel其实是几个模块化的包，其核心功能位于称为babel-core的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。</p>\n<p>我们先来一次性安装这些依赖包</p>\n<pre><code>// npm一次性安装多个依赖模块，模块之间用空格隔开\nnpm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react\n</code></pre><p>在webpack中配置Babel的方法如下</p>\n<pre><code>module.exports = {\n  devtool: &apos;eval-source-map&apos;,\n\n  entry:  __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/public&quot;,\n    filename: &quot;index.js&quot;\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: &quot;json&quot;\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: &apos;babel&apos;,//在webpack的module部分的loaders里进行配置即可\n        query: {\n          presets: [&apos;es2015&apos;,&apos;react&apos;]\n        }\n      }\n    ]\n  },\n\n  devServer: {\n    contentBase: &quot;./public&quot;,\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n</code></pre><p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM</p>\n<pre><code>npm install --save react react-dom\n</code></pre><p>使用ES6的语法，更新Greeter.js并返回一个React组件</p>\n<pre><code>//Greeter,js\nimport React, {Component} from &apos;react&apos;\nimport config from &apos;./config.json&apos;;\n\nclass Greeter extends Component{\n  render() {\n    return (\n      &lt;div&gt;\n        {config.greetText}\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default Greeter\n</code></pre><p>使用ES6的模块定义和渲染Greeter模块</p>\n<pre><code>//main.js\nimport React from &apos;react&apos;;\nimport {render} from &apos;react-dom&apos;;\nimport Greeter from &apos;./Greeter&apos;;\n\nrender(&lt;Greeter /&gt;, document.getElementById(&apos;App&apos;));\n</code></pre><h2 id=\"Babel的配置选项\"><a href=\"#Babel的配置选项\" class=\"headerlink\" title=\"Babel的配置选项\"></a>Babel的配置选项</h2><p>Babel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用.babelrc里的babel配置选项），如下：</p>\n<pre><code>// webpack.config.js\nmodule.exports = {\n  devtool: &apos;eval-source-map&apos;,\n\n  entry:  __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/public&quot;,\n    filename: &quot;index.js&quot;\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: &quot;json&quot;\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: &apos;babel&apos;\n      }\n    ]\n  },\n\n  devServer: {...} // Omitted for brevity\n}\n\n//.babelrc\n{\n  &quot;presets&quot;: [&quot;react&quot;, &quot;es2015&quot;]\n}\n</code></pre><p>到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那哪些是模块呢。 </p>\n<h1 id=\"一切皆模块\"><a href=\"#一切皆模块\" class=\"headerlink\" title=\"一切皆模块\"></a>一切皆模块</h1><p>Webpack有一个不可不说的优点，它把所有的文件都可以当做模块处理，包括你的JavaScript代码，也包括CSS和fonts以及图片等等等，只有通过合适的loaders，它们都可以被当做模块被处理。</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><p>webpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似@import 和 url(…)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>\n<p>继续上面的例子</p>\n<pre><code>//安装\nnpm install --save-dev style-loader css-loader\n\n//使用\nmodule.exports = {\n  devtool: &apos;eval-source-map&apos;,\n  entry:  __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/build&quot;,\n    filename: &quot;index.js&quot;\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: &quot;json&quot;\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: &apos;babel&apos;\n      },\n      {\n        test: /\\.css$/,\n        loader: &apos;style!css&apos;//添加对样式表的处理\n      }\n    ]\n  },\n\n  devServer: {...}\n}\n</code></pre><blockquote>\n<p>注：感叹号的作用在于使同一文件能够使用不同类型的loader</p>\n</blockquote>\n<p>接下来，在app文件夹里创建一个名字为”main.css”的文件，对一些元素设置样式</p>\n<pre><code>html {\n  box-sizing: border-box;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\n*, *:before, *:after {\n  box-sizing: inherit;\n}\nbody {\n  margin: 0;\n  font-family: &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif;\n}\nh1, h2, h3, h4, h5, h6, p, ul {\n  margin: 0;\n  padding: 0;\n}\n</code></pre><p>你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下</p>\n<pre><code>//main.js\nimport React from &apos;react&apos;;\nimport {render} from &apos;react-dom&apos;;\nimport Greeter from &apos;./Greeter&apos;;\n\nimport &apos;./main.css&apos;;//使用require导入css文件\n\nrender(&lt;Greeter /&gt;, document.getElementById(&apos;App&apos;));  \n</code></pre><blockquote>\n<p>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。<br>不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。</p>\n</blockquote>\n<h2 id=\"CSS-module\"><a href=\"#CSS-module\" class=\"headerlink\" title=\"CSS module\"></a>CSS module</h2><p>在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，且基于优化工具，依赖管理和加载管理可以自动完成。<br>不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧是巨大且充满了全局类名，这使得维护和修改都非常困难和复杂。</p>\n<p>最近有一个叫做 CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递都所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中具有相同的类名可能会造成的问题。具体的代码如下</p>\n<pre><code>module.exports = {\n  devtool: &apos;eval-source-map&apos;,\n\n  entry:  __dirname + &quot;/app/main.js&quot;,\n  output: {...},\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: &quot;json&quot;\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: &apos;babel&apos;\n      },\n      {\n        test: /\\.css$/,\n        loader: &apos;style!css?modules&apos;//跟前面相比就在后面加上了?modules\n      }\n    ]\n  },\n\n  devServer: {...}\n}\n</code></pre><p>创建一个Greeter.css文件</p>\n<pre><code>.root {\n  background-color: #eee;\n  padding: 10px;\n  border: 3px solid #ccc;\n}\n</code></pre><p>导入.root到Greeter.js中</p>\n<pre><code>import React, {Component} from &apos;react&apos;;\nimport config from &apos;./config.json&apos;;\nimport styles from &apos;./Greeter.css&apos;;//导入\n\nclass Greeter extends Component{\n  render() {\n    return (\n      &lt;div className={styles.root}&gt;//添加类名\n        {config.greetText}\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default Greeter   \n</code></pre><p>放心使用把，相同的类名也不会造成不同组件之间的污染。<br>CSS modules 也是一个很大的主题，有兴趣的话可以去官方文档查看更多消息</p>\n<h2 id=\"CSS预处理器\"><a href=\"#CSS预处理器\" class=\"headerlink\" title=\"CSS预处理器\"></a>CSS预处理器</h2><p>Sass 和 Less之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，<br>你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理loaders</p>\n<ul>\n<li>Less Loader</li>\n<li>Sass Loader</li>\n<li>Stylus Loader</li>\n</ul>\n<p>不过其实也存在一个CSS的处理平台-PostCSS，它可以帮助你的CSS实现更多的功能，在其<a href=\"https://github.com/postcss/postcss\">CSS官方文档</a>可了解更多相关知识。</p>\n<p>举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。</p>\n<p>首先安装postcss-loader 和 autoprefixer（自动添加前缀的插件）</p>\n<pre><code>npm install --save-dev postcss-loader autoprefixer\n</code></pre><p>接下来，在webpack配置文件中进行设置，只需要新建一个postcss关键字，并在里面申明依赖的插件，如下，现在你写的css会自动根据Can i use里的数据添加不同前缀了。</p>\n<pre><code>//webpack配置文件\nmodule.exports = {\n  devtool: &apos;eval-source-map&apos;,\n  entry: __dirname + &quot;/app/main.js&quot;,\n  output: {...},\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: &quot;json&quot;\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: &apos;babel&apos;\n      },\n      {\n        test: /\\.css$/,\n        loader: &apos;style!css?modules!postcss&apos;\n      }\n    ]\n  },\n\n  postcss: [\n    require(&apos;autoprefixer&apos;)//调用autoprefixer插件\n  ],\n\n  devServer: {...}\n}\n</code></pre><p>到现在，本文已经涉及到处理JS的Babel和处理CSS的PostCSS，它们其实也是两个单独的平台，配合Webpack可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-Plugins</p>\n<h1 id=\"插件（Plugins）\"><a href=\"#插件（Plugins）\" class=\"headerlink\" title=\"插件（Plugins）\"></a>插件（Plugins）</h1><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。<br>Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p>\n<p>Webpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。</p>\n<h2 id=\"使用插件的方法\"><a href=\"#使用插件的方法\" class=\"headerlink\" title=\"使用插件的方法\"></a>使用插件的方法</h2><p>要使用某个插件，我们需要通过npm安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续看例子，我们添加了一个实现版权声明的插件。</p>\n<pre><code>//webpack.config.js\nvar webpack = require(&apos;webpack&apos;);\n\nmodule.exports = {\n  devtool: &apos;eval-source-map&apos;,\n  entry:  __dirname + &quot;/app/main.js&quot;,\n  output: {...},\n\n  module: {\n    loaders: [\n      { test: /\\.json$/, loader: &quot;json&quot; },\n      { test: /\\.js$/, exclude: /node_modules/, loader: &apos;babel&apos; },\n      { test: /\\.css$/, loader: &apos;style!css?modules!postcss&apos; }//这里添加PostCSS\n    ]\n  },\n  postcss: [\n    require(&apos;autoprefixer&apos;)\n  ],\n\n  plugins: [\n    new webpack.BannerPlugin(&quot;Copyright Flying Unicorns inc.&quot;)//在这个数组中new一个就可以了\n  ],\n\n  devServer: {...}\n}\n</code></pre><p>通过这个插件，打包后的JS文件显示如下</p>\n<p>知道Webpack中的插件如何使用了，下面给大家推荐几个常用的插件</p>\n<h2 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h2><p>这个插件的作用是依据一个简单的模板，帮你生成最终的HTML5文件，这个文件中自动引用了你打包后的JS文件。每次编译都在文件名中插入一个不同的哈希值。</p>\n<p>安装</p>\n<pre><code>npm install --save-dev html-webpack-plugin\n</code></pre><p>这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些改变：</p>\n<p>1、移除public文件夹，利用此插件，HTML5文件会自动生成，此外CSS已经通过前面的操作打包到JS中了，public文件夹里。<br>2、在app目录下，创建一个Html文件模板，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，在本例中我们命名模板文件名称为index.tmpl.html，模板源代码如下</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;Webpack Sample Project&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=&apos;App&apos;&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>3、更新webpack的配置文件，方法同上,新建一个build文件夹用来存放最终的输出文件</p>\n<pre><code>var webpack = require(&apos;webpack&apos;);\nvar HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\nmodule.exports = {\n  devtool: &apos;eval-source-map&apos;,\n\n  entry:  __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/build&quot;,\n    filename: &quot;index.js&quot;\n  },\n\n  module: {\n    loaders: [\n      { test: /\\.json$/, loader: &quot;json&quot; },\n      { test: /\\.js$/, exclude: /node_modules/, loader: &apos;babel&apos; },\n      { test: /\\.css$/, loader: &apos;style!css?modules!postcss&apos; }\n    ]\n  },\n  postcss: [\n    require(&apos;autoprefixer&apos;)\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + &quot;/app/index.tmpl.html&quot;//new 一个这个插件的实例，并传入相关的参数\n    })\n  ],\n\n  devServer: {\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n</code></pre><h2 id=\"Hot-Module-Replacement\"><a href=\"#Hot-Module-Replacement\" class=\"headerlink\" title=\"Hot Module Replacement\"></a>Hot Module Replacement</h2><p>Hot Module Replacement（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。<br>在webpack中实现HMR也很简单，只需要做两项配置</p>\n<p>1、在webpack配置文件中添加HMR插件；<br>2、在Webpack Dev Server中添加“hot”参数；</p>\n<p>不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。</p>\n<p>整理下我们的思路，具体实现方法如下</p>\n<ul>\n<li>Babel和webpack是独立的工具</li>\n<li>二者可以一起工作</li>\n<li>二者都可以通过插件拓展功能</li>\n<li>HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；</li>\n<li>Babel有一个叫做react-transform-hrm的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作;</li>\n</ul>\n<p>更新我们的例子来实际看看如何配置</p>\n<pre><code>//webpack中的配置\nvar webpack = require(&apos;webpack&apos;);\nvar HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\n\nmodule.exports = {\n  devtool: &apos;eval-source-map&apos;,\n  entry: __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/build&quot;,\n    filename: &quot;bundle.js&quot;\n  },\n\n  module: {\n    loaders: [\n      { test: /\\.json$/, loader: &quot;json&quot; },\n      { test: /\\.js$/, exclude: /node_modules/, loader: &apos;babel&apos; },\n      { test: /\\.css$/, loader: &apos;style!css?modules!postcss&apos; }\n    ]\n  },\n  postcss: [\n    require(&apos;autoprefixer&apos;)\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + &quot;/app/index.tmpl.html&quot;\n    }),\n    new webpack.HotModuleReplacementPlugin()//热加载插件\n  ],\n\n  devServer: {\n    colors: true,\n    historyApiFallback: true,\n    inline: true,\n    hot: true\n  }\n}\n</code></pre><p>安装react-transform-hmr</p>\n<pre><code>npm install --save-dev babel-plugin-react-transform react-transform-hmr\n</code></pre><p>配置Babel</p>\n<pre><code>{\n  &quot;presets&quot;: [&quot;react&quot;, &quot;es2015&quot;],\n  &quot;env&quot;: {\n    &quot;development&quot;: {\n    &quot;plugins&quot;: [[&quot;react-transform&quot;, {\n       &quot;transforms&quot;: [{\n         &quot;transform&quot;: &quot;react-transform-hmr&quot;,\n\n         &quot;imports&quot;: [&quot;react&quot;],\n\n         &quot;locals&quot;: [&quot;module&quot;]\n       }]\n     }]]\n    }\n  }\n}\n</code></pre><p>现在当你使用React时，可以热加载模块了</p>\n<h1 id=\"产品阶段的构建\"><a href=\"#产品阶段的构建\" class=\"headerlink\" title=\"产品阶段的构建\"></a>产品阶段的构建</h1><p>目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。</p>\n<p>对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个“webpack.production.config.js”的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下</p>\n<pre><code>var webpack = require(&apos;webpack&apos;);\nvar HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\n\nmodule.exports = {\n  entry: __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/build&quot;,\n    filename: &quot;bundle.js&quot;\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: &quot;json&quot;\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: &apos;babel&apos;\n      },\n      {\n        test: /\\.css$/,\n        loader: &apos;style!css?modules!postcss&apos;\n      }\n    ]\n  },\n  postcss: [\n    require(&apos;autoprefixer&apos;)\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + &quot;/app/index.tmpl.html&quot;\n    }),\n  ],\n\n}\n\n\n//package.json\n{\n  &quot;name&quot;: &quot;webpack-sample-project&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;Sample webpack project&quot;,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;webpack-dev-server --progress&quot;,\n    &quot;build&quot;: &quot;NODE_ENV=production webpack --config ./webpack.production.config.js --progress&quot;\n  },\n  &quot;author&quot;: &quot;Cássio Zen&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;devDependencies&quot;: {...},\n  &quot;dependencies&quot;: {...}\n}\n</code></pre><h1 id=\"优化插件\"><a href=\"#优化插件\" class=\"headerlink\" title=\"优化插件\"></a>优化插件</h1><p>webpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能</p>\n<ul>\n<li>OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</li>\n<li>UglifyJsPlugin：压缩JS代码；</li>\n<li>ExtractTextPlugin：分离CSS和JS文件</li>\n</ul>\n<p>我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装它们</p>\n<pre><code>npm install --save-dev extract-text-webpack-plugin  \n</code></pre><p>在配置文件的plugins后引用它们</p>\n<pre><code>var webpack = require(&apos;webpack&apos;);\nvar HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\nvar ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);\n\nmodule.exports = {\n  entry: __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/build&quot;,\n    filename: &quot;bundle.js&quot;\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: &quot;json&quot;\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: &apos;babel&apos;\n      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract(&apos;style&apos;, &apos;css?modules!postcss&apos;)\n      }\n    ]\n  },\n  postcss: [\n    require(&apos;autoprefixer&apos;)\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + &quot;/app/index.tmpl.html&quot;\n    }),\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.optimize.UglifyJsPlugin(),\n    new ExtractTextPlugin(&quot;style.css&quot;)\n  ]\n}\n</code></pre><h1 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h1><p>缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）</p>\n<p>webpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前</p>\n<pre><code>var webpack = require(&apos;webpack&apos;);\nvar HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\nvar ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);\n\nmodule.exports = {\n  entry: __dirname + &quot;/app/main.js&quot;,\n  output: {\n    path: __dirname + &quot;/build&quot;,\n    filename: &quot;[name]-[hash].js&quot;\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: &quot;json&quot;\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: &apos;babel&apos;\n      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract(&apos;style&apos;, &apos;css?modules!postcss&apos;)\n      }\n    ]\n  },\n  postcss: [\n    require(&apos;autoprefixer&apos;)\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + &quot;/app/index.tmpl.html&quot;\n    }),\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.optimize.UglifyJsPlugin(),\n    new ExtractTextPlugin(&quot;[name]-[hash].css&quot;)\n  ]\n}\n</code></pre><p>现在用户会有合理的缓存了。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这是一篇好长的文章，谢谢你的耐心，能仔细看到了这里，大概半个月前我第一次自己一步步配置项目所需的Webpack后就一直想写一篇笔记做总结，几次动笔都不能让自己满意，总觉得写不清楚。直到看到本文的英文版Webpack for React，真的有多次豁然开朗的感觉，喜欢看原文的点链接就可以看了。其实关于Webpack本文讲述得仍不完全，不过相信你看完后已经进入Webpack的大门，能够更好的探索其它的关于Webpack的知识了。</p>\n<p>本文转载自 <a href=\"http://www.jianshu.com/p/42e11515c10f\">http://www.jianshu.com/p/42e11515c10f</a>  </p>"},{"title":"在Sublime Text创建一个JavaScript控制台","keywords":"Sublime Text JavaScript 控制台 调试脚本 Node.js","_content":"\n\n\nJavaScript控制台可以方便的调试你的脚本，并获得结果。虽然Sublime Text为许多其他脚本内置了Build Systems，但并没有为JavaScript内置Build Systems。一般人都会创建一个.html文件，把.js文件引入进去，然后用浏览器的控制台来检查你脚本的运行结果。你需要不断的切换窗口、刷新浏览器。幸运的是，你可以简单快速的为Sublime Text创建一个JavaScript Build Systems。\n\n\n今天只分享一种通过Node.js来实现的方法，如果你是用的Mac OS X系统，还有一种通过JSC来实现的方法，这里就不做分享了。\n\nNode.js是一个在服务器上可以用来运行JavaScript的平台。然而，你也可以把它安装到本地计算机上，提供一种比使用浏览器相对来说简单一点方法来运行JavaScript并获得结果。\n\n### 一、创建Build Systems\n\n* 下载并运行Node。安装过程全部使用默认项。\n* 打开“Tools”–“Build System”–“New Build System”。\n* 清空Sublime Text打开的窗口，并把下面的代码粘贴进去。\n* 按 `Ctrl+S 保存文件，把文件保存在默认的User文件夹下，命名为“node.sublime-build”。现在你已经完成创建Build System来了。\n\n### 二、使用\n\n1. 在Sublime Text中打开你想运行的JavaScript文件。\n2. 打开“Tools”–“Build System”–“Node”，即你刚刚创建的Build System。\n3. 使用 Ctrl+B 或者工具栏中“Tools”下的“Build”运行你的JavaScript脚本。现在窗口的底部就会出现一个控制台，显示你脚本的运行结果。","source":"_posts/在Sublime Text创建一个JavaScript控制台.md","raw":"---\ntitle: 在Sublime Text创建一个JavaScript控制台\nkeywords: Sublime Text JavaScript 控制台 调试脚本 Node.js\n---\n\n\n\nJavaScript控制台可以方便的调试你的脚本，并获得结果。虽然Sublime Text为许多其他脚本内置了Build Systems，但并没有为JavaScript内置Build Systems。一般人都会创建一个.html文件，把.js文件引入进去，然后用浏览器的控制台来检查你脚本的运行结果。你需要不断的切换窗口、刷新浏览器。幸运的是，你可以简单快速的为Sublime Text创建一个JavaScript Build Systems。\n\n\n今天只分享一种通过Node.js来实现的方法，如果你是用的Mac OS X系统，还有一种通过JSC来实现的方法，这里就不做分享了。\n\nNode.js是一个在服务器上可以用来运行JavaScript的平台。然而，你也可以把它安装到本地计算机上，提供一种比使用浏览器相对来说简单一点方法来运行JavaScript并获得结果。\n\n### 一、创建Build Systems\n\n* 下载并运行Node。安装过程全部使用默认项。\n* 打开“Tools”–“Build System”–“New Build System”。\n* 清空Sublime Text打开的窗口，并把下面的代码粘贴进去。\n* 按 `Ctrl+S 保存文件，把文件保存在默认的User文件夹下，命名为“node.sublime-build”。现在你已经完成创建Build System来了。\n\n### 二、使用\n\n1. 在Sublime Text中打开你想运行的JavaScript文件。\n2. 打开“Tools”–“Build System”–“Node”，即你刚刚创建的Build System。\n3. 使用 Ctrl+B 或者工具栏中“Tools”下的“Build”运行你的JavaScript脚本。现在窗口的底部就会出现一个控制台，显示你脚本的运行结果。","slug":"在Sublime Text创建一个JavaScript控制台","published":1,"date":"2017-01-16T03:32:23.684Z","updated":"2017-01-16T09:50:47.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bp1gj000ai0be7t7jbw2s","content":"<p>JavaScript控制台可以方便的调试你的脚本，并获得结果。虽然Sublime Text为许多其他脚本内置了Build Systems，但并没有为JavaScript内置Build Systems。一般人都会创建一个.html文件，把.js文件引入进去，然后用浏览器的控制台来检查你脚本的运行结果。你需要不断的切换窗口、刷新浏览器。幸运的是，你可以简单快速的为Sublime Text创建一个JavaScript Build Systems。</p>\n<p>今天只分享一种通过Node.js来实现的方法，如果你是用的Mac OS X系统，还有一种通过JSC来实现的方法，这里就不做分享了。</p>\n<p>Node.js是一个在服务器上可以用来运行JavaScript的平台。然而，你也可以把它安装到本地计算机上，提供一种比使用浏览器相对来说简单一点方法来运行JavaScript并获得结果。</p>\n<h3 id=\"一、创建Build-Systems\"><a href=\"#一、创建Build-Systems\" class=\"headerlink\" title=\"一、创建Build Systems\"></a>一、创建Build Systems</h3><ul>\n<li>下载并运行Node。安装过程全部使用默认项。</li>\n<li>打开“Tools”–“Build System”–“New Build System”。</li>\n<li>清空Sublime Text打开的窗口，并把下面的代码粘贴进去。</li>\n<li>按 `Ctrl+S 保存文件，把文件保存在默认的User文件夹下，命名为“node.sublime-build”。现在你已经完成创建Build System来了。</li>\n</ul>\n<h3 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h3><ol>\n<li>在Sublime Text中打开你想运行的JavaScript文件。</li>\n<li>打开“Tools”–“Build System”–“Node”，即你刚刚创建的Build System。</li>\n<li>使用 Ctrl+B 或者工具栏中“Tools”下的“Build”运行你的JavaScript脚本。现在窗口的底部就会出现一个控制台，显示你脚本的运行结果。</li>\n</ol>\n","excerpt":"","more":"<p>JavaScript控制台可以方便的调试你的脚本，并获得结果。虽然Sublime Text为许多其他脚本内置了Build Systems，但并没有为JavaScript内置Build Systems。一般人都会创建一个.html文件，把.js文件引入进去，然后用浏览器的控制台来检查你脚本的运行结果。你需要不断的切换窗口、刷新浏览器。幸运的是，你可以简单快速的为Sublime Text创建一个JavaScript Build Systems。</p>\n<p>今天只分享一种通过Node.js来实现的方法，如果你是用的Mac OS X系统，还有一种通过JSC来实现的方法，这里就不做分享了。</p>\n<p>Node.js是一个在服务器上可以用来运行JavaScript的平台。然而，你也可以把它安装到本地计算机上，提供一种比使用浏览器相对来说简单一点方法来运行JavaScript并获得结果。</p>\n<h3 id=\"一、创建Build-Systems\"><a href=\"#一、创建Build-Systems\" class=\"headerlink\" title=\"一、创建Build Systems\"></a>一、创建Build Systems</h3><ul>\n<li>下载并运行Node。安装过程全部使用默认项。</li>\n<li>打开“Tools”–“Build System”–“New Build System”。</li>\n<li>清空Sublime Text打开的窗口，并把下面的代码粘贴进去。</li>\n<li>按 `Ctrl+S 保存文件，把文件保存在默认的User文件夹下，命名为“node.sublime-build”。现在你已经完成创建Build System来了。</li>\n</ul>\n<h3 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h3><ol>\n<li>在Sublime Text中打开你想运行的JavaScript文件。</li>\n<li>打开“Tools”–“Build System”–“Node”，即你刚刚创建的Build System。</li>\n<li>使用 Ctrl+B 或者工具栏中“Tools”下的“Build”运行你的JavaScript脚本。现在窗口的底部就会出现一个控制台，显示你脚本的运行结果。</li>\n</ol>\n"},{"title":"地图定位到当前城市","_content":"\n首先：html  引进百度地图js\n\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=2.0&ak=4afe44bcbcda66feb8ab579866d5d1fa\"></script>\n    <script src=\"scripts/jquery-2.1.4.js\"></script>\n\n其次：主要的 js 代码\n<!-- more -->\n\n    var currentProvince;\n    var currentCity;\n    //百度地图获取 省 市\n    function getCurrentProCity(callback) {\n        $.showLoading(\"正在加载...\");\n        var geolocation = new BMap.Geolocation();\n        var gc = new BMap.Geocoder();\n        geolocation.getCurrentPosition(function (r) {//定位结果对象会传递给r变量\n                $.hideLoading();\n                if (this.getStatus() == BMAP_STATUS_SUCCESS) {  //通过Geolocation类的getStatus()可以判断是否成功定位。\n                    var pt = r.point;\n                    gc.getLocation(pt, function (rs) {\n                        var addComp = rs.addressComponents;\n                        console.log(addComp.province);\n                        console.log(addComp.city);\n                        currentProvince = addComp.province;\n                        currentCity = addComp.city;\n                        //getDRL(currentProvince,currentCity);\n                        $(\"#getCarCity,#getBackCity\").val(currentCity);\n                        //alert(currentCity);\n                        // alert(addComp.province + addComp.city + addComp.district + addComp.street + addComp.streetNumber);\n                        //callback();\n                    });\n                }\n                else {\n                    //关于状态码\n                    //BMAP_STATUS_SUCCESS   检索成功。对应数值“0”。\n                    //BMAP_STATUS_CITY_LIST 城市列表。对应数值“1”。\n                    //BMAP_STATUS_UNKNOWN_LOCATION  位置结果未知。对应数值“2”。\n                    //BMAP_STATUS_UNKNOWN_ROUTE 导航结果未知。对应数值“3”。\n                    //BMAP_STATUS_INVALID_KEY   非法密钥。对应数值“4”。\n                    //BMAP_STATUS_INVALID_REQUEST   非法请求。对应数值“5”。\n                    //BMAP_STATUS_PERMISSION_DENIED 没有权限。对应数值“6”。(自 1.1 新增)\n                    //BMAP_STATUS_SERVICE_UNAVAILABLE   服务不可用。对应数值“7”。(自 1.1 新增)\n                    //BMAP_STATUS_TIMEOUT   超时。对应数值“8”。(自 1.1 新增)\n                    switch (this.getStatus()) {\n                        case 2:\n                            alert('位置结果未知 获取位置失败.');\n                            break;\n                        case 3:\n                            alert('导航结果未知 获取位置失败..');\n                            break;\n                        case 4:\n                            alert('非法密钥 获取位置失败.');\n                            break;\n                        case 5:\n                            alert('对不起,非法请求位置  获取位置失败.');\n                            break;\n                        case 6:\n                            alert('对不起,当前 没有权限 获取位置失败.');\n                            break;\n                        case 7:\n                            alert('对不起,服务不可用 获取位置失败.');\n                            break;\n                        case 8:\n                            alert('对不起,请求超时 获取位置失败.');\n                            break;\n                    }\n                }\n            },\n            {enableHighAccuracy: true}\n        );\n    }","source":"_posts/地图定位到当前城市.md","raw":"---\ntitle: 地图定位到当前城市\n---\n\n首先：html  引进百度地图js\n\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=2.0&ak=4afe44bcbcda66feb8ab579866d5d1fa\"></script>\n    <script src=\"scripts/jquery-2.1.4.js\"></script>\n\n其次：主要的 js 代码\n<!-- more -->\n\n    var currentProvince;\n    var currentCity;\n    //百度地图获取 省 市\n    function getCurrentProCity(callback) {\n        $.showLoading(\"正在加载...\");\n        var geolocation = new BMap.Geolocation();\n        var gc = new BMap.Geocoder();\n        geolocation.getCurrentPosition(function (r) {//定位结果对象会传递给r变量\n                $.hideLoading();\n                if (this.getStatus() == BMAP_STATUS_SUCCESS) {  //通过Geolocation类的getStatus()可以判断是否成功定位。\n                    var pt = r.point;\n                    gc.getLocation(pt, function (rs) {\n                        var addComp = rs.addressComponents;\n                        console.log(addComp.province);\n                        console.log(addComp.city);\n                        currentProvince = addComp.province;\n                        currentCity = addComp.city;\n                        //getDRL(currentProvince,currentCity);\n                        $(\"#getCarCity,#getBackCity\").val(currentCity);\n                        //alert(currentCity);\n                        // alert(addComp.province + addComp.city + addComp.district + addComp.street + addComp.streetNumber);\n                        //callback();\n                    });\n                }\n                else {\n                    //关于状态码\n                    //BMAP_STATUS_SUCCESS   检索成功。对应数值“0”。\n                    //BMAP_STATUS_CITY_LIST 城市列表。对应数值“1”。\n                    //BMAP_STATUS_UNKNOWN_LOCATION  位置结果未知。对应数值“2”。\n                    //BMAP_STATUS_UNKNOWN_ROUTE 导航结果未知。对应数值“3”。\n                    //BMAP_STATUS_INVALID_KEY   非法密钥。对应数值“4”。\n                    //BMAP_STATUS_INVALID_REQUEST   非法请求。对应数值“5”。\n                    //BMAP_STATUS_PERMISSION_DENIED 没有权限。对应数值“6”。(自 1.1 新增)\n                    //BMAP_STATUS_SERVICE_UNAVAILABLE   服务不可用。对应数值“7”。(自 1.1 新增)\n                    //BMAP_STATUS_TIMEOUT   超时。对应数值“8”。(自 1.1 新增)\n                    switch (this.getStatus()) {\n                        case 2:\n                            alert('位置结果未知 获取位置失败.');\n                            break;\n                        case 3:\n                            alert('导航结果未知 获取位置失败..');\n                            break;\n                        case 4:\n                            alert('非法密钥 获取位置失败.');\n                            break;\n                        case 5:\n                            alert('对不起,非法请求位置  获取位置失败.');\n                            break;\n                        case 6:\n                            alert('对不起,当前 没有权限 获取位置失败.');\n                            break;\n                        case 7:\n                            alert('对不起,服务不可用 获取位置失败.');\n                            break;\n                        case 8:\n                            alert('对不起,请求超时 获取位置失败.');\n                            break;\n                    }\n                }\n            },\n            {enableHighAccuracy: true}\n        );\n    }","slug":"地图定位到当前城市","published":1,"date":"2016-08-25T09:13:55.320Z","updated":"2017-01-16T10:56:17.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bp1gj000bi0be14jhlkka","content":"<p>首先：html  引进百度地图js</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=4afe44bcbcda66feb8ab579866d5d1fa&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;scripts/jquery-2.1.4.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>其次：主要的 js 代码<br><a id=\"more\"></a></p>\n<pre><code>var currentProvince;\nvar currentCity;\n//百度地图获取 省 市\nfunction getCurrentProCity(callback) {\n    $.showLoading(&quot;正在加载...&quot;);\n    var geolocation = new BMap.Geolocation();\n    var gc = new BMap.Geocoder();\n    geolocation.getCurrentPosition(function (r) {//定位结果对象会传递给r变量\n            $.hideLoading();\n            if (this.getStatus() == BMAP_STATUS_SUCCESS) {  //通过Geolocation类的getStatus()可以判断是否成功定位。\n                var pt = r.point;\n                gc.getLocation(pt, function (rs) {\n                    var addComp = rs.addressComponents;\n                    console.log(addComp.province);\n                    console.log(addComp.city);\n                    currentProvince = addComp.province;\n                    currentCity = addComp.city;\n                    //getDRL(currentProvince,currentCity);\n                    $(&quot;#getCarCity,#getBackCity&quot;).val(currentCity);\n                    //alert(currentCity);\n                    // alert(addComp.province + addComp.city + addComp.district + addComp.street + addComp.streetNumber);\n                    //callback();\n                });\n            }\n            else {\n                //关于状态码\n                //BMAP_STATUS_SUCCESS   检索成功。对应数值“0”。\n                //BMAP_STATUS_CITY_LIST 城市列表。对应数值“1”。\n                //BMAP_STATUS_UNKNOWN_LOCATION  位置结果未知。对应数值“2”。\n                //BMAP_STATUS_UNKNOWN_ROUTE 导航结果未知。对应数值“3”。\n                //BMAP_STATUS_INVALID_KEY   非法密钥。对应数值“4”。\n                //BMAP_STATUS_INVALID_REQUEST   非法请求。对应数值“5”。\n                //BMAP_STATUS_PERMISSION_DENIED 没有权限。对应数值“6”。(自 1.1 新增)\n                //BMAP_STATUS_SERVICE_UNAVAILABLE   服务不可用。对应数值“7”。(自 1.1 新增)\n                //BMAP_STATUS_TIMEOUT   超时。对应数值“8”。(自 1.1 新增)\n                switch (this.getStatus()) {\n                    case 2:\n                        alert(&apos;位置结果未知 获取位置失败.&apos;);\n                        break;\n                    case 3:\n                        alert(&apos;导航结果未知 获取位置失败..&apos;);\n                        break;\n                    case 4:\n                        alert(&apos;非法密钥 获取位置失败.&apos;);\n                        break;\n                    case 5:\n                        alert(&apos;对不起,非法请求位置  获取位置失败.&apos;);\n                        break;\n                    case 6:\n                        alert(&apos;对不起,当前 没有权限 获取位置失败.&apos;);\n                        break;\n                    case 7:\n                        alert(&apos;对不起,服务不可用 获取位置失败.&apos;);\n                        break;\n                    case 8:\n                        alert(&apos;对不起,请求超时 获取位置失败.&apos;);\n                        break;\n                }\n            }\n        },\n        {enableHighAccuracy: true}\n    );\n}\n</code></pre>","excerpt":"<p>首先：html  引进百度地图js</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=4afe44bcbcda66feb8ab579866d5d1fa&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;scripts/jquery-2.1.4.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>其次：主要的 js 代码<br>","more":"</p>\n<pre><code>var currentProvince;\nvar currentCity;\n//百度地图获取 省 市\nfunction getCurrentProCity(callback) {\n    $.showLoading(&quot;正在加载...&quot;);\n    var geolocation = new BMap.Geolocation();\n    var gc = new BMap.Geocoder();\n    geolocation.getCurrentPosition(function (r) {//定位结果对象会传递给r变量\n            $.hideLoading();\n            if (this.getStatus() == BMAP_STATUS_SUCCESS) {  //通过Geolocation类的getStatus()可以判断是否成功定位。\n                var pt = r.point;\n                gc.getLocation(pt, function (rs) {\n                    var addComp = rs.addressComponents;\n                    console.log(addComp.province);\n                    console.log(addComp.city);\n                    currentProvince = addComp.province;\n                    currentCity = addComp.city;\n                    //getDRL(currentProvince,currentCity);\n                    $(&quot;#getCarCity,#getBackCity&quot;).val(currentCity);\n                    //alert(currentCity);\n                    // alert(addComp.province + addComp.city + addComp.district + addComp.street + addComp.streetNumber);\n                    //callback();\n                });\n            }\n            else {\n                //关于状态码\n                //BMAP_STATUS_SUCCESS   检索成功。对应数值“0”。\n                //BMAP_STATUS_CITY_LIST 城市列表。对应数值“1”。\n                //BMAP_STATUS_UNKNOWN_LOCATION  位置结果未知。对应数值“2”。\n                //BMAP_STATUS_UNKNOWN_ROUTE 导航结果未知。对应数值“3”。\n                //BMAP_STATUS_INVALID_KEY   非法密钥。对应数值“4”。\n                //BMAP_STATUS_INVALID_REQUEST   非法请求。对应数值“5”。\n                //BMAP_STATUS_PERMISSION_DENIED 没有权限。对应数值“6”。(自 1.1 新增)\n                //BMAP_STATUS_SERVICE_UNAVAILABLE   服务不可用。对应数值“7”。(自 1.1 新增)\n                //BMAP_STATUS_TIMEOUT   超时。对应数值“8”。(自 1.1 新增)\n                switch (this.getStatus()) {\n                    case 2:\n                        alert(&apos;位置结果未知 获取位置失败.&apos;);\n                        break;\n                    case 3:\n                        alert(&apos;导航结果未知 获取位置失败..&apos;);\n                        break;\n                    case 4:\n                        alert(&apos;非法密钥 获取位置失败.&apos;);\n                        break;\n                    case 5:\n                        alert(&apos;对不起,非法请求位置  获取位置失败.&apos;);\n                        break;\n                    case 6:\n                        alert(&apos;对不起,当前 没有权限 获取位置失败.&apos;);\n                        break;\n                    case 7:\n                        alert(&apos;对不起,服务不可用 获取位置失败.&apos;);\n                        break;\n                    case 8:\n                        alert(&apos;对不起,请求超时 获取位置失败.&apos;);\n                        break;\n                }\n            }\n        },\n        {enableHighAccuracy: true}\n    );\n}\n</code></pre>"},{"title":"就喜欢你看不惯我又干不掉我的样子","_content":"公司的风8开始借书啦，本人这么支持风8的，必当先借阅一本尝尝鲜，首先就是被这本书的名字吸引\n——《就喜欢你看不惯我又干不掉我的样子》\n\n#哇哇哇\n\n感觉就是个超会做人的一本书啊，木想到...\n<!-- more -->\n竟然是本漫画？插画书？\n![封面](../../../../images/cat-images/hd.jpg)\n\n更木想到的是，书书还有点污~~~\n\n![封面](../../../../images/cat-images/yj.jpg)\n\n不过风格还是很合我胃口，给了我意向不到的乐趣。\n\n![封面](../../../../images/cat-images/hs1.jpg)\n\n![封面](../../../../images/cat-images/hs2.jpg)\n\n主角是猫狗+少年，偶是超喜欢猫猫的人，看了自然是喜爱得不得了\n\nO(∩_∩)O哈哈~剧透下\n\n![封面](../../../../images/cat-images/pp.jpg)","source":"_posts/就喜欢你看不惯我又干不掉我的样子.md","raw":"---\ntitle: 就喜欢你看不惯我又干不掉我的样子\n---\n公司的风8开始借书啦，本人这么支持风8的，必当先借阅一本尝尝鲜，首先就是被这本书的名字吸引\n——《就喜欢你看不惯我又干不掉我的样子》\n\n#哇哇哇\n\n感觉就是个超会做人的一本书啊，木想到...\n<!-- more -->\n竟然是本漫画？插画书？\n![封面](../../../../images/cat-images/hd.jpg)\n\n更木想到的是，书书还有点污~~~\n\n![封面](../../../../images/cat-images/yj.jpg)\n\n不过风格还是很合我胃口，给了我意向不到的乐趣。\n\n![封面](../../../../images/cat-images/hs1.jpg)\n\n![封面](../../../../images/cat-images/hs2.jpg)\n\n主角是猫狗+少年，偶是超喜欢猫猫的人，看了自然是喜爱得不得了\n\nO(∩_∩)O哈哈~剧透下\n\n![封面](../../../../images/cat-images/pp.jpg)","slug":"就喜欢你看不惯我又干不掉我的样子","published":1,"date":"2016-08-22T02:33:04.146Z","updated":"2016-09-09T06:33:50.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bp1gj000ci0beu9k7m8oz","content":"<p>公司的风8开始借书啦，本人这么支持风8的，必当先借阅一本尝尝鲜，首先就是被这本书的名字吸引<br>——《就喜欢你看不惯我又干不掉我的样子》</p>\n<p>#哇哇哇</p>\n<p>感觉就是个超会做人的一本书啊，木想到…<br><a id=\"more\"></a><br>竟然是本漫画？插画书？<br><img src=\"../../../../images/cat-images/hd.jpg\" alt=\"封面\"></p>\n<p>更木想到的是，书书还有点污~~~</p>\n<p><img src=\"../../../../images/cat-images/yj.jpg\" alt=\"封面\"></p>\n<p>不过风格还是很合我胃口，给了我意向不到的乐趣。</p>\n<p><img src=\"../../../../images/cat-images/hs1.jpg\" alt=\"封面\"></p>\n<p><img src=\"../../../../images/cat-images/hs2.jpg\" alt=\"封面\"></p>\n<p>主角是猫狗+少年，偶是超喜欢猫猫的人，看了自然是喜爱得不得了</p>\n<p>O(∩_∩)O哈哈~剧透下</p>\n<p><img src=\"../../../../images/cat-images/pp.jpg\" alt=\"封面\"></p>\n","excerpt":"<p>公司的风8开始借书啦，本人这么支持风8的，必当先借阅一本尝尝鲜，首先就是被这本书的名字吸引<br>——《就喜欢你看不惯我又干不掉我的样子》</p>\n<p>#哇哇哇</p>\n<p>感觉就是个超会做人的一本书啊，木想到…<br>","more":"<br>竟然是本漫画？插画书？<br><img src=\"../../../../images/cat-images/hd.jpg\" alt=\"封面\"></p>\n<p>更木想到的是，书书还有点污~~~</p>\n<p><img src=\"../../../../images/cat-images/yj.jpg\" alt=\"封面\"></p>\n<p>不过风格还是很合我胃口，给了我意向不到的乐趣。</p>\n<p><img src=\"../../../../images/cat-images/hs1.jpg\" alt=\"封面\"></p>\n<p><img src=\"../../../../images/cat-images/hs2.jpg\" alt=\"封面\"></p>\n<p>主角是猫狗+少年，偶是超喜欢猫猫的人，看了自然是喜爱得不得了</p>\n<p>O(∩_∩)O哈哈~剧透下</p>\n<p><img src=\"../../../../images/cat-images/pp.jpg\" alt=\"封面\"></p>"},{"title":"想买一件东西又觉得太贵的时候","_content":"想买一件东西又觉得太贵的时候，看看下面这些你就会改变你的看法了...\n<!-- more -->\n![这是第一张图片](../../../../images/mouse-images/1.jpg)\n\n![这是第二张图片](../../../../images/mouse-images/2.jpg)\n\n![这是第三张图片](../../../../images/mouse-images/3.jpg)\n\n![这是第四张图片](../../../../images/mouse-images/4.jpg)\n\n![这是第五张图片](../../../../images/mouse-images/5.jpg)\n\n![这是第六张图片](../../../../images/mouse-images/6.jpg)\n\n![这是第七张图片](../../../../images/mouse-images/7.jpg)\n\n![这是第八张图片](../../../../images/mouse-images/8.jpg)\n\n![这是第九张图片](../../../../images/mouse-images/9.jpg)\n\n### 我竟无力反驳·\n\n### O(∩_∩)O哈哈~","source":"_posts/想买一件东西又觉得太贵的时候.md","raw":"---\ntitle: 想买一件东西又觉得太贵的时候\n---\n想买一件东西又觉得太贵的时候，看看下面这些你就会改变你的看法了...\n<!-- more -->\n![这是第一张图片](../../../../images/mouse-images/1.jpg)\n\n![这是第二张图片](../../../../images/mouse-images/2.jpg)\n\n![这是第三张图片](../../../../images/mouse-images/3.jpg)\n\n![这是第四张图片](../../../../images/mouse-images/4.jpg)\n\n![这是第五张图片](../../../../images/mouse-images/5.jpg)\n\n![这是第六张图片](../../../../images/mouse-images/6.jpg)\n\n![这是第七张图片](../../../../images/mouse-images/7.jpg)\n\n![这是第八张图片](../../../../images/mouse-images/8.jpg)\n\n![这是第九张图片](../../../../images/mouse-images/9.jpg)\n\n### 我竟无力反驳·\n\n### O(∩_∩)O哈哈~","slug":"想买一件东西又觉得太贵的时候","published":1,"date":"2016-08-22T06:53:45.419Z","updated":"2016-09-09T06:34:56.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bp1gz000di0begzxwsut1","content":"<p>想买一件东西又觉得太贵的时候，看看下面这些你就会改变你的看法了…<br><a id=\"more\"></a><br><img src=\"../../../../images/mouse-images/1.jpg\" alt=\"这是第一张图片\"></p>\n<p><img src=\"../../../../images/mouse-images/2.jpg\" alt=\"这是第二张图片\"></p>\n<p><img src=\"../../../../images/mouse-images/3.jpg\" alt=\"这是第三张图片\"></p>\n<p><img src=\"../../../../images/mouse-images/4.jpg\" alt=\"这是第四张图片\"></p>\n<p><img src=\"../../../../images/mouse-images/5.jpg\" alt=\"这是第五张图片\"></p>\n<p><img src=\"../../../../images/mouse-images/6.jpg\" alt=\"这是第六张图片\"></p>\n<p><img src=\"../../../../images/mouse-images/7.jpg\" alt=\"这是第七张图片\"></p>\n<p><img src=\"../../../../images/mouse-images/8.jpg\" alt=\"这是第八张图片\"></p>\n<p><img src=\"../../../../images/mouse-images/9.jpg\" alt=\"这是第九张图片\"></p>\n<h3 id=\"我竟无力反驳·\"><a href=\"#我竟无力反驳·\" class=\"headerlink\" title=\"我竟无力反驳·\"></a>我竟无力反驳·</h3><h3 id=\"O-∩-∩-O哈哈\"><a href=\"#O-∩-∩-O哈哈\" class=\"headerlink\" title=\"O(∩_∩)O哈哈~\"></a>O(∩_∩)O哈哈~</h3>","excerpt":"<p>想买一件东西又觉得太贵的时候，看看下面这些你就会改变你的看法了…<br>","more":"<br><img src=\"../../../../images/mouse-images/1.jpg\" alt=\"这是第一张图片\"></p>\n<p><img src=\"../../../../images/mouse-images/2.jpg\" alt=\"这是第二张图片\"></p>\n<p><img src=\"../../../../images/mouse-images/3.jpg\" alt=\"这是第三张图片\"></p>\n<p><img src=\"../../../../images/mouse-images/4.jpg\" alt=\"这是第四张图片\"></p>\n<p><img src=\"../../../../images/mouse-images/5.jpg\" alt=\"这是第五张图片\"></p>\n<p><img src=\"../../../../images/mouse-images/6.jpg\" alt=\"这是第六张图片\"></p>\n<p><img src=\"../../../../images/mouse-images/7.jpg\" alt=\"这是第七张图片\"></p>\n<p><img src=\"../../../../images/mouse-images/8.jpg\" alt=\"这是第八张图片\"></p>\n<p><img src=\"../../../../images/mouse-images/9.jpg\" alt=\"这是第九张图片\"></p>\n<h3 id=\"我竟无力反驳·\"><a href=\"#我竟无力反驳·\" class=\"headerlink\" title=\"我竟无力反驳·\"></a>我竟无力反驳·</h3><h3 id=\"O-∩-∩-O哈哈\"><a href=\"#O-∩-∩-O哈哈\" class=\"headerlink\" title=\"O(∩_∩)O哈哈~\"></a>O(∩_∩)O哈哈~</h3>"},{"title":"有一种错觉叫我能做到","_content":"有一种错觉叫我能做到...\n<!-- more -->\n![这是第一张图片](../../../../images/miss-feeling/1.gif)\n\n![这是第二张图片](../../../../images/miss-feeling/2.gif)\n\n![这是第三张图片](../../../../images/miss-feeling/3.gif)\n\n![这是第四张图片](../../../../images/miss-feeling/4.gif)\n\n![这是第五张图片](../../../../images/miss-feeling/5.gif)\n\n![这是第六张图片](../../../../images/miss-feeling/6.gif)\n\n![这是第七张图片](../../../../images/miss-feeling/7.gif)\n\n![这是第八张图片](../../../../images/miss-feeling/8.gif)\n\n![这是第九张图片](../../../../images/miss-feeling/9.gif)\n\n### 吾皇现实中好厉害！","source":"_posts/有一种错觉叫我能做到.md","raw":"---\ntitle: 有一种错觉叫我能做到\n---\n有一种错觉叫我能做到...\n<!-- more -->\n![这是第一张图片](../../../../images/miss-feeling/1.gif)\n\n![这是第二张图片](../../../../images/miss-feeling/2.gif)\n\n![这是第三张图片](../../../../images/miss-feeling/3.gif)\n\n![这是第四张图片](../../../../images/miss-feeling/4.gif)\n\n![这是第五张图片](../../../../images/miss-feeling/5.gif)\n\n![这是第六张图片](../../../../images/miss-feeling/6.gif)\n\n![这是第七张图片](../../../../images/miss-feeling/7.gif)\n\n![这是第八张图片](../../../../images/miss-feeling/8.gif)\n\n![这是第九张图片](../../../../images/miss-feeling/9.gif)\n\n### 吾皇现实中好厉害！","slug":"有一种错觉叫我能做到","published":1,"date":"2016-09-20T00:53:35.514Z","updated":"2016-09-20T01:17:48.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bp1gz000ei0befqog8ggy","content":"<p>有一种错觉叫我能做到…<br><a id=\"more\"></a><br><img src=\"../../../../images/miss-feeling/1.gif\" alt=\"这是第一张图片\"></p>\n<p><img src=\"../../../../images/miss-feeling/2.gif\" alt=\"这是第二张图片\"></p>\n<p><img src=\"../../../../images/miss-feeling/3.gif\" alt=\"这是第三张图片\"></p>\n<p><img src=\"../../../../images/miss-feeling/4.gif\" alt=\"这是第四张图片\"></p>\n<p><img src=\"../../../../images/miss-feeling/5.gif\" alt=\"这是第五张图片\"></p>\n<p><img src=\"../../../../images/miss-feeling/6.gif\" alt=\"这是第六张图片\"></p>\n<p><img src=\"../../../../images/miss-feeling/7.gif\" alt=\"这是第七张图片\"></p>\n<p><img src=\"../../../../images/miss-feeling/8.gif\" alt=\"这是第八张图片\"></p>\n<p><img src=\"../../../../images/miss-feeling/9.gif\" alt=\"这是第九张图片\"></p>\n<h3 id=\"吾皇现实中好厉害！\"><a href=\"#吾皇现实中好厉害！\" class=\"headerlink\" title=\"吾皇现实中好厉害！\"></a>吾皇现实中好厉害！</h3>","excerpt":"<p>有一种错觉叫我能做到…<br>","more":"<br><img src=\"../../../../images/miss-feeling/1.gif\" alt=\"这是第一张图片\"></p>\n<p><img src=\"../../../../images/miss-feeling/2.gif\" alt=\"这是第二张图片\"></p>\n<p><img src=\"../../../../images/miss-feeling/3.gif\" alt=\"这是第三张图片\"></p>\n<p><img src=\"../../../../images/miss-feeling/4.gif\" alt=\"这是第四张图片\"></p>\n<p><img src=\"../../../../images/miss-feeling/5.gif\" alt=\"这是第五张图片\"></p>\n<p><img src=\"../../../../images/miss-feeling/6.gif\" alt=\"这是第六张图片\"></p>\n<p><img src=\"../../../../images/miss-feeling/7.gif\" alt=\"这是第七张图片\"></p>\n<p><img src=\"../../../../images/miss-feeling/8.gif\" alt=\"这是第八张图片\"></p>\n<p><img src=\"../../../../images/miss-feeling/9.gif\" alt=\"这是第九张图片\"></p>\n<h3 id=\"吾皇现实中好厉害！\"><a href=\"#吾皇现实中好厉害！\" class=\"headerlink\" title=\"吾皇现实中好厉害！\"></a>吾皇现实中好厉害！</h3>"},{"title":"用一个二维码做下载地址，自动区分是 ios 还是 android","_content":"\n用一个二维码做下载地址，自动区分是 ios 还是 android, 甚至区分 iphone  和 ipad。\n\n<!-- more -->\n\n    <html>\n        <head>\n            <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n            <title>二维码下载</title>   \n     \n            <script type=\"text/javascript\">\n                /*\n                 * 智能机浏览器版本信息:\n                 *\n                 */\n                var browser = {\n                    versions: function() {\n                        var u = navigator.userAgent, app = navigator.appVersion;\n                        return {//移动终端浏览器版本信息\n                            trident: u.indexOf('Trident') > -1, //IE内核\n                            presto: u.indexOf('Presto') > -1, //opera内核\n                            webKit: u.indexOf('AppleWebKit') > -1, //苹果、谷歌内核\n                            gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1, //火狐内核\n                            mobile: !!u.match(/AppleWebKit.*Mobile.*/) || !!u.match(/AppleWebKit/), //是否为移动终端\n                            ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端\n                            android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android终端或者uc浏览器\n                            iPhone: u.indexOf('iPhone') > -1 || u.indexOf('Mac') > -1, //是否为iPhone或者QQHD浏览器\n                            iPad: u.indexOf('iPad') > -1, //是否iPad\n                            webApp: u.indexOf('Safari') == -1 //是否web应该程序，没有头部与底部\n                        };\n                    }(),\n                    language: (navigator.browserLanguage || navigator.language).toLowerCase()\n                }\n     \n                if (browser.versions.ios || browser.versions.iPhone || browser.versions.iPad) {\n                    window.location=\"https://itunes.apple.com/cn/app/xxx\";\n                }\n                else if (browser.versions.android) {\n                    window.location=\"http://zhj8.aliapp.com/xxx.apk\";\n                }\n     \n    //            document.writeln(\"语言版本: \" + browser.language);\n    //            document.writeln(\" 是否为移动终端: \" + browser.versions.mobile);\n    //            document.writeln(\" ios终端: \" + browser.versions.ios);\n    //            document.writeln(\" android终端: \" + browser.versions.android);\n    //            document.writeln(\" 是否为iPhone: \" + browser.versions.iPhone);\n    //            document.writeln(\" 是否iPad: \" + browser.versions.iPad);\n    //            document.writeln(navigator.userAgent);\n     \n     \n            </script>\n        </head>\n        <body>\n             \n        </body>\n    </html>","source":"_posts/用一个二维码做下载地址，自动区分是 ios 还是 android.md","raw":"---\ntitle: 用一个二维码做下载地址，自动区分是 ios 还是 android\n---\n\n用一个二维码做下载地址，自动区分是 ios 还是 android, 甚至区分 iphone  和 ipad。\n\n<!-- more -->\n\n    <html>\n        <head>\n            <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n            <title>二维码下载</title>   \n     \n            <script type=\"text/javascript\">\n                /*\n                 * 智能机浏览器版本信息:\n                 *\n                 */\n                var browser = {\n                    versions: function() {\n                        var u = navigator.userAgent, app = navigator.appVersion;\n                        return {//移动终端浏览器版本信息\n                            trident: u.indexOf('Trident') > -1, //IE内核\n                            presto: u.indexOf('Presto') > -1, //opera内核\n                            webKit: u.indexOf('AppleWebKit') > -1, //苹果、谷歌内核\n                            gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1, //火狐内核\n                            mobile: !!u.match(/AppleWebKit.*Mobile.*/) || !!u.match(/AppleWebKit/), //是否为移动终端\n                            ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端\n                            android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android终端或者uc浏览器\n                            iPhone: u.indexOf('iPhone') > -1 || u.indexOf('Mac') > -1, //是否为iPhone或者QQHD浏览器\n                            iPad: u.indexOf('iPad') > -1, //是否iPad\n                            webApp: u.indexOf('Safari') == -1 //是否web应该程序，没有头部与底部\n                        };\n                    }(),\n                    language: (navigator.browserLanguage || navigator.language).toLowerCase()\n                }\n     \n                if (browser.versions.ios || browser.versions.iPhone || browser.versions.iPad) {\n                    window.location=\"https://itunes.apple.com/cn/app/xxx\";\n                }\n                else if (browser.versions.android) {\n                    window.location=\"http://zhj8.aliapp.com/xxx.apk\";\n                }\n     \n    //            document.writeln(\"语言版本: \" + browser.language);\n    //            document.writeln(\" 是否为移动终端: \" + browser.versions.mobile);\n    //            document.writeln(\" ios终端: \" + browser.versions.ios);\n    //            document.writeln(\" android终端: \" + browser.versions.android);\n    //            document.writeln(\" 是否为iPhone: \" + browser.versions.iPhone);\n    //            document.writeln(\" 是否iPad: \" + browser.versions.iPad);\n    //            document.writeln(navigator.userAgent);\n     \n     \n            </script>\n        </head>\n        <body>\n             \n        </body>\n    </html>","slug":"用一个二维码做下载地址，自动区分是 ios 还是 android","published":1,"date":"2016-12-06T06:46:00.789Z","updated":"2016-12-06T06:47:46.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bp1gz000fi0be4x95nz76","content":"<p>用一个二维码做下载地址，自动区分是 ios 还是 android, 甚至区分 iphone  和 ipad。</p>\n<a id=\"more\"></a>\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n        &lt;title&gt;二维码下载&lt;/title&gt;   \n\n        &lt;script type=&quot;text/javascript&quot;&gt;\n            /*\n             * 智能机浏览器版本信息:\n             *\n             */\n            var browser = {\n                versions: function() {\n                    var u = navigator.userAgent, app = navigator.appVersion;\n                    return {//移动终端浏览器版本信息\n                        trident: u.indexOf(&apos;Trident&apos;) &gt; -1, //IE内核\n                        presto: u.indexOf(&apos;Presto&apos;) &gt; -1, //opera内核\n                        webKit: u.indexOf(&apos;AppleWebKit&apos;) &gt; -1, //苹果、谷歌内核\n                        gecko: u.indexOf(&apos;Gecko&apos;) &gt; -1 &amp;&amp; u.indexOf(&apos;KHTML&apos;) == -1, //火狐内核\n                        mobile: !!u.match(/AppleWebKit.*Mobile.*/) || !!u.match(/AppleWebKit/), //是否为移动终端\n                        ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端\n                        android: u.indexOf(&apos;Android&apos;) &gt; -1 || u.indexOf(&apos;Linux&apos;) &gt; -1, //android终端或者uc浏览器\n                        iPhone: u.indexOf(&apos;iPhone&apos;) &gt; -1 || u.indexOf(&apos;Mac&apos;) &gt; -1, //是否为iPhone或者QQHD浏览器\n                        iPad: u.indexOf(&apos;iPad&apos;) &gt; -1, //是否iPad\n                        webApp: u.indexOf(&apos;Safari&apos;) == -1 //是否web应该程序，没有头部与底部\n                    };\n                }(),\n                language: (navigator.browserLanguage || navigator.language).toLowerCase()\n            }\n\n            if (browser.versions.ios || browser.versions.iPhone || browser.versions.iPad) {\n                window.location=&quot;https://itunes.apple.com/cn/app/xxx&quot;;\n            }\n            else if (browser.versions.android) {\n                window.location=&quot;http://zhj8.aliapp.com/xxx.apk&quot;;\n            }\n\n//            document.writeln(&quot;语言版本: &quot; + browser.language);\n//            document.writeln(&quot; 是否为移动终端: &quot; + browser.versions.mobile);\n//            document.writeln(&quot; ios终端: &quot; + browser.versions.ios);\n//            document.writeln(&quot; android终端: &quot; + browser.versions.android);\n//            document.writeln(&quot; 是否为iPhone: &quot; + browser.versions.iPhone);\n//            document.writeln(&quot; 是否iPad: &quot; + browser.versions.iPad);\n//            document.writeln(navigator.userAgent);\n\n\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>","excerpt":"<p>用一个二维码做下载地址，自动区分是 ios 还是 android, 甚至区分 iphone  和 ipad。</p>","more":"<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n        &lt;title&gt;二维码下载&lt;/title&gt;   \n\n        &lt;script type=&quot;text/javascript&quot;&gt;\n            /*\n             * 智能机浏览器版本信息:\n             *\n             */\n            var browser = {\n                versions: function() {\n                    var u = navigator.userAgent, app = navigator.appVersion;\n                    return {//移动终端浏览器版本信息\n                        trident: u.indexOf(&apos;Trident&apos;) &gt; -1, //IE内核\n                        presto: u.indexOf(&apos;Presto&apos;) &gt; -1, //opera内核\n                        webKit: u.indexOf(&apos;AppleWebKit&apos;) &gt; -1, //苹果、谷歌内核\n                        gecko: u.indexOf(&apos;Gecko&apos;) &gt; -1 &amp;&amp; u.indexOf(&apos;KHTML&apos;) == -1, //火狐内核\n                        mobile: !!u.match(/AppleWebKit.*Mobile.*/) || !!u.match(/AppleWebKit/), //是否为移动终端\n                        ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端\n                        android: u.indexOf(&apos;Android&apos;) &gt; -1 || u.indexOf(&apos;Linux&apos;) &gt; -1, //android终端或者uc浏览器\n                        iPhone: u.indexOf(&apos;iPhone&apos;) &gt; -1 || u.indexOf(&apos;Mac&apos;) &gt; -1, //是否为iPhone或者QQHD浏览器\n                        iPad: u.indexOf(&apos;iPad&apos;) &gt; -1, //是否iPad\n                        webApp: u.indexOf(&apos;Safari&apos;) == -1 //是否web应该程序，没有头部与底部\n                    };\n                }(),\n                language: (navigator.browserLanguage || navigator.language).toLowerCase()\n            }\n\n            if (browser.versions.ios || browser.versions.iPhone || browser.versions.iPad) {\n                window.location=&quot;https://itunes.apple.com/cn/app/xxx&quot;;\n            }\n            else if (browser.versions.android) {\n                window.location=&quot;http://zhj8.aliapp.com/xxx.apk&quot;;\n            }\n\n//            document.writeln(&quot;语言版本: &quot; + browser.language);\n//            document.writeln(&quot; 是否为移动终端: &quot; + browser.versions.mobile);\n//            document.writeln(&quot; ios终端: &quot; + browser.versions.ios);\n//            document.writeln(&quot; android终端: &quot; + browser.versions.android);\n//            document.writeln(&quot; 是否为iPhone: &quot; + browser.versions.iPhone);\n//            document.writeln(&quot; 是否iPad: &quot; + browser.versions.iPad);\n//            document.writeln(navigator.userAgent);\n\n\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"title":"自适应网页设计的核心","_content":"\"自适应网页设计\"的核心，就是CSS3引入的Media Query模块。\n它的意思就是，自动探测屏幕宽度，然后加载相应的CSS文件。\n\n    <link rel=\"stylesheet\" type=\"text/css\" media=\"screen and max-device-width:400px)\" href=\"tinyScreen.css\" />\n<!-- more-->\n上面的代码意思是，如果屏幕宽度小于400像素（max-device-width: 400px），就加载tinyScreen.css文件。\n\n    <link rel=\"stylesheet\" type=\"text/css\" media=\"screen and (min-width: 400px) and (max-device-width: 600px)\" href=\"smallScreen.css\" />\n如果屏幕宽度在400像素到600像素之间，则加载smallScreen.css文件。\n除了用html标签加载CSS文件，还可以在现有CSS文件中加载。\n\n    @import url(\"tinyScreen.css\") screen and (max-device-width: 400px);\n最后给个自定义标准head作为参考：\n\n    <head>\n        <meta charset=\"UTF-8\">\n        <!--如果安装了GCF，则使用GCF来渲染页面，如果未安装GCF，则使用最高版本的IE内核进行渲染-->\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <!--视图默认比例，用户不可缩放视图设置-->\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0, minimum-scale=1.0,user-scalable=no\">\n        <!--删除默认的苹果工具栏和菜单栏-->\n        <meta name=\"apple-mobile-web-app-capable\" content=\"yes\"/>\n        <!--控制状态栏显示样式-->\n        <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"/>\n        <!--电话、邮件、地址默认格式取消-->\n        <meta name=\"format-detection\" content=\"telephone=no,email=no,adress=no\"/>\n        <!--手机端点击时，禁止出现灰色区域-->\n        <meta name=\"msapplication-tap-highlight\" content=\"no\"/>\n        <title>web移动端标准head参考</title>\n        <!--自动探测屏幕宽度，然后加载相应的CSS文件-->\n        <link rel=\"stylesheet\" type=\"text/css\" media=\"screen and (max-device-width: 375px)\" href=\"../css/screen-css/tinyScreen.css\" />\n        <link rel=\"stylesheet\" type=\"text/css\" media=\"screen and (min-width: 375px) and (max-device-width: 414px)\" href=\"../css/screen-css/smallScreen.css\" />\n        <link rel=\"stylesheet\" type=\"text/css\" media=\"screen and (min-width: 414px) and (max-device-width: 500px)\" href=\"../css/screen-css/middleScreen.css\" />\n        <link rel=\"stylesheet\" type=\"text/css\" media=\"screen and (min-width: 500px) and (max-device-width: 600px)\" href=\"../css/screen-css/biggerScreen.css\" />\n        <link rel=\"stylesheet\" type=\"text/css\" media=\"screen and (min-width: 600px)\" href=\"../css/screen-css/hugeScreen.css\" />\n        <!--公共样式-->\n        <link rel=\"stylesheet\" href=\"../css/public-css/public.css\">\n        <!--字体图标样式-->\n        <link rel=\"stylesheet\" href=\"../css/font-icon-css/font-icon.css\">\n        <!--头部与底部样式-->\n        <link rel=\"stylesheet\" href=\"../css/fixed-header-footer-css/fixed-header-footer.css\">\n    </head>\n\n\n","source":"_posts/自适应网页设计的核心.md","raw":"---\ntitle: 自适应网页设计的核心\n---\n\"自适应网页设计\"的核心，就是CSS3引入的Media Query模块。\n它的意思就是，自动探测屏幕宽度，然后加载相应的CSS文件。\n\n    <link rel=\"stylesheet\" type=\"text/css\" media=\"screen and max-device-width:400px)\" href=\"tinyScreen.css\" />\n<!-- more-->\n上面的代码意思是，如果屏幕宽度小于400像素（max-device-width: 400px），就加载tinyScreen.css文件。\n\n    <link rel=\"stylesheet\" type=\"text/css\" media=\"screen and (min-width: 400px) and (max-device-width: 600px)\" href=\"smallScreen.css\" />\n如果屏幕宽度在400像素到600像素之间，则加载smallScreen.css文件。\n除了用html标签加载CSS文件，还可以在现有CSS文件中加载。\n\n    @import url(\"tinyScreen.css\") screen and (max-device-width: 400px);\n最后给个自定义标准head作为参考：\n\n    <head>\n        <meta charset=\"UTF-8\">\n        <!--如果安装了GCF，则使用GCF来渲染页面，如果未安装GCF，则使用最高版本的IE内核进行渲染-->\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <!--视图默认比例，用户不可缩放视图设置-->\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0, minimum-scale=1.0,user-scalable=no\">\n        <!--删除默认的苹果工具栏和菜单栏-->\n        <meta name=\"apple-mobile-web-app-capable\" content=\"yes\"/>\n        <!--控制状态栏显示样式-->\n        <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"/>\n        <!--电话、邮件、地址默认格式取消-->\n        <meta name=\"format-detection\" content=\"telephone=no,email=no,adress=no\"/>\n        <!--手机端点击时，禁止出现灰色区域-->\n        <meta name=\"msapplication-tap-highlight\" content=\"no\"/>\n        <title>web移动端标准head参考</title>\n        <!--自动探测屏幕宽度，然后加载相应的CSS文件-->\n        <link rel=\"stylesheet\" type=\"text/css\" media=\"screen and (max-device-width: 375px)\" href=\"../css/screen-css/tinyScreen.css\" />\n        <link rel=\"stylesheet\" type=\"text/css\" media=\"screen and (min-width: 375px) and (max-device-width: 414px)\" href=\"../css/screen-css/smallScreen.css\" />\n        <link rel=\"stylesheet\" type=\"text/css\" media=\"screen and (min-width: 414px) and (max-device-width: 500px)\" href=\"../css/screen-css/middleScreen.css\" />\n        <link rel=\"stylesheet\" type=\"text/css\" media=\"screen and (min-width: 500px) and (max-device-width: 600px)\" href=\"../css/screen-css/biggerScreen.css\" />\n        <link rel=\"stylesheet\" type=\"text/css\" media=\"screen and (min-width: 600px)\" href=\"../css/screen-css/hugeScreen.css\" />\n        <!--公共样式-->\n        <link rel=\"stylesheet\" href=\"../css/public-css/public.css\">\n        <!--字体图标样式-->\n        <link rel=\"stylesheet\" href=\"../css/font-icon-css/font-icon.css\">\n        <!--头部与底部样式-->\n        <link rel=\"stylesheet\" href=\"../css/fixed-header-footer-css/fixed-header-footer.css\">\n    </head>\n\n\n","slug":"自适应网页设计的核心","published":1,"date":"2016-08-12T08:32:22.026Z","updated":"2016-09-22T08:41:22.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bp1gz000gi0beat5ulg82","content":"<p>“自适应网页设计”的核心，就是CSS3引入的Media Query模块。<br>它的意思就是，自动探测屏幕宽度，然后加载相应的CSS文件。</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and max-device-width:400px)&quot; href=&quot;tinyScreen.css&quot; /&gt;\n</code></pre><a id=\"more\"></a>\n<p>上面的代码意思是，如果屏幕宽度小于400像素（max-device-width: 400px），就加载tinyScreen.css文件。</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and (min-width: 400px) and (max-device-width: 600px)&quot; href=&quot;smallScreen.css&quot; /&gt;\n</code></pre><p>如果屏幕宽度在400像素到600像素之间，则加载smallScreen.css文件。<br>除了用html标签加载CSS文件，还可以在现有CSS文件中加载。</p>\n<pre><code>@import url(&quot;tinyScreen.css&quot;) screen and (max-device-width: 400px);\n</code></pre><p>最后给个自定义标准head作为参考：</p>\n<pre><code>&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;!--如果安装了GCF，则使用GCF来渲染页面，如果未安装GCF，则使用最高版本的IE内核进行渲染--&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;\n    &lt;!--视图默认比例，用户不可缩放视图设置--&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0, minimum-scale=1.0,user-scalable=no&quot;&gt;\n    &lt;!--删除默认的苹果工具栏和菜单栏--&gt;\n    &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;/&gt;\n    &lt;!--控制状态栏显示样式--&gt;\n    &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;/&gt;\n    &lt;!--电话、邮件、地址默认格式取消--&gt;\n    &lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no,email=no,adress=no&quot;/&gt;\n    &lt;!--手机端点击时，禁止出现灰色区域--&gt;\n    &lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;/&gt;\n    &lt;title&gt;web移动端标准head参考&lt;/title&gt;\n    &lt;!--自动探测屏幕宽度，然后加载相应的CSS文件--&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and (max-device-width: 375px)&quot; href=&quot;../css/screen-css/tinyScreen.css&quot; /&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and (min-width: 375px) and (max-device-width: 414px)&quot; href=&quot;../css/screen-css/smallScreen.css&quot; /&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and (min-width: 414px) and (max-device-width: 500px)&quot; href=&quot;../css/screen-css/middleScreen.css&quot; /&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and (min-width: 500px) and (max-device-width: 600px)&quot; href=&quot;../css/screen-css/biggerScreen.css&quot; /&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and (min-width: 600px)&quot; href=&quot;../css/screen-css/hugeScreen.css&quot; /&gt;\n    &lt;!--公共样式--&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;../css/public-css/public.css&quot;&gt;\n    &lt;!--字体图标样式--&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;../css/font-icon-css/font-icon.css&quot;&gt;\n    &lt;!--头部与底部样式--&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;../css/fixed-header-footer-css/fixed-header-footer.css&quot;&gt;\n&lt;/head&gt;\n</code></pre>","excerpt":"<p>“自适应网页设计”的核心，就是CSS3引入的Media Query模块。<br>它的意思就是，自动探测屏幕宽度，然后加载相应的CSS文件。</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and max-device-width:400px)&quot; href=&quot;tinyScreen.css&quot; /&gt;\n</code></pre>","more":"<p>上面的代码意思是，如果屏幕宽度小于400像素（max-device-width: 400px），就加载tinyScreen.css文件。</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and (min-width: 400px) and (max-device-width: 600px)&quot; href=&quot;smallScreen.css&quot; /&gt;\n</code></pre><p>如果屏幕宽度在400像素到600像素之间，则加载smallScreen.css文件。<br>除了用html标签加载CSS文件，还可以在现有CSS文件中加载。</p>\n<pre><code>@import url(&quot;tinyScreen.css&quot;) screen and (max-device-width: 400px);\n</code></pre><p>最后给个自定义标准head作为参考：</p>\n<pre><code>&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;!--如果安装了GCF，则使用GCF来渲染页面，如果未安装GCF，则使用最高版本的IE内核进行渲染--&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;\n    &lt;!--视图默认比例，用户不可缩放视图设置--&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0, minimum-scale=1.0,user-scalable=no&quot;&gt;\n    &lt;!--删除默认的苹果工具栏和菜单栏--&gt;\n    &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;/&gt;\n    &lt;!--控制状态栏显示样式--&gt;\n    &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;/&gt;\n    &lt;!--电话、邮件、地址默认格式取消--&gt;\n    &lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no,email=no,adress=no&quot;/&gt;\n    &lt;!--手机端点击时，禁止出现灰色区域--&gt;\n    &lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;/&gt;\n    &lt;title&gt;web移动端标准head参考&lt;/title&gt;\n    &lt;!--自动探测屏幕宽度，然后加载相应的CSS文件--&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and (max-device-width: 375px)&quot; href=&quot;../css/screen-css/tinyScreen.css&quot; /&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and (min-width: 375px) and (max-device-width: 414px)&quot; href=&quot;../css/screen-css/smallScreen.css&quot; /&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and (min-width: 414px) and (max-device-width: 500px)&quot; href=&quot;../css/screen-css/middleScreen.css&quot; /&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and (min-width: 500px) and (max-device-width: 600px)&quot; href=&quot;../css/screen-css/biggerScreen.css&quot; /&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and (min-width: 600px)&quot; href=&quot;../css/screen-css/hugeScreen.css&quot; /&gt;\n    &lt;!--公共样式--&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;../css/public-css/public.css&quot;&gt;\n    &lt;!--字体图标样式--&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;../css/font-icon-css/font-icon.css&quot;&gt;\n    &lt;!--头部与底部样式--&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;../css/fixed-header-footer-css/fixed-header-footer.css&quot;&gt;\n&lt;/head&gt;\n</code></pre>"},{"title":"React Native组件的生命周期","_content":"\n我们通过构造一个简单的列表组件，深入了解组件各环节的运作流程，以下为详细代码：\n\n    var List =React.createClass({\n            //1、创建阶段\n            getDefaultProps:function(){\n                //在创建类的时候被调用\n                console.log(\"getDefaultProps\");\n                return{};\n            },\n            //2、实例化阶段\n            getInitialState:function(){\n                //获取this.state的默认值\n                console.log(\"getInitialState\");\n                return {};\n            },\n            componentWillMount:function(){\n                //在render之前调用此方法\n                //业务逻辑的处理都应该放在这里，如对state的操作等\n                console.log(\"componentWillMount\");\n            },\n            render:function(){\n                //渲染并返回一个虚拟的DOM\n                console.log(\"render\");\n                return(\n                   <div>hello <strong>{this.props.name}</strong></div>\n                    );\n            },\n            componentDidMount:function(){\n                //该方法发生在render方法之后。在该方法中，ReactJS会使用render方法返回的虚拟DOM对象来创建真实的DOM结构\n                console.log(\"componentDidMount\");\n            },\n            //3、更新阶段\n            componentWillRecieveProps:function(){\n                //该方法发生在this.props被修改或父组件调用setProps()方法之后\n                console.log(\"componentWillRecieveProps\");\n            },\n            shouldComponentUpdate:function(){\n                //是否需要更新\n                console.log(\"shouldComponentUpdate\");\n                return true;\n            },\n            componentWillUpdate:function(){\n                //将要更新\n                console.log(\"componentWillUpdate\");\n            },\n            componentDidUpdate:function(){\n                //更新完毕\n                console.log(\"componentDidUpdate\");\n            },\n            //4、销毁阶段\n            componentWillUnmount:function(){\n                //销毁时被调用\n                console.log(\"componentWillUnmount\");\n            }\n        })","source":"_posts/React Native组件的生命周期.md","raw":"---\ntitle: React Native组件的生命周期\n---\n\n我们通过构造一个简单的列表组件，深入了解组件各环节的运作流程，以下为详细代码：\n\n    var List =React.createClass({\n            //1、创建阶段\n            getDefaultProps:function(){\n                //在创建类的时候被调用\n                console.log(\"getDefaultProps\");\n                return{};\n            },\n            //2、实例化阶段\n            getInitialState:function(){\n                //获取this.state的默认值\n                console.log(\"getInitialState\");\n                return {};\n            },\n            componentWillMount:function(){\n                //在render之前调用此方法\n                //业务逻辑的处理都应该放在这里，如对state的操作等\n                console.log(\"componentWillMount\");\n            },\n            render:function(){\n                //渲染并返回一个虚拟的DOM\n                console.log(\"render\");\n                return(\n                   <div>hello <strong>{this.props.name}</strong></div>\n                    );\n            },\n            componentDidMount:function(){\n                //该方法发生在render方法之后。在该方法中，ReactJS会使用render方法返回的虚拟DOM对象来创建真实的DOM结构\n                console.log(\"componentDidMount\");\n            },\n            //3、更新阶段\n            componentWillRecieveProps:function(){\n                //该方法发生在this.props被修改或父组件调用setProps()方法之后\n                console.log(\"componentWillRecieveProps\");\n            },\n            shouldComponentUpdate:function(){\n                //是否需要更新\n                console.log(\"shouldComponentUpdate\");\n                return true;\n            },\n            componentWillUpdate:function(){\n                //将要更新\n                console.log(\"componentWillUpdate\");\n            },\n            componentDidUpdate:function(){\n                //更新完毕\n                console.log(\"componentDidUpdate\");\n            },\n            //4、销毁阶段\n            componentWillUnmount:function(){\n                //销毁时被调用\n                console.log(\"componentWillUnmount\");\n            }\n        })","slug":"React Native组件的生命周期","published":1,"date":"2016-10-11T09:12:01.489Z","updated":"2016-10-11T09:36:33.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bp1gz000hi0be390zsvc7","content":"<p>我们通过构造一个简单的列表组件，深入了解组件各环节的运作流程，以下为详细代码：</p>\n<pre><code>var List =React.createClass({\n        //1、创建阶段\n        getDefaultProps:function(){\n            //在创建类的时候被调用\n            console.log(&quot;getDefaultProps&quot;);\n            return{};\n        },\n        //2、实例化阶段\n        getInitialState:function(){\n            //获取this.state的默认值\n            console.log(&quot;getInitialState&quot;);\n            return {};\n        },\n        componentWillMount:function(){\n            //在render之前调用此方法\n            //业务逻辑的处理都应该放在这里，如对state的操作等\n            console.log(&quot;componentWillMount&quot;);\n        },\n        render:function(){\n            //渲染并返回一个虚拟的DOM\n            console.log(&quot;render&quot;);\n            return(\n               &lt;div&gt;hello &lt;strong&gt;{this.props.name}&lt;/strong&gt;&lt;/div&gt;\n                );\n        },\n        componentDidMount:function(){\n            //该方法发生在render方法之后。在该方法中，ReactJS会使用render方法返回的虚拟DOM对象来创建真实的DOM结构\n            console.log(&quot;componentDidMount&quot;);\n        },\n        //3、更新阶段\n        componentWillRecieveProps:function(){\n            //该方法发生在this.props被修改或父组件调用setProps()方法之后\n            console.log(&quot;componentWillRecieveProps&quot;);\n        },\n        shouldComponentUpdate:function(){\n            //是否需要更新\n            console.log(&quot;shouldComponentUpdate&quot;);\n            return true;\n        },\n        componentWillUpdate:function(){\n            //将要更新\n            console.log(&quot;componentWillUpdate&quot;);\n        },\n        componentDidUpdate:function(){\n            //更新完毕\n            console.log(&quot;componentDidUpdate&quot;);\n        },\n        //4、销毁阶段\n        componentWillUnmount:function(){\n            //销毁时被调用\n            console.log(&quot;componentWillUnmount&quot;);\n        }\n    })\n</code></pre>","excerpt":"","more":"<p>我们通过构造一个简单的列表组件，深入了解组件各环节的运作流程，以下为详细代码：</p>\n<pre><code>var List =React.createClass({\n        //1、创建阶段\n        getDefaultProps:function(){\n            //在创建类的时候被调用\n            console.log(&quot;getDefaultProps&quot;);\n            return{};\n        },\n        //2、实例化阶段\n        getInitialState:function(){\n            //获取this.state的默认值\n            console.log(&quot;getInitialState&quot;);\n            return {};\n        },\n        componentWillMount:function(){\n            //在render之前调用此方法\n            //业务逻辑的处理都应该放在这里，如对state的操作等\n            console.log(&quot;componentWillMount&quot;);\n        },\n        render:function(){\n            //渲染并返回一个虚拟的DOM\n            console.log(&quot;render&quot;);\n            return(\n               &lt;div&gt;hello &lt;strong&gt;{this.props.name}&lt;/strong&gt;&lt;/div&gt;\n                );\n        },\n        componentDidMount:function(){\n            //该方法发生在render方法之后。在该方法中，ReactJS会使用render方法返回的虚拟DOM对象来创建真实的DOM结构\n            console.log(&quot;componentDidMount&quot;);\n        },\n        //3、更新阶段\n        componentWillRecieveProps:function(){\n            //该方法发生在this.props被修改或父组件调用setProps()方法之后\n            console.log(&quot;componentWillRecieveProps&quot;);\n        },\n        shouldComponentUpdate:function(){\n            //是否需要更新\n            console.log(&quot;shouldComponentUpdate&quot;);\n            return true;\n        },\n        componentWillUpdate:function(){\n            //将要更新\n            console.log(&quot;componentWillUpdate&quot;);\n        },\n        componentDidUpdate:function(){\n            //更新完毕\n            console.log(&quot;componentDidUpdate&quot;);\n        },\n        //4、销毁阶段\n        componentWillUnmount:function(){\n            //销毁时被调用\n            console.log(&quot;componentWillUnmount&quot;);\n        }\n    })\n</code></pre>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}